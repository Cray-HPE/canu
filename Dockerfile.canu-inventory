# MIT License
#
# (C) Copyright [2022] Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
# Stage 1 Create wheels for dependencies
FROM      artifactory.algol60.net/csm-docker/stable/docker.io/python:slim-bullseye as wheels_builder

RUN       apt-get -yq update && \
          apt-get -yq install \
            gcc \
            openssl \
            jq \
            vim \
            libffi-dev \
            musl-dev \
            python3 \
            python3-dev \
            python3-pip \
            git

RUN        mkdir /wheels

COPY       . /source

WORKDIR    /source

RUN        pip install --upgrade pip wheel setuptools && pip wheel . --wheel-dir=/wheels


# Stage 2 Build the final image without build depoendencies
FROM       artifactory.algol60.net/csm-docker/stable/docker.io/python:slim-bullseye as prod

# Git it still used in find_version() in setup.py
RUN       apt-get -yq update && apt-get -yq install git

COPY       . /source

COPY       --from=wheels_builder /wheels /tmp/wheels

WORKDIR    /source

RUN        python3 -m pip install --no-index --find-links=/tmp/wheels .

# In order to volume mount the CA certs file, we need to create the directory and file
# othwerwise the volume mount will mount the file as a directory
# Since this is an empty file and not a valid cert bundle, the inventory script will fail without the volume mount
RUN        mkdir -p /etc/pki/trust/anchors/
RUN        touch /etc/pki/trust/anchors/platform-ca-certs.crt
# in order to mount a file, we need to create it first
RUN        touch /sls_input_file.json

# The gateway and token are needed to connect to the SLS API
ENV        SLS_API_GW "api-gw-service.local"
ENV        SLS_TOKEN ""
# canu-inventory will use TOKEN as well if SLS_TOKEN is not set
ENV        TOKEN ""
# The path to the CA certs file is needed for a secure connection
# this should be volume mounted into the container: '-v /absolute_path/to/local.crt:/etc/pki/trust/anchors/platform-ca-certs.crt'
ENV        REQUESTS_CA_BUNDLE "/etc/pki/trust/anchors/platform-ca-certs.crt"

# Alternatively, users can use a local SLS input file
ENV        SLS_INPUT_FILE "/sls_input_file.json"

# These do not do anything in terms of connecting to the inventory, but they add the credentials to the dynamic inventory, which ansible then can use
ENV        SWITCH_USERNAME ""
ENV        SWITCH_PASSWORD ""
ENV        CANU_NET "CMN"

ENTRYPOINT [ "canu-inventory" ]
