{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"CANU","text":"<p>(CSM Automatic Network Utility) floats through a Shasta network and makes setup and config breeze.</p> <p>CANU can be used to:</p> <ul> <li> <p>Check if switches (Aruba, Dell, or Mellanox) on a Shasta network meet the firmware version requirements</p> </li> <li> <p>Check network cabling status using LLDP</p> </li> <li> <p>Validate BGP status</p> </li> <li> <p>Validate that SHCD spreadsheets are configured correctly and pass a number of checks</p> </li> <li> <p>Validate an SHCD against actual network cabling status to check for mis-cabling</p> </li> <li> <p>Generate switch configuration for an entire network</p> </li> <li> <p>Convert SHCD to CCJ (CSM Cabling JSON)</p> </li> <li> <p>Use CCJ / Paddle to validate the network and generate network config</p> </li> <li> <p>Run tests against the mgmt network to check for faults/inconsistencies.</p> </li> <li> <p>Backup switch configs.</p> </li> </ul>"},{"location":"backup/","title":"canu backup network","text":"<p>Canu backup network config.</p> <pre><code>canu backup network [OPTIONS]\n</code></pre>"},{"location":"backup/#options","title":"Options","text":""},{"location":"backup/#-sls-file","title":"--sls-file( ) <p>File containing system SLS JSON data.</p>","text":""},{"location":"backup/#-network","title":"--network( ) <p>The network that is used to connect to the switches.</p> <ul> <li> <p>Default</p> <p><code>HMN</code></p> </li> <li> <p>Options</p> <p>HMN | CMN</p> </li> </ul>","text":""},{"location":"backup/#-log","title":"--log() <p>enable logging.</p>","text":""},{"location":"backup/#-folder","title":"--folder( ) <p>Required Folder to store config files</p>","text":""},{"location":"backup/#-unsanitized","title":"--unsanitized() <p>Retain sensitive data</p>","text":""},{"location":"backup/#-sls-address","title":"--sls-address( ) <ul> <li> <p>Default</p> <p><code>api-gw-service-nmn.local</code></p> </li> </ul>","text":""},{"location":"backup/#-password","title":"--password( ) <p>Switch password</p>","text":""},{"location":"backup/#-username","title":"--username( ) <p>Switch username</p> <ul> <li> <p>Default</p> <p><code>admin</code></p> </li> </ul>","text":""},{"location":"cache/","title":"Deprecated","text":""},{"location":"cache/#canu-cache","title":"canu cache","text":"<p>Print the canu_cache.yaml file.</p> <pre><code>canu cache [OPTIONS]\n</code></pre>"},{"location":"canu_inventory/","title":"Using <code>canu-inventory</code> with Ansible","text":"<p><code>canu-inventory</code> is a dynamic inventory script that queries a <code>sls_input_file.json</code> in the working directory, or an API gateway (<code>$SLS_API_GW</code>).  It can be called directly to print the information or it can be passed as an argument to <code>ansible-inventory</code>.</p> <ul> <li> <p><code>$SLS_API_GW</code> and <code>$SLS_TOKEN</code> (or <code>$TOKEN</code>) must be set in order to query the API.</p> </li> <li> <p><code>$SWITCH_USERNAME</code> and <code>$SWITCH_PASSWORD</code> must be set in order to execute playbooks.</p> </li> <li> <p><code>ANSIBLE_HOST_KEY_CHECKING=False</code> can be set to ignore host key checking.</p> </li> <li> <p><code>-e config_folder</code> should be set to the directory containing the switch configs.</p> </li> </ul> <pre><code># examples\nansible-inventory -i canu-inventory --list\nansible-playbook -i canu-inventory aruba-aoscx.yml -e config_folder=/switch_configs\n</code></pre> <p>When running the playbook you may need to input the full path to <code>canu-inventory</code>, the playbook, and the switch configs.</p> <pre><code># example\nansible-playbook -i /Users/bin/canu-inventory /Users/bin/canu/inventory/plays/aruba-aoscx.yml -e config_folder=/Users/canu\n</code></pre> <p>If using the API, <code>$TOKEN</code> or <code>$SLS_TOKEN</code> need to be set.</p> <p>If running this from outside the cluster over the CMN, <code>$REQUESTS_CA_BUNDLE</code> needs to be set</p>"},{"location":"container_install/","title":"Install The CANU Container","text":""},{"location":"container_install/#pre-built-image","title":"Pre-built Image","text":"<p>A pre-built CANU image can be pulled using a container runtime (Docker, Podman, etc.)</p> <pre><code>docker pull &lt;registry&gt;/canu:&lt;tag&gt;\n</code></pre> <p>You will need to authorize your container runtime in order to pull from it.</p>"},{"location":"container_install/#wrapper-script","title":"Wrapper Script","text":"<p>You may also wish to install the <code>canuctl</code> wrapper script to simplify running the container with the correct arguments.  That script is installed with the RPM or is available in the repo when building the container image.</p> <pre><code>./canuctl -p # run the prouction container\n./canuctl -d # run a development container, which has a development environment setup for making changes\n</code></pre> <pre><code>./canuctl -h\n\n./canuctl -d(ev) | -p(rod) [-r(ebuild)] [-i(mage) &lt;image&gt;] [args] [-h(elp)]\n\n  -d: run the dev container (editable environment to make changes to the code)\n  -p: run the prod container (canu for everyday use)\n  -r: rebuild the container (default ${ALPINE_IMAGE}: alpine:3.17)\n  -i: specify the image to use (default ${CANU_IMAGE}: artifactory.algol60.net/csm-docker/stable/canu)\n  -h: print this help message\n\n</code></pre>"},{"location":"container_install/#dockerfile","title":"Dockerfile","text":"<p>The container image can be built from the <code>Dockerfile</code> in the canu repo.</p> <pre><code>git clone https://github.com/Cray-HPE/canu.git\ncd canu\nmake prod\n</code></pre> <p>Note: this pulls from an authenticated Artifactory by default in order to get the base image.  You will need to authorize your container runtime in order to pull from it.</p> <p>Alternatively, you can override the base image to one that is publicly accessible.</p> <pre><code>ALPINE_IMAGE=alpine:3.17 make image\n</code></pre>"},{"location":"examples_output/","title":"Initialization","text":"<p>To help make switch setup a breeze. CANU can automatically parse SLS JSON data - including CSI sls_input_file.json output or the Shasta SLS API for switch IPv4 addresses.</p>"},{"location":"examples_output/#csi-input","title":"CSI Input","text":"<ul> <li>In order to parse CSI output, use the <code>--sls-file FILE</code> flag to pass in the folder where an SLS JSON file is located.</li> </ul> <p>The CSI <code>sls_input_file.json</code> file is generally stored in one of two places depending on how far the system is in the install process.</p> <ul> <li> <p>Early in the install process, when running off of the LiveCD the CSI <code>sls_input_file.json</code> file is normally found in the the directory <code>/var/www/ephemeral/prep/SYSTEMNAME/</code></p> </li> <li> <p>Later in the install process, the CSI <code>sls_input_file.json</code> file is generally in <code>/mnt/pitdata/prep/SYSTEMNAME/</code></p> </li> <li> <p>The SLS file can also be obtained from an NCN that\u2019s in the k8s cluster by running <code>cray sls dumpstate list  --format json</code></p> </li> <li> <p>The switch IPs will be read from the \u2018NMN\u2019 network, if a different network is desired, use the <code>--network</code> flag to choose a different one e.g. (CAN, MTL, NMN).</p> </li> </ul> <p>To get the switch IP addresses from CSI output, run the command:</p> <pre><code>canu init --sls-file SLS_FILE --out output.txt\n</code></pre> <p>Potential output:</p> <pre><code>8 IP addresses saved to output.txt\n</code></pre>"},{"location":"examples_output/#sls-api-input","title":"SLS API Input","text":"<ul> <li>To parse the Shasta SLS API for IP addresses, ensure that you have a valid token. The token file can either be passed in with the <code>--auth-token TOKEN_FILE</code> flag, or it can be automatically read if the environmental variable <code>SLS_TOKEN</code> is set. The SLS address is default set to <code>api-gw-service-nmn.local</code>, if you are operating on a system with a different address, you can set it with the <code>--sls-address SLS_ADDRESS</code> flag.</li> </ul> <p>To get the switch IP addresses from the Shasta SLS API, run the command:</p> <pre><code>canu init --auth-token ~./config/cray/tokens/ --sls-address 1.2.3.4 --out output.txt\n</code></pre> <p>Potential output:</p> <pre><code>8 IP addresses saved to output.txt\n</code></pre> <p>The output file for the <code>canu init</code> command is set with the <code>--out FILENAME</code> flag.</p>"},{"location":"examples_output/#report-switch-firmware","title":"Report Switch Firmware","text":"<p>CANU checks the switch firmware version against the standard in the <code>canu.yaml</code> file found in the root directory.</p> <p>The CSM version is required to determine the firmware to validate against, you can pass it in with <code>--csm</code> like <code>--csm 1.2</code>.</p> <p>To check the firmware of a single switch run: <code>canu report switch firmware --csm 1.2 --ip 192.168.1.1 --username USERNAME --password PASSWORD</code></p> <pre><code>$ canu report switch firmware --csm 1.2 --ip 192.168.1.1 --username USERNAME --password PASSWORD\n\ud83d\udef6 - Pass - IP: 192.168.1.1 Hostname:sw-spine-001 Firmware: GL.10.06.0010\n</code></pre>"},{"location":"examples_output/#report-network-firmware","title":"Report Network Firmware","text":"<p>Multiple switches on a network (Aruba, Dell, or Mellanox) can be checked for their firmware versions. The IPv4 addresses of the switches can either be entered comma separated, or be read from a file. To enter a comma separated list of IP addresses to the <code>---ips</code> flag. To read the IP addresses from a file, make sure the file has one IP address per line, and use the flag like <code>--ips-file FILENAME</code> to input the file.</p> <p>The CSM version is required to determine the firmware to validate against, you can pass it in with <code>--csm</code> like <code>--csm 1.2</code>.</p> <p>An example of checking the firmware of multiple switches: <code>canu report network firmware --csm 1.2 --ips 192.168.1.1,192.168.1.2 --username USERNAME --password PASSWORD</code></p> <pre><code>canu report network firmware --csm 1.2 --ips 192.168.1.1,192.168.1.2,192.168.1.3,192.168.1.4 --username USERNAME --password PASSWORD\n</code></pre> <p>Potential output:</p> <pre><code>------------------------------------------------------------------\n    STATUS  IP              HOSTNAME            FIRMWARE\n------------------------------------------------------------------\n \ud83d\udef6 Pass    192.168.1.1     test-switch-spine01 GL.10.06.0010\n \ud83d\udef6 Pass    192.168.1.2     test-switch-leaf01  FL.10.06.0010\n \u274c Fail    192.168.1.3     test-wrong-version  FL.10.05.0001   Firmware should be in range ['FL.10.06.0001']\n \ud83d\udd3a Error   192.168.1.4\n\n\nErrors\n------------------------------------------------------------------\n192.168.1.4     - HTTP Error. Check that this IP is an Aruba switch, or check the username and password\n\nSummary\n------------------------------------------------------------------\n\ud83d\udef6 Pass - 2 switches\n\u274c Fail - 1 switches\n\ud83d\udd3a Error - 1 switches\nGL.10.06.0010 - 1 switches\nFL.10.06.0010 - 1 switches\nFL.10.05.0010 - 1 switches\n</code></pre> <p>When using the network firmware commands, the table will show either: \ud83d\udef6 Pass, \u274c Fail, or \ud83d\udd3a Error. The switch will pass or fail based on if the switch firmware matches the <code>canu.yaml</code>.</p>"},{"location":"examples_output/#output-to-a-file","title":"Output to a File","text":"<p>To output the results of the switch firmware or network firmware commands to a file, append the <code>--out FILENAME</code> flag</p>"},{"location":"examples_output/#output-to-json","title":"Output to JSON","text":"<p>To get the JSON output from a single switch, or from multiple switches, make sure to use the <code>--json</code> flag. An example json output is below.</p> <pre><code>canu network firmware --csm 1.2 --ips 192.168.1.1,192.168.1.2 --username USERNAME --password PASSWORD --json\n</code></pre> <p>Potential output:</p> <pre><code>{\n    \"192.168.1.1\": {\n        \"status\": \"Pass\",\n        \"hostname\": \"test-switch-spine01\",\n        \"platform_name\": \"8325\",\n        \"firmware\": {\n            \"current_version\": \"GL.10.06.0010\",\n            \"primary_version\": \"GL.10.06.0010\",\n            \"secondary_version\": \"GL.10.05.0020\",\n            \"default_image\": \"primary\",\n            \"booted_image\": \"primary\",\n        },\n    },\n    \"192.168.1.2\": {\n        \"status\": \"Pass\",\n        \"hostname\": \"test-switch-leaf01\",\n        \"platform_name\": \"6300\",\n        \"firmware\": {\n            \"current_version\": \"FL.10.06.0010\",\n            \"primary_version\": \"FL.10.06.0010\",\n            \"secondary_version\": \"FL.10.05.0020\",\n            \"default_image\": \"primary\",\n            \"booted_image\": \"primary\",\n        },\n    },\n}\n</code></pre>"},{"location":"examples_output/#report-switch-cabling","title":"Report Switch Cabling","text":"<p>CANU can also use LLDP to check the cabling status of a switch. To check the cabling of a single switch run: <code>canu report switch cabling --ip 192.168.1.1 --username USERNAME --password PASSWORD</code></p> <pre><code>canu report switch cabling --ip 192.168.1.1 --username USERNAME --password PASSWORD\n</code></pre> <p>Potential output:</p> <pre><code>Switch: test-switch-spine01 (192.168.1.1)\nAruba 8325\n------------------------------------------------------------------------------------------------------------------------------------------\nPORT        NEIGHBOR       NEIGHBOR PORT      PORT DESCRIPTION                                      DESCRIPTION\n------------------------------------------------------------------------------------------------------------------------------------------\n1/1/1   ==&gt;                00:00:00:00:00:01  No LLDP data, check ARP vlan info.                    192.168.1.20:vlan1, 192.168.2.12:vlan2\n1/1/3   ==&gt; ncn-test2      00:00:00:00:00:02  mgmt0                                                 Linux ncn-test2\n1/1/5   ==&gt; ncn-test3      00:00:00:00:00:03  mgmt0                                                 Linux ncn-test3\n1/1/7   ==&gt;                00:00:00:00:00:04  No LLDP data, check ARP vlan info.                    192.168.1.10:vlan1, 192.168.2.9:vlan2\n1/1/51  ==&gt; test-spine02   1/1/51                                                                   Aruba JL635A  GL.10.06.0010\n1/1/52  ==&gt; test-spine02   1/1/52                                                                   Aruba JL635A  GL.10.06.0010\n</code></pre> <p>Sometimes when checking cabling using LLDP, the neighbor does not return any information except a MAC address. When that is the case, CANU looks up the MAC in the ARP table and displays the IP addresses and vlan information associated with the MAC.</p> <p>Entries in the table will be colored based on what they are. Neighbors that have ncn in their name will be colored blue. Neighbors that have a port labeled (not a MAC address), are generally switches and are labeled green. Ports that are duplicated, will be bright white.</p>"},{"location":"examples_output/#report-network-cabling","title":"Report Network Cabling","text":"<p>The cabling of multiple switches (Aruba, Dell, or Mellanox) on a network can be checked at the same time using LLDP. The IPv4 addresses of the switches can either be entered comma separated, or be read from a file. To enter a comma separated list of IP addresses to the <code>---ips</code> flag. To read the IP addresses from a file, make sure the file has one IP address per line, and use the flag like <code>--ips-file FILENAME</code> to input the file.</p> <p>An example of checking the cabling of multiple switches: <code>canu report network cabling --ips 192.168.1.1,192.168.1.2 --username USERNAME --password PASSWORD</code></p> <p>There are two different <code>--view</code> options, switch and equipment.</p> <ol> <li> <p>The <code>--view switch</code> option displays a table for every switch IP address passed in showing connections. This is the same view as shown in the above example of checking single switch cabling.</p> </li> <li> <p>The <code>--view equipment</code> option displays a table for each mac address connection. This means that servers and switches will both display incoming and outgoing connections.</p> </li> </ol> <p>An example of checking the cabling of multiple switches and displaying with the equipment view: <code>canu network cabling --ips 192.168.1.1,192.168.1.2 --username USERNAME --password PASSWORD --view equipment</code></p> <pre><code>canu report network cabling --ips 192.168.1.1,192.168.1.2 --username USERNAME --password PASSWORD --view equipment\n</code></pre> <p>Potential output:</p> <pre><code>sw-spine01 Aruba JL635A  GL.10.06.0010\naa:aa:aa:aa:aa:aa\n----------------------------------------------------------------------------------------------------\n1/1/1                     &lt;==&gt; sw-spine02      1/1/1  Aruba JL635A  GL.10.06.0010\n1/1/3                     ===&gt;                 00:00:00:00:00:00 mgmt1\n1/1/4                     ===&gt; ncn-test        bb:bb:bb:bb:bb:bb mgmt1 Linux ncn-test\n\n\nsw-spine02 Aruba JL635A  GL.10.06.0010\nbb:bb:bb:bb:bb:bb\n----------------------------------------------------------------------------------------------------\n1/1/1                     &lt;==&gt; sw-spine01      1/1/1  Aruba JL635A  GL.10.06.0010\n\n\n00:00:00:00:00:00\n192.168.2.2:vlan3, 192.168.1.2:vlan1\n----------------------------------------------------------------------------------------------------\n00:00:00:00:00:00 mgmt1   &lt;=== sw-spine01      1/1/3\n\n\nncn-test Linux ncn-test2\nbb:bb:bb:bb:bb:bb\n----------------------------------------------------------------------------------------------------\nbb:bb:bb:bb:bb:bb mgmt1   &lt;=== sw-spine01      1/1/4\n</code></pre>"},{"location":"examples_output/#validate-shcd","title":"Validate SHCD","text":"<p>CANU can be used to validate that an SHCD (SHasta Cabling Diagram) passes basic validation checks.</p> <ul> <li> <p>The <code>--architecture / -a</code> flag is used to set the architecture of the system, either TDS, Full, or V1..</p> </li> <li> <p>Use the <code>--tabs</code> flag to select which tabs on the spreadsheet will be included.</p> </li> <li> <p>The <code>--corners</code> flag is used to input the upper left and lower right corners of the table on each tab of the worksheet. The table should contain the 11 headers: Source, Rack, Location, Slot, (Blank), Port, Destination, Rack, Location, (Blank), Port. If the corners are not specified, you will be prompted to enter them for each tab.</p> </li> </ul> <p>To check an SHCD run: <code>canu validate shcd -a tds --shcd FILENAME.xlsx --tabs 25G_10G,NMN,HMN --corners I14,S25,I16,S22,J20,T39</code></p> <pre><code>canu validate shcd -a tds --shcd FILENAME.xlsx --tabs 25G_10G,NMN,HMN --corners I14,S25,I16,S22,J20,T39\n</code></pre> <p>Potential output:</p> <pre><code>SHCD Node Connections\n------------------------------------------------------------\n0: sw-spine-001 connects to 6 nodes: [1, 2, 3, 4, 5, 6]\n1: sw-spine-002 connects to 6 nodes: [0, 2, 3, 4, 5, 6]\n2: sw-leaf-bmc-001 connects to 2 nodes: [0, 1]\n3: uan001 connects to 2 nodes: [0, 1]\n4: ncn-s001 connects to 2 nodes: [0, 1]\n5: ncn-w001 connects to 2 nodes: [0, 1]\n6: ncn-m001 connects to 2 nodes: [0, 1]\n\nWarnings\n\nNode type could not be determined for the following\n------------------------------------------------------------\nCAN switch\n</code></pre> <p>The SHCD can easily be converted into CCJ by using by using the <code>--json</code> flag and outputting to a file by <code>canu validate shcd --shcd SHCD.xlsx --json --out paddle.json</code></p>"},{"location":"examples_output/#validate-paddle","title":"Validate Paddle","text":"<p>CANU can be used to validate that a CCJ (CSM Cabling JSON) passes basic validation checks.</p> <p>To validate a paddle CCJ run: <code>canu validate paddle --ccj paddle.json</code></p> <pre><code>canu validate paddle --ccj paddle.json\n</code></pre> <p>Potential output:</p> <pre><code>CCJ Node Connections\n------------------------------------------------------------\n0: sw-spine-001 connects to 6 nodes: [1, 2, 3, 4, 5, 6]\n1: sw-spine-002 connects to 6 nodes: [0, 2, 3, 4, 5, 6]\n2: sw-leaf-bmc-001 connects to 2 nodes: [0, 1]\n3: uan001 connects to 2 nodes: [0, 1]\n4: ncn-s001 connects to 2 nodes: [0, 1]\n5: ncn-w001 connects to 2 nodes: [0, 1]\n6: ncn-m001 connects to 2 nodes: [0, 1]\n</code></pre>"},{"location":"examples_output/#validate-network-cabling","title":"Validate Network Cabling","text":"<p>CANU can be used to validate that network cabling passes basic validation checks.</p> <ul> <li> <p>The <code>--architecture / -a</code> flag is used to set the architecture of the system, either TDS, Full, or V1.</p> </li> <li> <p>To enter a comma separated list of IP addresses to the <code>---ips</code> flag. To read the IP addresses from a file, make sure the file has one IP address per line, and use the flag like <code>--ips-file FILENAME</code> to input the file.</p> </li> </ul> <p>To validate the cabling run: <code>canu validate network cabling -a tds --ips 192.168.1.1,192.168.1.2 --username USERNAME --password PASSWORD</code></p> <pre><code>canu validate network cabling -a tds --ips 192.168.1.1,192.168.1.2 --username USERNAME --password PASSWORD\n</code></pre> <p>Potential output:</p> <pre><code>Cabling Node Connections\n------------------------------------------------------------\n0: sw-spine-001 connects to 10 nodes: [1, 2, 3, 4]\n1: ncn-m001 connects to 2 nodes: [0, 4]\n2: ncn-w001 connects to 2 nodes: [0, 4]\n3: ncn-s001 connects to 2 nodes: [0, 4]\n4: sw-spine-002 connects to 10 nodes: [0, 1, 2, 3 ]\n\nWarnings\n\nNode type could not be determined for the following\n------------------------------------------------------------\nsw-leaf-001\nsw-spine-001     1/1/1     ===&gt; aa:aa:aa:aa:aa:aa\nsw-spine-001     1/1/2     ===&gt; 1/1/1 CFCANB4S1 Aruba JL479A  TL.10.03.0081\nsw-spine-001     1/1/3     ===&gt; 1/1/3 sw-leaf-001 Aruba JL663A  FL.10.06.0010\nsw-spine-002     1/1/4     ===&gt; bb:bb:bb:bb:bb:bb\nsw-spine-002     1/1/5     ===&gt; 1/1/2 CFCANB4S1 Aruba JL479A  TL.10.03.0081\nsw-spine-002     1/1/6     ===&gt; 1/1/6 sw-leaf-001 Aruba JL663A  FL.10.06.0010\nNodes that show up as MAC addresses might need to have LLDP enabled.\n\nThe following nodes should be renamed\n------------------------------------------------------------\nsw-leaf01 should be renamed (could not identify node)\nsw-spine01 should be renamed sw-spine-001\nsw-spine02 should be renamed sw-spine-002\n</code></pre> <p>If there are any nodes that cannot be determined or should be renamed, there will be warning tables that show the details.</p>"},{"location":"examples_output/#validate-shcd-and-cabling","title":"Validate SHCD and Cabling","text":"<p>CANU can be used to validate an SHCD against the current network cabling.</p> <ul> <li> <p>The <code>--csm</code> flag is used to set the CSM version of the system.</p> </li> <li> <p>The <code>--architecture / -a</code> flag is used to set the architecture of the system, either TDS, Full, or V1.</p> </li> <li> <p>Use the <code>--tabs</code> flag to select which tabs on the spreadsheet will be included.</p> </li> <li> <p>The <code>--corners</code> flag is used to input the upper left and lower right corners of the table on each tab of the worksheet. The table should contain the 11 headers: Source, Rack, Location, Slot, (Blank), Port, Destination, Rack, Location, (Blank), Port. If the corners are not specified, you will be prompted to enter them for each tab.</p> </li> <li> <p>To enter a comma separated list of IP addresses to the <code>---ips</code> flag. To read the IP addresses from a file, make sure the file has one IP address per line, and use the flag like <code>--ips-file FILENAME</code> to input the file.</p> </li> </ul> <p>To validate an SHCD against the cabling run: <code>canu validate shcd-cabling --csm 1.2 -a tds --shcd FILENAME.xlsx --tabs 25G_10G,NMN --corners I14,S49,I16,S22 --ips 192.168.1.1,192.168.1.2 --username USERNAME --password PASSWORD</code></p> <pre><code>canu validate shcd-cabling --csm 1.2 -a tds --shcd FILENAME.xlsx --tabs 25G_10G,NMN --corners I14,S49,I16,S22 --ips 192.168.1.1,192.168.1.2 --username USERNAME --password PASSWORD\n</code></pre> <p>Potential output:</p> <pre><code>====================================================================================================\nSHCD vs Cabling\n====================================================================================================\n\nncn-m001\nRack: x3000    Elevation: u14\n--------------------------------------------------------------------------------\nPort   SHCD                     Cabling\n--------------------------------------------------------------------------------\n1      sw-spine-001:5           sw-spine-001:5\n2      sw-spine-002:5           sw-spine-002:5\n\nncn-s001\nRack: x3000    Elevation: u15\n--------------------------------------------------------------------------------\nPort   SHCD                     Cabling\n--------------------------------------------------------------------------------\n1      sw-spine-001:6           None\n2      sw-spine-002:6           None\n\nncn-w001\nRack: x3000    Elevation: u16\n--------------------------------------------------------------------------------\nPort   SHCD                     Cabling\n--------------------------------------------------------------------------------\n1      sw-spine-001:7           sw-spine-001:7\n2      sw-spine-002:7           sw-spine-002:7\n\nsw-spine-001\nRack: x3000    Elevation: u17\n--------------------------------------------------------------------------------\nPort   SHCD                     Cabling\n--------------------------------------------------------------------------------\n1      sw-spine-002:1           sw-spine-002:1\n2      sw-spine-002:2           sw-spine-002:2\n3      uan001:pcie-slot1:1      aa:aa:aa:aa:aa:aa Cray, Inc.\n5      ncn-m001:pcie-slot1:1    ncn-m001:pcie-slot1:1\n6      ncn-s001:pcie-slot1:1    b4:2e:99:aa:bb:cc GIGA-BYTE TECHNOLOGY CO.,LTD.\n7      ncn-w001:pcie-slot1:1    ncn-w001:pcie-slot1:1\n\nsw-spine-002\nRack: x3000    Elevation: u18\n--------------------------------------------------------------------------------\nPort   SHCD                     Cabling\n--------------------------------------------------------------------------------\n1      sw-spine-001:1           sw-spine-001:1\n2      sw-spine-001:2           sw-spine-001:2\n3      uan001:pcie-slot1:2      bb:bb:bb:bb:bb:bb Cray, Inc.\n5      ncn-m001:pcie-slot1:2    ncn-m001:pcie-slot1:2\n6      ncn-s001:pcie-slot1:2    b8:59:9f:aa:bb:cc Mellanox Technologies, Inc.\n7      ncn-w001:pcie-slot1:2    ncn-w001:pcie-slot1:2\n\nuan001\nRack: x3000    Elevation: u19\n--------------------------------------------------------------------------------\nPort   SHCD                     Cabling\n--------------------------------------------------------------------------------\n1      sw-spine-001:3           None\n2      sw-spine-002:3           None\n\n\n====================================================================================================\nSHCD Warnings\n====================================================================================================\n\nWarnings\n\nNode type could not be determined for the following\n------------------------------------------------------------\nSheet: HMN\nCell: R21      Name: SITE\n\n\n====================================================================================================\nCabling Warnings\n====================================================================================================\n\nNode type could not be determined for the following\n------------------------------------------------------------\nsw-spine-001     1/1/3     ===&gt; aa:aa:aa:aa:aa:aa Cray, Inc.\nsw-spine-002     1/1/3     ===&gt; bb:bb:bb:bb:bb:bb Cray, Inc.\nNodes that show up as MAC addresses might need to have LLDP enabled.\n</code></pre> <p>The output of the <code>validate shcd-cabling</code> command will show a port by port comparison between the devices found in the SHCD and devices found on the network. If there is a difference in what is found connected to a devices port in SHCD and Cabling, the line will be highlighted in red.</p>"},{"location":"examples_output/#validate-paddle-and-cabling","title":"Validate Paddle and Cabling","text":"<p>CANU can be used to validate aCCJ paddle against the current network cabling.</p> <ul> <li> <p>The <code>--csm</code> flag is used to set the CSM version of the system.</p> </li> <li> <p>The <code>--ccj</code> flag is used to input the CCJ file.</p> </li> <li> <p>To enter a comma separated list of IP addresses to the <code>---ips</code> flag. To read the IP addresses from a file, make sure the file has one IP address per line, and use the flag like <code>--ips-file FILENAME</code> to input the file.</p> </li> </ul> <p>To validate an SHCD against the cabling run: <code>canu validate paddle-cabling --csm 1.2 --ccj paddle.json --ips 192.168.1.1,192.168.1.2 --username USERNAME --password PASSWORD</code></p> <pre><code>canu validate paddle-cabling --csm 1.2 --ccj paddle.json --ips 192.168.1.1,192.168.1.2 --username USERNAME --password PASSWORD\n</code></pre> <p>Potential output:</p> <pre><code>====================================================================================================\nCCJ vs Cabling\n====================================================================================================\n\nncn-m001\nRack: x3000    Elevation: u14\n--------------------------------------------------------------------------------\nPort   CCJ                      Cabling\n--------------------------------------------------------------------------------\n1      sw-spine-001:5           sw-spine-001:5\n2      sw-spine-002:5           sw-spine-002:5\n\nncn-s001\nRack: x3000    Elevation: u15\n--------------------------------------------------------------------------------\nPort   CCJ                      Cabling\n--------------------------------------------------------------------------------\n1      sw-spine-001:6           None\n2      sw-spine-002:6           None\n\nncn-w001\nRack: x3000    Elevation: u16\n--------------------------------------------------------------------------------\nPort   CCJ                      Cabling\n--------------------------------------------------------------------------------\n1      sw-spine-001:7           sw-spine-001:7\n2      sw-spine-002:7           sw-spine-002:7\n\nsw-spine-001\nRack: x3000    Elevation: u17\n--------------------------------------------------------------------------------\nPort   CCJ                      Cabling\n--------------------------------------------------------------------------------\n1      sw-spine-002:1           sw-spine-002:1\n2      sw-spine-002:2           sw-spine-002:2\n3      uan001:pcie-slot1:1      aa:aa:aa:aa:aa:aa Cray, Inc.\n5      ncn-m001:pcie-slot1:1    ncn-m001:pcie-slot1:1\n6      ncn-s001:pcie-slot1:1    b4:2e:99:aa:bb:cc GIGA-BYTE TECHNOLOGY CO.,LTD.\n7      ncn-w001:pcie-slot1:1    ncn-w001:pcie-slot1:1\n\nsw-spine-002\nRack: x3000    Elevation: u18\n--------------------------------------------------------------------------------\nPort   CCJ                      Cabling\n--------------------------------------------------------------------------------\n1      sw-spine-001:1           sw-spine-001:1\n2      sw-spine-001:2           sw-spine-001:2\n3      uan001:pcie-slot1:2      bb:bb:bb:bb:bb:bb Cray, Inc.\n5      ncn-m001:pcie-slot1:2    ncn-m001:pcie-slot1:2\n6      ncn-s001:pcie-slot1:2    b8:59:9f:aa:bb:cc Mellanox Technologies, Inc.\n7      ncn-w001:pcie-slot1:2    ncn-w001:pcie-slot1:2\n\nuan001\nRack: x3000    Elevation: u19\n--------------------------------------------------------------------------------\nPort   CCJ                      Cabling\n--------------------------------------------------------------------------------\n1      sw-spine-001:3           None\n2      sw-spine-002:3           None\n\n\n====================================================================================================\nCCJ  Warnings\n====================================================================================================\n\n====================================================================================================\nCabling Warnings\n====================================================================================================\n\nNode type could not be determined for the following\n------------------------------------------------------------\nsw-spine-001     1/1/3     ===&gt; aa:aa:aa:aa:aa:aa Cray, Inc.\nsw-spine-002     1/1/3     ===&gt; bb:bb:bb:bb:bb:bb Cray, Inc.\nNodes that show up as MAC addresses might need to have LLDP enabled.\n</code></pre> <p>The output of the <code>validate paddle-cabling</code> command will show a port by port comparison between the devices found in the CCJ and devices found on the network. If there is a difference in what is found connected to a devices port in CCJ and Cabling, the line will be highlighted in red.</p>"},{"location":"examples_output/#validate-network-bgp","title":"Validate Network BGP","text":"<p>CANU can be used to validate BGP neighbors. All neighbors of a switch must return status Established or the verification will fail.</p> <ul> <li>The default asn is set to 65533 if it needs to be changed, use the flag <code>--asn NEW_ASN_NUMBER</code> to set the new number</li> </ul> <p>If you want to see the individual status of all the neighbors of a switch, use the <code>--verbose</code> flag.</p> <p>To validate BGP run: <code>canu validate network bgp --ips 192.168.1.1,192.168.1.2 --username USERNAME --password PASSWORD</code></p> <pre><code>canu validate network bgp --username USERNAME --password PASSWORD\n</code></pre> <p>Potential output:</p> <pre><code>BGP Neighbors Established\n--------------------------------------------------\nPASS - IP: 192.168.1.1 Hostname: sw-spine01\nPASS - IP: 192.168.1.2 Hostname: sw-spine01\n</code></pre> <p>If any of the spine switch neighbors for a connection other than Established, the switch will FAIL validation.</p>"},{"location":"examples_output/#generate-switch-config","title":"Generate Switch Config","text":"<p>To see all the lags that are generated, see lags</p> <p>CANU can be used to generate switch config.</p> <p>In order to generate switch config, a valid SHCD or CCJ must be passed in and system variables must be read in from any SLS data, including CSI output or the SLS API.</p>"},{"location":"examples_output/#csi-input_1","title":"CSI Input","text":"<ul> <li>In order to parse CSI output, use the <code>--sls-file FILE</code> flag to pass in the folder where the <code>sls_file.json</code> file is located.</li> </ul> <p>The sls_input_file.json file is generally stored in one of two places depending on how far the system is in the install process.</p> <ul> <li> <p>Early in the install process, when running off of the LiveCD the sls_input_file.json file is normally found in the the directory <code>/var/www/ephemeral/prep/SYSTEMNAME/</code></p> </li> <li> <p>Later in the install process, the sls_input_file.json file is generally in <code>/mnt/pitdata/prep/SYSTEMNAME/</code></p> </li> </ul>"},{"location":"examples_output/#sls-api-input_1","title":"SLS API Input","text":"<ul> <li>To parse the Shasta SLS API for IP addresses, ensure that you have a valid token. The token file can either be passed in with the <code>--auth-token TOKEN_FILE</code> flag, or it can be automatically read if the environmental variable SLS_TOKEN is set. The SLS address is default set to api-gw-service-nmn.local, if you are operating on a system with a different address, you can set it with the <code>--sls-address SLS_ADDRESS</code> flag.</li> </ul>"},{"location":"examples_output/#paddle-ccj-input","title":"Paddle / CCJ Input","text":"<ul> <li> <p>The <code>--csm</code> flag is used to set the CSM version of the system.</p> </li> <li> <p>The <code>--ccj</code> flag is used to input the CCJ file.</p> </li> </ul> <p>To generate switch config run: <code>canu generate switch config --csm 1.2 --ccj paddle.json --sls-file SLS_FILE --name SWITCH_HOSTNAME --out FILENAME</code></p>"},{"location":"examples_output/#shcd-input","title":"SHCD Input","text":"<ul> <li> <p>The <code>--csm</code> flag is used to set the CSM version of the system.</p> </li> <li> <p>The <code>--architecture / -a</code> flag is used to set the architecture of the system, either TDS, Full, or V1..</p> </li> <li> <p>Use the <code>--tabs</code> flag to select which tabs on the spreadsheet will be included.</p> </li> <li> <p>The <code>--corners</code> flag is used to input the upper left and lower right corners of the table on each tab of the worksheet. The table should contain the 11 headers: Source, Rack, Location, Slot, (Blank), Port, Destination, Rack, Location, (Blank), Port. If the corners are not specified, you will be prompted to enter them for each tab.</p> </li> </ul> <p>To generate config for a specific switch, a hostname must also be passed in using the <code>--name HOSTNAME</code> flag. To output the config to a file, append the <code>--out FILENAME</code> flag.</p> <p>To generate switch config run: <code>canu generate switch config --csm 1.2 -a full --shcd FILENAME.xlsx --tabs 'INTER_SWITCH_LINKS,NON_COMPUTE_NODES,HARDWARE_MANAGEMENT,COMPUTE_NODES' --corners 'J14,T44,J14,T48,J14,T24,J14,T23' --sls-file SLS_FILE --name SWITCH_HOSTNAME --out FILENAME</code></p> <pre><code>canu generate switch config --csm 1.2 -a full --shcd FILENAME.xlsx --tabs INTER_SWITCH_LINKS,NON_COMPUTE_NODES,HARDWARE_MANAGEMENT,COMPUTE_NODES --corners J14,T44,J14,T48,J14,T24,J14,T23 --sls-file SLS_FILE --name sw-spine-001\n</code></pre> <p>Potential output:</p> <pre><code>hostname sw-spine-001\nuser admin group administrators password plaintext\nbfd\nno ip icmp redirect\nvrf CAN\nvrf keepalive\n...\n</code></pre>"},{"location":"examples_output/#generate-switch-configs-including-custom-configurations","title":"Generate Switch Configs Including Custom Configurations","text":"<p>Pass in a switch config file that CANU will inject into the generated config. A use case would be to add custom site connections. This config file will overwrite previously generate config.</p> <p>The <code>custom-config</code> file type is YAML and a single file can be used for multiple switches. You will need to specify the switch name and what config inject.  The <code>custom-config</code> feature is using the hierarchical configuration library, documentation can be found here https://netdevops.io/hier_config/.</p> <p>custom config file examples</p> <p>Aruba</p> <pre><code>sw-spine-001:  |\n    ip route 0.0.0.0/0 10.103.15.185\n    interface 1/1/36\n        no shutdown\n        ip address 10.103.15.186/30\n        exit\n    system interface-group 3 speed 10g\n    interface 1/1/2\n        no shutdown\n        mtu 9198\n        description sw-spine-001:16==&gt;ion-node\n        no routing\n        vlan access 7\n        spanning-tree bpdu-guard\n        spanning-tree port-type admin-edge\nsw-spine-002:  |\n    ip route 0.0.0.0/0 10.103.15.189\n    interface 1/1/36\n        no shutdown\n        ip address 10.103.15.190/30\n        exit\n    system interface-group 3 speed 10g\nsw-leaf-bmc-001:  |\n    interface 1/1/20\n        no routing\n        vlan access 4\n        spanning-tree bpdu-guard\n        spanning-tree port-type admin-edge\n</code></pre> <p>Mellanox/Dell</p> <pre><code>sw-spine-001:  |\n    interface ethernet 1/1 speed 10G force\n    interface ethernet 1/1 description \"sw-spine02-1/16\"\n    interface ethernet 1/1 no switchport force\n    interface ethernet 1/1 ip address 10.102.255.14/30 primary\n    interface ethernet 1/1 dcb priority-flow-control mode on force\n    ip route vrf default 0.0.0.0/0 10.102.255.13\nsw-spine-002:  |\n    interface ethernet 1/16 speed 10G force\n    interface ethernet 1/16 description \"sw-spine01-1/16\"\n    interface ethernet 1/16 no switchport force\n    interface ethernet 1/16 ip address 10.102.255.34/30 primary\n    interface ethernet 1/16 dcb priority-flow-control mode on force\n    ip route vrf default 0.0.0.0/0 10.102.255.33\nsw-leaf-bmc-001:  |\n    interface ethernet1/1/12\n      description sw-leaf-bmc-001:12==&gt;cn003:2\n      no shutdown\n      switchport access vlan 4\n      mtu 9216\n      flowcontrol receive off\n      flowcontrol transmit off\n      spanning-tree bpduguard enable\n      spanning-tree port type edge\n    interface vlan7\n        description CMN\n        no shutdown\n        ip vrf forwarding Customer\n        mtu 9216\n        ip address 10.102.4.100/25\n        ip access-group cmn-can in\n        ip access-group cmn-can out\n        ip ospf 2 area 0.0.0.0\n</code></pre> <p>To generate switch configuration with custom config injection.</p> <pre><code>canu generate switch config --csm 1.2 -a full --shcd FILENAME.xlsx --tabs INTER_SWITCH_LINKS,NON_COMPUTE_NODES,HARDWARE_MANAGEMENT,COMPUTE_NODES --corners J14,T44,J14,T48,J14,T24,J14,T23 --sls-file SLS_FILE --name sw-spine-001 --custom-config CUSTOM_CONFIG_FILE.yaml\n</code></pre>"},{"location":"examples_output/#generate-switch-config-while-preserving-lag-s","title":"Generate Switch Config while preserving LAG #s","text":"<p>This option allows you to generate swtich configs while preserving the lag #s of the previous running config.</p> <p>The use case for this is if you have a running system and you don\u2019t want to take an outage to renumber the LAGs.</p> <p>It requires a folder with the config/s backed up.</p> <p>The recommended way to back these configs up is with <code>canu backup</code></p> <pre><code>canu generate switch config -a v1 --csm 1.0 --ccj ccj.json --sls-file sls_input_file.json --name sw-spine-001 --preserve ../backup_configs/\n</code></pre>"},{"location":"examples_output/#generate-network-config","title":"Generate Network Config","text":"<p>To see all the lags that are generated, see lags</p> <p>CANU can also generate switch config for all the switches on a network.</p> <p>In order to generate network config, a valid SHCD or CCJ must be passed in and system variables must be read in from either CSI output or the SLS API. The instructions are exactly the same as the above except there will not be a hostname and a folder must be specified for config output using the <code>--folder FOLDERNAME</code> flag.</p> <p>To generate switch config from a CCJ paddle run: <code>canu generate network config --csm 1.2 --ccj paddle.json --sls-file SLS_FILE --folder FOLDERNAME</code></p> <p>To generate switch config from SHCD run: <code>canu generate network config --csm 1.2 -a full --shcd FILENAME.xlsx --tabs 'INTER_SWITCH_LINKS,NON_COMPUTE_NODES,HARDWARE_MANAGEMENT,COMPUTE_NODES' --corners 'J14,T44,J14,T48,J14,T24,J14,T23' --sls-file SLS_FILE --folder FOLDERNAME</code></p> <pre><code>canu generate network config --csm 1.2 -a full --shcd FILENAME.xlsx --tabs INTER_SWITCH_LINKS,NON_COMPUTE_NODES,HARDWARE_MANAGEMENT,COMPUTE_NODES --corners J14,T44,J14,T48,J14,T24,J14,T23 --sls-file SLS_FILE --folder switch_config\n</code></pre> <p>Potential output:</p> <pre><code>sw-spine-001 Config Generated\nsw-spine-002 Config Generated\nsw-leaf-001 Config Generated\nsw-leaf-002 Config Generated\nsw-leaf-003 Config Generated\nsw-leaf-004 Config Generated\nsw-cdu-001 Config Generated\nsw-cdu-002 Config Generated\nsw-leaf-bmc-001 Config Generated\n\n</code></pre>"},{"location":"examples_output/#generate-network-config-with-custom-config-injection","title":"Generate Network Config With Custom Config Injection","text":"<p>This option allows extension and maintenance of switch configurations beyond plan-of-record. A YAML file expresses custom configurations across the network and these configurations are merged with the plan-of-record configurations.</p> <p>WARNING: Extreme diligence should be used applying custom configurations which override plan-of-record generated configurations. Custom configurations will overwrite generated configurations! Override/overwrite is by design to support and document cases where site-interconnects demand \u201cnonstandard\u201d configurations or a bug must be worked around.</p> <p>To generate network configuration with custom config injection run</p> <pre><code>canu generate network config --csm 1.2 -a full --shcd FILENAME.xlsx --tabs INTER_SWITCH_LINKS,NON_COMPUTE_NODES,HARDWARE_MANAGEMENT,COMPUTE_NODES --corners J14,T44,J14,T48,J14,T24,J14,T23 --sls-file SLS_FILE --folder switch_config --custom-config CUSTOM_CONFIG_FILE.yaml\n</code></pre>"},{"location":"examples_output/#generate-network-config-while-preserving-lag-s","title":"Generate Network Config while preserving LAG #s","text":"<p>This option allows you to generate swtich configs while preserving the lag #s of the previous running config.</p> <p>The use case for this is if you have a running system and you don\u2019t want to take an outage to renumber the LAGs.</p> <p>It requires a folder with the config/s backed up.</p> <p>The recommended way to back these configs up is with <code>backup network</code></p> <pre><code>canu generate network config --csm 1.0 -a full --shcd FILENAME.xlsx --tabs INTER_SWITCH_LINKS,NON_COMPUTE_NODES,HARDWARE_MANAGEMENT,COMPUTE_NODES --corners J14,T44,J14,T48,J14,T24,J14,T23 --sls-file SLS_FILE --folder switch_config --preserve FOLDER_WITH_SWITCH_CONFIGS\n</code></pre>"},{"location":"examples_output/#validate-switch-config","title":"Validate Switch Config","text":"<p>After config has been generated, CANU can validate the generated config against running switch config. The running config can be from either an IP address, or a config file.</p> <ul> <li> <p>To get running config from an IP address, use the flags <code>--ip 192.168.1.1 --username USERNAME --password PASSWORD</code>.</p> </li> <li> <p>To get running config from a file, use the flag <code>--running RUNNING_CONFIG.cfg</code> instead.</p> </li> </ul> <p>After running the <code>validate switch config</code> command, you will be shown a line by line comparison of the currently running switch config against the config file that was passed in. You will also be given a list of remediation commands that can be typed into the switch to get the running config to match the config file. There will be a summary table at the end highlighting the most important differences between the configs.</p> <ul> <li> <p>Lines that are red and start with a <code>-</code> are in the running config, but not in the config file</p> </li> <li> <p>Lines that are green and start with a <code>+</code> are not in the running config, but are in the config file</p> </li> <li> <p>Lines that are blue and start with a <code>?</code> are attempting to point out specific line differences</p> </li> </ul> <p>To validate switch config run: <code>canu validate switch config --ip 192.168.1.1 --username USERNAME --password PASSWORD --generated SWITCH_CONFIG.cfg</code></p> <pre><code>canu validate switch config --ip 192.168.1.1 --generated sw-spine-001.cfg\n</code></pre> <p>Potential output:</p> <pre><code>hostname sw-spine-001\n- ntp server 192.168.1.10\n?                       ^\n+ ntp server 192.168.1.16\n?                       ^\n  vlan 1\n  vlan 2\n-     name RVR_NMN\n?          ----\n+     name NMN\n      apply access-list ip nmn-hmn in\n      apply access-list ip nmn-hmn out\n...\n\nSwitch: sw-leaf-001 (192.168.1.1)\nDifferences\n-------------------------------------------------------------------------\nIn Generated Not In Running (+)     |  In Running Not In Generated (-)\n-------------------------------------------------------------------------\nTotal Additions:                 7  |  Total Deletions:                 7\nHostname:                        1  |  Hostname:                        1\nInterface:                       2  |  Interface:                       1\nInterface Lag:                   1  |  Interface Lag:                   2\nSpanning Tree:                   2  |  Spanning Tree:                   3\nRouter:                          1  |\n</code></pre>"},{"location":"examples_output/#validate-network-config","title":"Validate Network Config","text":"<p>Aruba support only.</p> <p>The <code>validate network config</code> command works almost the same as the above <code>validate switch config</code> command. There are three options for passing in the running config:</p> <ul> <li> <p>A comma separated list of ips using <code>--ips 192.168.1.1,192.168.1.</code></p> </li> <li> <p>A file of ip addresses, one per line using the flag <code>--ips-file ips.txt</code></p> </li> <li> <p>A directory containing the running configuration <code>--running RUNNING/CONFIG/DIRECTORY</code></p> </li> </ul> <p>A directory of generated config files will also need to be passed in using <code>--generated GENERATED/CONFIG/DIRECTORY</code>. There will be a summary table for each switch highlighting the most important differences between the running switch config and the generated config files.</p> <p>To validate switch config run: <code>canu validate network config --ips-file ips.txt --username USERNAME --password PASSWORD --generated /CONFIG/FOLDER</code></p> <pre><code>canu validate network config --csm 1.2 --ips-file ips.txt --generated /CONFIG/FOLDER\n</code></pre> <p>Potential output:</p> <pre><code>Switch: sw-leaf-001 (192.168.1.1)\nDifferences\n-------------------------------------------------------------------------\nIn Generated Not In Running (+)     |  In Running Not In Generated (-)\n-------------------------------------------------------------------------\nTotal Additions:                 7  |  Total Deletions:                 7\nHostname:                        1  |  Hostname:                        1\nInterface:                       2  |  Interface:                       1\nInterface Lag:                   1  |  Interface Lag:                   2\nSpanning Tree:                   2  |  Spanning Tree:                   3\nRouter:                          1  |\n\nSwitch: sw-spine-001 (192.168.1.2)\nDifferences\n-------------------------------------------------------------------------\nIn Generated Not In Running (+)     |  In Running Not In Generated (-)\n-------------------------------------------------------------------------\nTotal Additions:                 3  |  Total Deletions:                 2\nInterface:                       2  |  Interface:                       1\nInterface Lag:                   1  |\n\n...\n\nErrors\n----------------------------------------------------------------------------------------------------\n192.168.1.3      - Timeout error connecting to switch 192.168.1.3, check the entered username, IP address and password.\n</code></pre>"},{"location":"examples_output/#file-output-and-json","title":"File Output and JSON","text":"<p>To output the results of the config validation command to a file, append the <code>--out FILENAME</code> flag. To get the results as JSON, use the <code>--json</code> flag.</p>"},{"location":"examples_output/#cache","title":"Cache","text":"<p>There are several commands to help with the canu cache:</p> <ul> <li> <p><code>canu cache location</code> will tell you the folder where your cache is located</p> </li> <li> <p><code>canu cache print</code> will print a colored version of your cache to the screen</p> </li> <li> <p><code>canu cache delete</code> will delete your cache file, the file will be created again on the next canu command</p> </li> </ul>"},{"location":"examples_output/#test-the-network","title":"Test The Network","text":"<p>CANU has the ability to run a set of tests against all of the switches in the management network. It is utilizing the nornir automation framework and additional nornir plugins to do this.</p> <p>More info can be found at</p> <ul> <li> <p>https://nornir.tech/2021/08/06/testing-your-network-with-nornir-testsprocessor/</p> </li> <li> <p>https://github.com/nornir-automation/nornir</p> </li> <li> <p>https://github.com/dmulyalin/salt-nornir</p> </li> </ul> <p>Required Input You can either use an SLS file or pull the SLS file from the API-Gateway using a token.</p> <ul> <li> <p><code>--sls-file</code></p> </li> <li> <p><code>--auth-token</code></p> </li> </ul> <p>Options</p> <ul> <li> <p><code>--log</code> outputs the nornir debug logs</p> </li> <li> <p><code>--network [HMN|CMN]</code> This gives the user the ability to connect to the switches over the CMN.  This allows the use of this tool from outside the Mgmt Network.  The default network used is the HMN.</p> </li> <li> <p><code>--json</code> outputs the results in json format.</p> </li> <li> <p><code>--password</code> prompts if password is not entered</p> </li> <li> <p><code>--username</code> defaults to admin</p> </li> </ul>"},{"location":"examples_output/#adding-tests","title":"Adding tests","text":"<p>Additional tests can be easily added by updating the .yaml file at <code>canu/test/\\*/test_suite.yaml</code> More information on tests and how to write them can be found at https://nornir.tech/2021/08/06/testing-your-network-with-nornir-testsprocessor/</p> <p>Example test</p> <pre><code>- name: Software version test\n  task: show version\n  test: contains\n  pattern: \"10.08.1021\"\n  err_msg: Software version is wrong\n  device:\n    - cdu\n    - leaf\n    - leaf-bmc\n    - spine\n</code></pre> <p>This test logs into the cdu, leaf, leaf-bmc, and spine switches and runs the command <code>show version</code> and checks that <code>10.09.0010</code> is in the output.  If it\u2019s not the test fails.</p>"},{"location":"examples_output/#backup-network","title":"Backup Network","text":"<p>Canu can backup the running configurations for switches in the management network. It backs up the entire switch inventory from SLS by defualt, if you want to backup just one switch use the <code>--name</code> flag.</p> <p>Required Input You can either use an SLS file or pull the SLS file from the API-Gateway using a token.</p> <ul> <li> <p><code>--sls-file</code></p> </li> <li> <p><code>--folder</code> \u201cFolder to store running config files\u201d</p> </li> </ul> <p>Options</p> <ul> <li> <p><code>--log</code> outputs the nornir debug logs</p> </li> <li> <p><code>--network [HMN|CMN]</code> This gives the user the ability to connect to the switches over the CMN.  This allows the use of this tool from outside the Mgmt Network.  The default network used is the HMN.</p> </li> <li> <p><code>--password</code> prompts if password is not entered</p> </li> <li> <p><code>--username</code> defaults to admin</p> </li> <li> <p><code>--unsanitized</code> Retains sensitive data such as passwords and SNMP credentials.  The default is to sanitize the config.</p> </li> <li> <p><code>--name</code> The name of the switch that you want to back up. e.g. \u2018sw-spine-001\u2019</p> </li> </ul> <p>Example</p> <pre><code>canu backup network --sls-file ./sls_input_file.json --network CMN --folder ./ --unsanitized\n</code></pre> <p>Potential output:</p> <pre><code>Running Configs Saved\n---------------------\nsw-spine-001.cfg\nsw-spine-002.cfg\nsw-leaf-001.cfg\nsw-leaf-002.cfg\nsw-leaf-003.cfg\nsw-leaf-004.cfg\nsw-leaf-bmc-001.cfg\nsw-leaf-bmc-002.cfg\nsw-cdu-001.cfg\nsw-cdu-002.cfg\n</code></pre>"},{"location":"examples_output/#send-command","title":"Send Command","text":"<p>Canu can send commands to the switches via the CLI. This is primarily used for <code>show</code> commands since we do not elevate to configuration mode.</p> <p>You can either use an SLS file or pull the SLS file from the API-Gateway using a token.</p> <ul> <li> <p><code>--sls-file</code></p> </li> <li> <p><code>--log</code> outputs the nornir debug logs</p> </li> <li> <p><code>--network [HMN|CMN]</code> This gives the user the ability to connect to the switches over the CMN.  This allows the use of this tool from outside the Mgmt Network.  The default network used is the HMN.</p> </li> <li> <p><code>--command</code> command to send to the switch/switches.</p> </li> <li> <p><code>--password</code> prompts if password is not entered</p> </li> <li> <p><code>--username</code> defaults to admin</p> </li> <li> <p><code>--name</code> The name of the switch that you want to back up. e.g. \u2018sw-spine-001\u2019</p> </li> </ul> <p>Examples</p> <pre><code>canu send command --sls-file ./sls_input_file.json --network cmn --command \"show banner exec\" --name sw-spine-001\n-netmiko_send_command************************************************************\n* sw-spine-001 ** changed : False **********************************************\nvvvv netmiko_send_command ** changed : False vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv INFO\n###############################################################################\n# CSM version:  1.2\n# CANU version: 1.3.2\n###############################################################################\n\n^^^^ END netmiko_send_command ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n</code></pre> <pre><code>canu send command --command 'show version | include \"Version      :\"'\n\\netmiko_send_command************************************************************\n* sw-leaf-bmc-001 ** changed : False *******************************************\nvvvv netmiko_send_command ** changed : False vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv INFO\nVersion      : FL.10.09.0010                                                 \n^^^^ END netmiko_send_command ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n* sw-spine-001 ** changed : False **********************************************\nvvvv netmiko_send_command ** changed : False vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv INFO\nVersion      : GL.10.09.0010                                                 \n^^^^ END netmiko_send_command ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n* sw-spine-002 ** changed : False **********************************************\nvvvv netmiko_send_command ** changed : False vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv INFO\nVersion      : GL.10.09.0010                                                 \n^^^^ END netmiko_send_command ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n</code></pre>"},{"location":"examples_output/#report-network-version","title":"Report Network Version","text":"<p>Canu reports the version of configuration on the switch.  It reads the exec baner of all the switches and outputs to the screen.</p> <p>Options</p> <ul> <li> <p><code>--sls-file</code></p> </li> <li> <p><code>--network [HMN|CMN]</code> This gives the user the ability to connect to the switches over the CMN.  This allows the use of this tool from outside the Mgmt Network.  The default network used is the HMN.</p> </li> <li> <p><code>--password</code> prompts if password is not entered</p> </li> <li> <p><code>--username</code> defaults to admin</p> </li> </ul> <p>Example</p> <pre><code>canu report network version --sls-file ../sls_input_file.json --network cmn\nPassword: \nSWITCH            CANU VERSION      CSM VERSION\nsw-spine-001      1.5.12            1.2  \nsw-spine-002      1.5.12            1.2  \nsw-leaf-bmc-001   1.5.12            1.2\n</code></pre> <pre><code>canu send command --command 'show version | include \"Version      :\"'\n\\netmiko_send_command************************************************************\n* sw-leaf-bmc-001 ** changed : False *******************************************\nvvvv netmiko_send_command ** changed : False vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv INFO\nVersion      : FL.10.09.0010\n^^^^ END netmiko_send_command ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n* sw-spine-001 ** changed : False **********************************************\nvvvv netmiko_send_command ** changed : False vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv INFO\nVersion      : GL.10.09.0010\n^^^^ END netmiko_send_command ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n* sw-spine-002 ** changed : False **********************************************\nvvvv netmiko_send_command ** changed : False vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv INFO\nVersion      : GL.10.09.0010\n^^^^ END netmiko_send_command ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n</code></pre>"},{"location":"generate/","title":"canu generate","text":"<p>Canu generate commands.</p> <pre><code>canu generate [OPTIONS] COMMAND [ARGS]...\n</code></pre>"},{"location":"generate/#network","title":"network","text":"<p>Canu generate network commands.</p> <pre><code>canu generate network [OPTIONS] COMMAND [ARGS]...\n</code></pre>"},{"location":"generate/#config","title":"config","text":"<p>Generate the config of all switches (Aruba, Dell, or Mellanox) on the network using the SHCD.</p> <p>In order to generate network switch config, a valid SHCD must be passed in and system variables must be read in from either an SLS output file or the SLS API.</p>"},{"location":"generate/#csi-input","title":"CSI Input","text":"<ul> <li> <p>In order to parse network data using SLS, pass in the file containing SLS JSON data (normally sls_file.json) using the \u2018\u2013sls-file\u2019 flag</p> </li> <li> <p>If used, CSI-generated sls_input_file.json file is generally stored in one of two places depending on how far the system is in the install process.</p> </li> <li> <p>Early in the install process, when running off of the LiveCD the sls_input_file.json file is normally found in the the directory \u2018/var/www/ephemeral/prep/SYSTEMNAME/\u2019</p> </li> <li> <p>Later in the install process, the sls_file.json file is generally in \u2018/mnt/pitdata/prep/SYSTEMNAME/\u2019</p> </li> </ul>"},{"location":"generate/#sls-api-input","title":"SLS API Input","text":"<ul> <li> <p>To parse the Shasta SLS API for IP addresses, ensure that you have a valid token.</p> </li> <li> <p>The token file can either be passed in with the \u2018\u2013auth-token TOKEN_FILE\u2019 flag, or it can be automatically read if the environmental variable \u2018SLS_TOKEN\u2019 is set.</p> </li> <li> <p>The SLS address is default set to \u2018api-gw-service-nmn.local\u2019.</p> </li> <li> <p>if you are operating on a system with a different address, you can set it with the \u2018\u2013sls-address SLS_ADDRESS\u2019 flag.</p> </li> </ul>"},{"location":"generate/#shcd-input","title":"SHCD Input","text":"<ul> <li> <p>Use the \u2018\u2013tabs\u2019 flag to select which tabs on the spreadsheet will be included.</p> </li> <li> <p>The \u2018\u2013corners\u2019 flag is used to input the upper left and lower right corners of the table on each tab of the worksheet. If the corners are not specified, you will be prompted to enter them for each tab.</p> </li> <li> <p>The table should contain the 11 headers: Source, Rack, Location, Slot, (Blank), Port, Destination, Rack, Location, (Blank), Port.</p> </li> </ul> <p>Use the \u2018\u2013folder FOLDERNAME\u2019 flag to output all the switch configs to a folder.</p>"},{"location":"generate/#noqa-d301-b950","title":"noqa: D301, B950","text":"<p>Args:</p> <pre><code>ctx: CANU context settings\ncsm: CSM version\narchitecture: CSM architecture\nccj: Paddle CCJ file\nshcd: SHCD file\ntabs: The tabs on the SHCD file to check, e.g. 10G_25G_40G_100G,NMN,HMN.\ncorners: The corners on each tab, comma separated e.g. \u2018J37,U227,J15,T47,J20,U167\u2019.\nsls_file: Directory containing the CSI json file\nauth_token: Token for SLS authentication\nsls_address: The address of SLS\nfolder: Folder to store config files\npreserve: Folder where switch running configs exist.  This folder should be populated from the \u201ccanu backup network\u201d command.\ncustom_config: yaml file containing customized switch configurations which is merged with the generated config.\nedge: Vendor of the edge router\nreorder: Filters generated configurations through hier_config generate a more natural running-configuration order.\nbgp_control_plane: Network used for BGP control plane\nvrf: Named VRF used for CSM networks\nbond_app_nodes: Generates bonded configuration for application nodes connected the NMN.\n\n\n```\nlog_\n```\n\n: Level of logging.\n</code></pre> <pre><code>canu generate network config [OPTIONS]\n</code></pre>"},{"location":"generate/#options","title":"Options","text":""},{"location":"generate/#-csm","title":"--csm( ) <p>Required CSM network version</p> <ul> <li> <p>Options</p> <p>1.0 | 1.2 | 1.3 | 1.4 | 1.5 | 1.6</p> </li> </ul>","text":""},{"location":"generate/#-a-architecture","title":"-a(, --architecture( ) <p>CSM architecture</p> <ul> <li> <p>Options</p> <p>Full | TDS | V1</p> </li> </ul>","text":""},{"location":"generate/#-ccj","title":"--ccj( ) <p>Paddle CCJ file</p>","text":""},{"location":"generate/#-shcd","title":"--shcd( ) <p>SHCD file</p>","text":""},{"location":"generate/#-tabs","title":"--tabs( ) <p>The tabs on the SHCD file to check, e.g. 10G_25G_40G_100G,NMN,HMN.</p>","text":""},{"location":"generate/#-corners","title":"--corners( ) <p>The corners on each tab, comma separated e.g. \u2018J37,U227,J15,T47,J20,U167\u2019.</p>","text":""},{"location":"generate/#-sls-file","title":"--sls-file( ) <p>File containing system SLS JSON data.</p>","text":""},{"location":"generate/#-auth-token","title":"--auth-token( ) <p>Token for SLS authentication</p>","text":""},{"location":"generate/#-sls-address","title":"--sls-address( ) <ul> <li> <p>Default</p> <p><code>api-gw-service-nmn.local</code></p> </li> </ul>","text":""},{"location":"generate/#-folder","title":"--folder( ) <p>Required Folder to store config files</p>","text":""},{"location":"generate/#-custom-config","title":"--custom-config( ) <p>Custom switch configuration</p>","text":""},{"location":"generate/#-edge","title":"--edge( ) <p>Required Vendor of Edge router</p> <ul> <li> <p>Options</p> <p>Aruba | Arista</p> </li> </ul>","text":""},{"location":"generate/#-preserve","title":"--preserve( ) <p>Path to current running configs.</p>","text":""},{"location":"generate/#-reorder","title":"--reorder() <p>reorder config to heir config order</p>","text":""},{"location":"generate/#-bgp-control-plane","title":"--bgp-control-plane( ) <p>Network used for BGP control plane</p> <ul> <li> <p>Options</p> <p>CMN | CHN</p> </li> </ul>","text":""},{"location":"generate/#-vrf","title":"--vrf( ) <p>Named VRF used for CSM networks</p>","text":""},{"location":"generate/#-bond-app-nodes","title":"--bond-app-nodes() <p>Bond application nodes on the NMN network</p>","text":""},{"location":"generate/#-log","title":"--log( ) <p>Level of logging.</p> <ul> <li> <p>Options</p> <p>DEBUG | INFO | WARNING | ERROR</p> </li> </ul>","text":""},{"location":"generate/#environment-variables","title":"Environment variables","text":""},{"location":"generate/#sls_token","title":"SLS_TOKEN()  <p>Provide a default for <code>--auth-token</code></p>","text":""},{"location":"generate/#switch","title":"switch","text":"<p>Canu generate switch commands.</p> <pre><code>canu generate switch [OPTIONS] COMMAND [ARGS]...\n</code></pre>"},{"location":"generate/#config_1","title":"config <p>Generate switch config using the SHCD.</p> <p>In order to generate switch config, a valid SHCD must be passed in and system variables must be read in from either an SLS output file or the SLS API.</p>","text":""},{"location":"generate/#csi-input_1","title":"CSI Input","text":"<ul> <li> <p>In order to parse network data using SLS, pass in the file containing SLS JSON data (normally sls_file.json) using the \u2018\u2013sls-file\u2019 flag</p> </li> <li> <p>If used, CSI-generated sls_input_file.json file is generally stored in one of two places depending on how far the system is in the install process.</p> </li> <li> <p>Early in the install process, when running off of the LiveCD the sls_input_file.json file is normally found in the the directory \u2018/var/www/ephemeral/prep/SYSTEMNAME/\u2019</p> </li> <li> <p>Later in the install process, the sls_file.json file is generally in \u2018/mnt/pitdata/prep/SYSTEMNAME/\u2019</p> </li> </ul>"},{"location":"generate/#sls-api-input_1","title":"SLS API Input","text":"<ul> <li> <p>To parse the Shasta SLS API for IP addresses, ensure that you have a valid token.</p> </li> <li> <p>The token file can either be passed in with the \u2018\u2013auth-token TOKEN_FILE\u2019 flag, or it can be automatically read if the environmental variable \u2018SLS_TOKEN\u2019 is set.</p> </li> <li> <p>The SLS address is default set to \u2018api-gw-service-nmn.local\u2019.</p> </li> <li> <p>if you are operating on a system with a different address, you can set it with the \u2018\u2013sls-address SLS_ADDRESS\u2019 flag.</p> </li> </ul>"},{"location":"generate/#shcd-input_1","title":"SHCD Input","text":"<ul> <li> <p>Use the \u2018\u2013tabs\u2019 flag to select which tabs on the spreadsheet will be included.</p> </li> <li> <p>The \u2018\u2013corners\u2019 flag is used to input the upper left and lower right corners of the table on each tab of the worksheet. If the corners are not specified, you will be prompted to enter them for each tab.</p> </li> <li> <p>The table should contain the 11 headers: Source, Rack, Location, Slot, (Blank), Port, Destination, Rack, Location, (Blank), Port.</p> </li> </ul> <p>Use the \u2018\u2013folder FOLDERNAME\u2019 flag to output all the switch configs to a folder.</p>"},{"location":"generate/#noqa-d301-b950_1","title":"noqa: D301, B950","text":"<p>Args:</p> <pre><code>ctx: CANU context settings\ncsm: CSM version\narchitecture: CSM architecture\nccj: Paddle CCJ file\nshcd: SHCD file\ntabs: The tabs on the SHCD file to check, e.g. 10G_25G_40G_100G,NMN,HMN.\ncorners: The corners on each tab, comma separated e.g. \u2018J37,U227,J15,T47,J20,U167\u2019.\nswitch_name: Switch name\nsls_file: JSON file containing SLS data\nauth_token: Token for SLS authentication\nsls_address: The address of SLS\nout: Name of the output file\npreserve: Folder where switch running configs exist.\ncustom_config: yaml file containing customized switch configurations which is merged with the generated config.\nedge: Vendor of the edge router\nreorder: Filters generated configurations through hier_config generate a more natural running-configuration order.\nbgp_control_plane: Network used for BGP control plane\nvrf: Named VRF used for CSM networks\nbond_app_nodes: Generates bonded configuration for application nodes connected the NMN.\n\n\n```\nlog_\n```\n\n: Level of Logging\n</code></pre> <pre><code>canu generate switch config [OPTIONS]\n</code></pre>"},{"location":"generate/#options_1","title":"Options","text":""},{"location":"generate/#-csm_1","title":"--csm( ) <p>Required CSM network version</p> <ul> <li> <p>Options</p> <p>1.0 | 1.2 | 1.3 | 1.4 | 1.5 | 1.6</p> </li> </ul>","text":""},{"location":"generate/#-a-architecture_1","title":"-a(, --architecture( ) <p>Required CSM architecture</p> <ul> <li> <p>Options</p> <p>Full | TDS | V1</p> </li> </ul>","text":""},{"location":"generate/#-ccj_1","title":"--ccj( ) <p>Paddle CCJ file</p>","text":""},{"location":"generate/#-shcd_1","title":"--shcd( ) <p>SHCD file</p>","text":""},{"location":"generate/#-tabs_1","title":"--tabs( ) <p>The tabs on the SHCD file to check, e.g. 10G_25G_40G_100G,NMN,HMN.</p>","text":""},{"location":"generate/#-corners_1","title":"--corners( ) <p>The corners on each tab, comma separated e.g. \u2018J37,U227,J15,T47,J20,U167\u2019.</p>","text":""},{"location":"generate/#-name","title":"--name( ) <p>Required The name of the switch to generate config e.g. \u2018sw-spine-001\u2019</p>","text":""},{"location":"generate/#-sls-file_1","title":"--sls-file( ) <p>File containing system SLS JSON data.</p>","text":""},{"location":"generate/#-auth-token_1","title":"--auth-token( ) <p>Token for SLS authentication</p>","text":""},{"location":"generate/#-sls-address_1","title":"--sls-address( ) <ul> <li> <p>Default</p> <p><code>api-gw-service-nmn.local</code></p> </li> </ul>","text":""},{"location":"generate/#-out","title":"--out( ) <p>Output results to a file</p>","text":""},{"location":"generate/#-custom-config_1","title":"--custom-config( ) <p>Create and maintain custom switch configurations beyond generated plan-of-record</p>","text":""},{"location":"generate/#-edge_1","title":"--edge( ) <p>Required Vendor of Edge router</p> <ul> <li> <p>Options</p> <p>Aruba | Arista</p> </li> </ul>","text":""},{"location":"generate/#-preserve_1","title":"--preserve( ) <p>Path to current running configs.</p>","text":""},{"location":"generate/#-reorder_1","title":"--reorder() <p>reorder config to heir config order</p>","text":""},{"location":"generate/#-bgp-control-plane_1","title":"--bgp-control-plane( ) <p>Network used for BGP control plane</p> <ul> <li> <p>Options</p> <p>CMN | CHN</p> </li> </ul>","text":""},{"location":"generate/#-vrf_1","title":"--vrf( ) <p>Named VRF used for CSM networks</p>","text":""},{"location":"generate/#-bond-app-nodes_1","title":"--bond-app-nodes() <p>Bond application nodes on the NMN network</p>","text":""},{"location":"generate/#-log_1","title":"--log( ) <p>Level of logging.</p> <ul> <li> <p>Options</p> <p>DEBUG | INFO | WARNING | ERROR</p> </li> </ul>","text":""},{"location":"generate/#environment-variables_1","title":"Environment variables","text":""},{"location":"generate/#sls_token_1","title":"SLS_TOKEN()  <p>Provide a default for <code>--auth-token</code></p>","text":""},{"location":"init/","title":"Initialization","text":"<p>To help make switch setup a breeze. CANU can automatically parse SLS JSON data - including CSI sls_input_file.json output or the Shasta SLS API for switch IPv4 addresses.</p>"},{"location":"init/#canu-init","title":"canu init","text":"<p>Initialize CANU by extracting all the switch IPs from CSI generated json, or by getting IPs from SLS.</p> <p>To access the SLS API, a token must be passed in using the \u2018\u2013auth-token\u2019 flag. - Tokens are typically stored in \u2018~./config/cray/tokens/\u2019 - Instead of passing in a token file, the environmental variable SLS_TOKEN can be used.</p> <p>To initialize using JSON instead of the SLS API, pass in the file containing SLS JSON data (normally sls_input_file.json) using the \u2018\u2013sls-file\u2019 flag</p> <p>If used, CSI-generated sls_input_file.json file is generally stored in one of two places depending on how far the system is in the install process. - Early in the install process, when running off of the LiveCD the CSI sls_input_file.json file is normally found in the the directory \u2018/var/www/ephemeral/prep/SYSTEMNAME/\u2019 - Later in the install process, the CSI sls_input_file.json file is generally in \u2018/mnt/pitdata/prep/SYSTEMNAME/\u2019</p> <p>The output file for the canu init command is set with the \u2013out FILENAME flag.</p>"},{"location":"init/#noqa-d301-b950","title":"noqa: D301, B950","text":"<p>Args:</p> <pre><code>ctx: CANU context settings\nsls_file: File containing the CSI json data\nauth_token: Token for SLS authentication\nsls_address: The address of SLS\nnetwork: Switch network e.g. (CAN, MTL, NMN).\nout: Name of the output file\n</code></pre> <pre><code>canu init [OPTIONS]\n</code></pre>"},{"location":"init/#options","title":"Options","text":""},{"location":"init/#-sls-file","title":"--sls-file( ) <p>File containing system SLS JSON data.</p>","text":""},{"location":"init/#-auth-token","title":"--auth-token( ) <p>Token for SLS authentication</p>","text":""},{"location":"init/#-sls-address","title":"--sls-address( ) <ul> <li> <p>Default</p> <p><code>api-gw-service-nmn.local</code></p> </li> </ul>","text":""},{"location":"init/#-network","title":"--network( ) <p>Switch network e.g. (CAN, MTL, NMN)</p> <ul> <li> <p>Default</p> <p><code>NMN</code></p> </li> </ul>","text":""},{"location":"init/#-out","title":"--out( ) <p>Required Output file with CSI IP addresses</p>","text":""},{"location":"init/#environment-variables","title":"Environment variables","text":""},{"location":"init/#sls_token","title":"SLS_TOKEN()  <p>Provide a default for <code>--auth-token</code></p>","text":""},{"location":"init/#examples","title":"Examples","text":""},{"location":"init/#1-csi","title":"1. CSI <p>To get the switch IP addresses from CSI output, run the command:</p> <pre><code>$ canu init --sls-file SLS_FILE --out output.txt\n8 IP addresses saved to output.txt\n</code></pre> <p></p>","text":""},{"location":"init/#2-sls-shasta-api","title":"2. SLS Shasta API <p>To get the switch IP addresses from the Shasta SLS API, run the command:</p> <pre><code>$ canu init --auth-token ~./config/cray/tokens/ --sls-address 1.2.3.4 --out output.txt\n8 IP addresses saved to output.txt\n</code></pre>","text":""},{"location":"init/#csi-input","title":"CSI Input","text":"<ul> <li>In order to parse CSI output, use the <code>--sls-file FILE</code> flag to pass in the folder where an SLS JSON file is located.</li> </ul> <p>The CSI <code>sls_input_file.json</code> file is generally stored in one of two places depending on how far the system is in the install process.</p> <ul> <li> <p>Early in the install process, when running off of the LiveCD the CSI <code>sls_input_file.json</code> file is normally found in the the directory <code>/var/www/ephemeral/prep/SYSTEMNAME/</code></p> </li> <li> <p>Later in the install process, the CSI <code>sls_input_file.json</code> file is generally in <code>/mnt/pitdata/prep/SYSTEMNAME/</code></p> </li> <li> <p>The SLS file can also be obtained from an NCN that\u2019s in the k8s cluster by running <code>cray sls dumpstate list  --format json</code></p> </li> <li> <p>The switch IPs will be read from the \u2018NMN\u2019 network, if a different network is desired, use the <code>--network</code> flag to choose a different one e.g. (CAN, MTL, NMN).</p> </li> </ul> <p>To get the switch IP addresses from CSI output, run the command:</p> <pre><code>canu init --sls-file SLS_FILE --out output.txt\n</code></pre> <p>Potential output:</p> <pre><code>8 IP addresses saved to output.txt\n</code></pre>"},{"location":"init/#sls-api-input","title":"SLS API Input","text":"<ul> <li>To parse the Shasta SLS API for IP addresses, ensure that you have a valid token. The token file can either be passed in with the <code>--auth-token TOKEN_FILE</code> flag, or it can be automatically read if the environmental variable <code>SLS_TOKEN</code> is set. The SLS address is default set to <code>api-gw-service-nmn.local</code>, if you are operating on a system with a different address, you can set it with the <code>--sls-address SLS_ADDRESS</code> flag.</li> </ul> <p>To get the switch IP addresses from the Shasta SLS API, run the command:</p> <pre><code>canu init --auth-token ~./config/cray/tokens/ --sls-address 1.2.3.4 --out output.txt\n</code></pre> <p>Potential output:</p> <pre><code>8 IP addresses saved to output.txt\n</code></pre> <p></p> <p>The output file for the <code>canu init</code> command is set with the <code>--out FILENAME</code> flag.</p>"},{"location":"lags/","title":"Lags","text":""},{"location":"lags/#ncn-m","title":"ncn-m","text":"<ul> <li> <p>Lag number is the port of the primary switch connection to ncn-m:port 1.</p> </li> <li> <p>ncn-m:port 2, no lag</p> </li> </ul> <p>| Switch</p> <p>| ncn-m</p> <p>| Lag</p> <p>| | ------ | ----- | --- | | sw-leaf-001:1</p> <p>| ncn-m001:ocp:1</p> <p>| lag 1</p> <p>| | sw-leaf-001:2</p> <p>| ncn-m002:ocp:1</p> <p>| lag 2</p> <p>| | sw-leaf-002:1</p> <p>| ncn-m001:pcie-slot1:1</p> <p>| lag 1</p> <p>| | sw-leaf-002:2</p> <p>| ncn-m002:pcie-slot1:1</p> <p>| lag 2</p> <p>| | sw-leaf-003:1</p> <p>| ncn-m003:ocp:1</p> <pre><code>    | lag 1\n</code></pre> <p>| | sw-leaf-004:1</p> <p>| ncn-m003:pcie-slot1:1</p> <p>| lag 1</p> <p>|</p>"},{"location":"lags/#ncn-s","title":"ncn-s","text":"<ul> <li> <p>Lag number is the port of the primary switch connection</p> </li> <li> <p>The connections to ocp:port1 and pcie:port1 slots on a ncn-s must be on the same lag across the primary and secondary switch</p> </li> <li> <p>The connections to ocp:port2 and pcie:port2 slots on a ncn-s must be on the same lag across the primary and secondary switch</p> </li> </ul> <p>| Switch</p> <pre><code>    | ncn-m\n\n             | Lag\n</code></pre> <p>| | ------------- | --------------------- | ----- | | sw-leaf-001:6</p> <p>| ncn-s001:ocp:1</p> <pre><code>    | lag 6\n</code></pre> <p>| | sw-leaf-001:7</p> <p>| ncn-s002:ocp:1</p> <pre><code>    | lag 7\n</code></pre> <p>| | sw-leaf-002:6</p> <p>| ncn-s001:pcie-slot1:1</p> <p>| lag 6</p> <p>| | sw-leaf-002:7</p> <p>| ncn-s002:pcie-slot1:1</p> <p>| lag 7</p> <p>| | sw-leaf-003:5</p> <p>| ncn-s001:ocp:2</p> <pre><code>    | lag 5\n</code></pre> <p>| | sw-leaf-003:6</p> <p>| ncn-s002:ocp:2</p> <pre><code>    | lag 6\n</code></pre> <p>| | sw-leaf-003:7</p> <p>| ncn-s003:ocp:1</p> <pre><code>    | lag 7\n</code></pre> <p>| | sw-leaf-003:8</p> <p>| ncn-s003:ocp:2</p> <pre><code>    | lag 8\n</code></pre> <p>| | sw-leaf-004:5</p> <p>| ncn-s001:pcie-slot1:2</p> <p>| lag 5</p> <p>| | sw-leaf-004:6</p> <p>| ncn-s002:pcie-slot1:2</p> <p>| lag 6</p> <p>| | sw-leaf-004:7</p> <p>| ncn-s003:pcie-slot1:1</p> <p>| lag 7</p> <p>| | sw-leaf-004:8</p> <p>| ncn-s003:pcie-slot1:2</p> <p>| lag 8</p> <p>|</p>"},{"location":"lags/#ncn-w","title":"ncn-w","text":"<ul> <li>Lag number is the port of the primary switch connection to ncn-w</li> </ul> <p>| Switch</p> <pre><code>    | ncn-m\n\n             | Lag\n</code></pre> <p>| | ------------- | --------------------- | ----- | | sw-leaf-001:3</p> <p>| ncn-w001:ocp:1</p> <pre><code>    | lag 3\n</code></pre> <p>| | sw-leaf-001:4</p> <p>| ncn-w002:ocp:1</p> <pre><code>    | lag 4\n</code></pre> <p>| | sw-leaf-002:3</p> <p>| ncn-w001:ocp:2</p> <pre><code>    | lag 3\n</code></pre> <p>| | sw-leaf-002:4</p> <p>| ncn-w002:ocp:2</p> <pre><code>    | lag 4\n</code></pre> <p>| | sw-leaf-003:2</p> <p>| ncn-w004:ocp:1</p> <pre><code>    | lag 2\n</code></pre> <p>| | sw-leaf-004:2</p> <p>| ncn-w004:ocp:2</p> <pre><code>    | lag 2\n</code></pre> <p>|</p>"},{"location":"lags/#cec","title":"cec","text":"<ul> <li>no lags</li> </ul>"},{"location":"lags/#cmm","title":"cmm","text":"<ul> <li>Lag number is the port of the primary switch connection to cmm</li> </ul> <p>| Switch</p> <pre><code>    | ncn-m\n\n             | Lag\n</code></pre> <p>| | ------------- | --------------------- | ----- | | sw-cdu-001:1</p> <p>| cmm000:0</p> <pre><code>          | lag 1\n</code></pre> <p>| | sw-cdu-001:2</p> <p>| cmm001:0</p> <pre><code>          | lag 2\n</code></pre> <p>| | sw-cdu-002:1</p> <p>| cmm000:1</p> <pre><code>          | lag 1\n</code></pre> <p>| | sw-cdu-002:2</p> <p>| cmm001:1</p> <pre><code>          | lag 2\n</code></pre> <p>|</p>"},{"location":"lags/#uan","title":"uan","text":"<ul> <li> <p>Lag number is the port of the primary switch connection on uan:port 2</p> </li> <li> <p>The uan:port 1 connection has no lag</p> </li> </ul> <p>| Switch</p> <pre><code>    | ncn-m\n\n             | Lag\n</code></pre> <p>| | ------------- | --------------------- | ----- | | sw-leaf-001:8</p> <p>| uan001:ocp:1</p> <pre><code>      | None\n</code></pre> <p>| | sw-leaf-001:9</p> <p>| uan002:ocp:1</p> <pre><code>      | None\n</code></pre> <p>| | sw-leaf-001:14</p> <p>| uan001:ocp:2</p> <pre><code>      | lag 8\n</code></pre> <p>| | sw-leaf-001:15</p> <p>| uan002:ocp:2</p> <pre><code>      | lag 9\n</code></pre> <p>| | sw-leaf-002:8</p> <p>| uan001:pcie-slot1:1</p> <p>| None</p> <p>| | sw-leaf-002:9</p> <p>| uan002:pcie-slot1:1</p> <p>| None</p> <p>| | sw-leaf-002:14</p> <p>| uan001:pcie-slot1:2</p> <p>| lag 8</p> <p>| | sw-leaf-002:15</p> <p>| uan002:pcie-slot1:2</p> <p>| lag 9</p> <p>|</p>"},{"location":"lags/#sw-spine-sw-leaf","title":"sw-spine ==&gt; sw-leaf","text":"<ul> <li>Lag number is the digits of the primary leaf switch + 100</li> </ul> <p>| Switch</p> <pre><code>     | ncn-m\n\n             | Lag\n</code></pre> <p>| | -------------- | --------------------- | ----- | | sw-spine-001:1</p> <p>| sw-leaf-001:53</p> <pre><code>    | lag 101\n</code></pre> <p>| | sw-spine-001:2</p> <p>| sw-leaf-002:53</p> <pre><code>    | lag 101\n</code></pre> <p>| | sw-spine-002:1</p> <p>| sw-leaf-001:54</p> <pre><code>    | lag 101\n</code></pre> <p>| | sw-spine-002:2</p> <p>| sw-leaf-002:54</p> <pre><code>    | lag 101\n</code></pre> <p>|</p>"},{"location":"lags/#sw-spine-sw-leaf-bmc-tds","title":"sw-spine ==&gt; sw-leaf-bmc (TDS)","text":"<ul> <li>Lag number is the digits of the leaf-bmc switch + 150</li> </ul> <p>| Switch</p> <pre><code>     | ncn-m\n\n             | Lag\n\n |\n</code></pre> <p>| -------------- | --------------------- | ------- | | sw-spine-001:48</p> <p>| sw-leaf-bmc-001:49</p> <pre><code>| lag 151\n</code></pre> <p>| | sw-spine-002:48</p> <p>| sw-leaf-bmc-001:50</p> <pre><code>| lag 151\n</code></pre> <p>|</p>"},{"location":"lags/#sw-spine-sw-cdu","title":"sw-spine ==&gt; sw-cdu","text":"<ul> <li>Lag number is the digits of the primary cdu switch + 200</li> </ul> <p>| Switch</p> <pre><code>      | ncn-m\n\n             | Lag\n\n |\n</code></pre> <p>| --------------- | --------------------- | ------- | | sw-spine-001:5</p> <p>| sw-cdu-001:49</p> <pre><code>     | lag 201\n</code></pre> <p>| | sw-spine-001:6</p> <p>| sw-cdu-002:49</p> <pre><code>     | lag 201\n</code></pre> <p>| | sw-spine-002:5</p> <p>| sw-cdu-001:50</p> <pre><code>     | lag 201\n</code></pre> <p>| | sw-spine-002:6</p> <p>| sw-cdu-002:50</p> <pre><code>     | lag 201\n</code></pre> <p>|</p>"},{"location":"lags/#sw-spine-sw-spine","title":"sw-spine ==&gt; sw-spine","text":"<ul> <li>Always lag 256</li> </ul>"},{"location":"lags/#sw-leaf-sw-spine","title":"sw-leaf ==&gt; sw-spine","text":"<ul> <li>Lag number is the digits of the primary spine switch + 100</li> </ul> <p>| Switch</p> <pre><code>      | ncn-m\n\n             | Lag\n\n |\n</code></pre> <p>| --------------- | --------------------- | ------- | | sw-leaf-001:53</p> <p>| sw-spine-001:1</p> <pre><code>    | lag 101\n</code></pre> <p>| | sw-leaf-001:54</p> <p>| sw-spine-002:1</p> <pre><code>    | lag 101\n</code></pre> <p>| | sw-leaf-002:53</p> <p>| sw-spine-001:2</p> <pre><code>    | lag 101\n</code></pre> <p>| | sw-leaf-002:54</p> <p>| sw-spine-002:2</p> <pre><code>    | lag 101\n</code></pre> <p>|</p>"},{"location":"lags/#sw-leaf-sw-leaf","title":"sw-leaf ==&gt; sw-leaf","text":"<ul> <li>Always lag 256</li> </ul>"},{"location":"lags/#sw-leaf-sw-leaf-bmc","title":"sw-leaf ==&gt; sw-leaf-bmc","text":"<ul> <li>Lag number is the digits of the leaf-bmc switch + 150</li> </ul> <p>| Switch</p> <pre><code>      | ncn-m\n\n             | Lag\n\n |\n</code></pre> <p>| --------------- | --------------------- | ------- | | sw-leaf-001:48</p> <p>| sw-leaf-bmc-001:51</p> <pre><code>| lag 151\n</code></pre> <p>| | sw-leaf-002:48</p> <p>| sw-leaf-bmc-001:52</p> <pre><code>| lag 151\n</code></pre> <p>|</p>"},{"location":"lags/#sw-cdu-sw-spine","title":"sw-cdu ==&gt; sw-spine","text":"<ul> <li>Always lag 255</li> </ul> <p>| Switch</p> <pre><code>      | ncn-m\n\n             | Lag\n\n |\n</code></pre> <p>| --------------- | --------------------- | ------- | | sw-cdu-001:49</p> <p>| sw-spine-001:5</p> <pre><code>    | lag 255\n</code></pre> <p>| | sw-cdu-001:50</p> <p>| sw-spine-002:5</p> <pre><code>    | lag 255\n</code></pre> <p>| | sw-cdu-002:49</p> <p>| sw-spine-001:6</p> <pre><code>    | lag 255\n</code></pre> <p>| | sw-cdu-002:50</p> <p>| sw-spine-002:6</p> <pre><code>    | lag 255\n</code></pre> <p>|</p>"},{"location":"lags/#sw-cdu-sw-cdu","title":"sw-cdu ==&gt; sw-cdu","text":"<ul> <li>Always lag 256</li> </ul>"},{"location":"lags/#sw-leaf-bmc-sw-spine-tds","title":"sw-leaf-bmc ==&gt; sw-spine (TDS)","text":"<ul> <li>Always lag 255</li> </ul> <p>| Switch</p> <pre><code>      | ncn-m\n\n             | Lag\n\n |\n</code></pre> <p>| --------------- | --------------------- | ------- | | sw-leaf-bmc-001:49</p> <p>| sw-spine-001:48</p> <pre><code>   | lag 255\n</code></pre> <p>| | sw-leaf-bmc-001:50</p> <p>| sw-spine-002:48</p> <pre><code>   | lag 255\n</code></pre> <p>|</p>"},{"location":"lags/#sw-leaf-bmc-sw-leaf","title":"sw-leaf-bmc ==&gt; sw-leaf","text":"<ul> <li>Always lag 255</li> </ul> <p>| Switch</p> <pre><code>         | ncn-m\n\n             | Lag\n\n |\n</code></pre> <p>| ------------------ | --------------------- | ------- | | sw-leaf-bmc-001:51</p> <p>| sw-leaf-001:48</p> <pre><code>    | lag 255\n</code></pre> <p>| | sw-leaf-bmc-001:52</p> <p>| sw-leaf-002:48</p> <pre><code>    | lag 255\n</code></pre> <p>|</p>"},{"location":"nox_testing/","title":"Nox testing","text":"<p>To run full test suite:</p> <pre><code>nox\n</code></pre> <p>To run only sub section of tests:</p> <pre><code>nox -rs tests \n</code></pre> <p>To run only specific test from subsesction:</p> <pre><code>nox -rs tests -- tests/test_generate_switch_config_aruba_csm_1_0.py\n</code></pre> <p>-r re-uses a previous testing virtual environment to save time.  should not be used for testing when you are adding or changing libraries. -s specifies an overall session as defined in nox.py.  for canu currently these can be tests, lint, docs</p> <p>To run the full set of tests, linting, coverage map, and docs building run:</p> <pre><code>python3 -m pip install .[ci]\n</code></pre> <pre><code>nox\n</code></pre> <p>To just run tests:</p> <pre><code>nox -s tests\n</code></pre> <p>To just run linting:</p> <pre><code>nox -s lint\n</code></pre> <p>To run a specific test file:</p> <pre><code>nox -s tests -- tests/test_report_switch_firmware.py\n</code></pre> <p>To reuse a session without reinstalling dependencies use the <code>-rs</code> flag instead of <code>-s</code>.</p>"},{"location":"paddle/","title":"Paddle / CCJ File","text":"<p>The paddle or CCJ (CSM Cabling JSON) is a JSON representation of the network. There are many benefits of using the CCJ:</p> <ul> <li> <p>The CCJ schema has been validated using <code>paddle-schema.json</code></p> </li> <li> <p>The paddle has been architecturally validated to ensure all connections between devices are approved</p> </li> <li> <p>All port connections between devices have been checked using the CANU model to ensure speed, slot choice, and port availability has been confirmed</p> </li> <li> <p>The CCJ is machine-readable and therefore easy to build additional tooling around</p> </li> <li> <p>Less flags need to be used when reading the CCJ vs the SHCD</p> </li> </ul> <p>The SHCD can easily be converted into CCJ by using</p> <pre><code>canu validate shcd --shcd SHCD.xlsx --json --out paddle.json\n</code></pre>"},{"location":"quickstart/","title":"Quickstart Guide","text":"<p>After installing the container or the RPM, or in a virtualenv, there are several ways to invoke CANU, including:</p> <ul> <li> <p><code>docker run</code> (or other runtime)</p> </li> <li> <p><code>docker exec</code> (or other runtime)</p> </li> <li> <p><code>canuctl</code></p> </li> <li> <p><code>canu</code> (direct execution of the binary, which will be deprecated in upcoming versions)</p> </li> <li> <p><code>canu</code> (running the Python code)</p> </li> </ul> <p>For consistency and simplification, the invocations of CANU throughout the documentation will simply be show as</p> <pre><code>canu &lt;command&gt; --flags\n</code></pre> <p>even though you may be invoking CANU via a different method.</p>"},{"location":"quickstart/#checkout-a-fresh-system","title":"Checkout A Fresh System","text":"<p>This procedure requires <code>csi</code></p> <ol> <li>Make a new directory to save switch IP addresses</li> </ol> <pre><code>mkdir ips_folder\ncd ips_folder\n</code></pre> <ol> <li>Parse CSI files and save switch IP addresses</li> </ol> <pre><code>canu init --sls-file sls_input_file.json --out ips.txt`\n</code></pre> <ol> <li>Check network firmware</li> </ol> <pre><code>canu report network firmware --csm 1.2 --ips-file ips.txt\n</code></pre> <ol> <li>Check network cabling</li> </ol> <pre><code>canu report network cabling --ips-file ips.txt\n</code></pre> <ol> <li>Validate BGP status</li> </ol> <pre><code>canu validate network bgp --ips-file ips.txt --verbose\n</code></pre> <ol> <li>Validate cabling</li> </ol> <pre><code>canu validate network cabling --ips-file ips.txt\n</code></pre> <p>If you have the system\u2019s SHCD, there are even more commands that can be run</p> <ol> <li>Validate the SHCD</li> </ol> <pre><code>canu validate shcd --shcd SHCD.xlsx\n</code></pre> <ol> <li>Validate the SHCD against network cabling</li> </ol> <pre><code>canu validate shcd-cabling --shcd SHCD.xlsx --ips-file ips.txt\n</code></pre> <ol> <li>Generate switch config for the network</li> </ol> <pre><code>canu generate network config --shcd SHCD.xlsx --sls-file sls_input_file.json --folder configs\n</code></pre> <ol> <li>Convert the SHCD to CCJ</li> </ol> <pre><code>canu validate shcd --shcd SHCD.xlsx --json --out paddle.json\n</code></pre> <p>If you have the system\u2019s CCJ</p> <ol> <li>Validate the Paddle / CCJ</li> </ol> <pre><code>canu validate paddle --ccj paddle.json\n</code></pre> <ol> <li>Validate the CCJ against network cabling</li> </ol> <pre><code>canu validate paddle-cabling --ccj paddle.json --ips-file ips.txt\n</code></pre> <ol> <li>Generate switch config for the network</li> </ol> <pre><code>canu generate network config --ccj paddle.json --sls-file sls_input_file.json --folder configs\n</code></pre>"},{"location":"releasing/","title":"CANU Release Process","text":"<ol> <li> <p>Once the PR is merged, checkout and update main locally and take a new git-tag (<code>x.y.z</code>, no leading <code>v</code>)</p> <ul> <li>Prepare your local environment</li> </ul> </li> </ol> <p>If your working directory is not clean, please commit or stash your changes in order to checkout the <code>main</code> branch.</p> <pre><code>git checkout main\ngit pull\ngit fetch origin --tags\ngit log --no-walk --tags --pretty=\"%h %d %s\" --decorate=full\n</code></pre> <pre><code>* Take a final release tag or a pre-release tag, release tags are considered ***stable*** and pre-release tags are previews that are considered ***unstable***.\n</code></pre> <p>Pre-release tags are entirely optional.</p> <pre><code>    * Final release tags follow the [PEP0400 Finale release format](https://peps.python.org/pep-0440/#final-releases) of `X.Y.Z`:\n</code></pre> <p>NOTE Historically this repository does NOT prepend <code>v</code> to the git-tag.</p> <pre><code>git tag X.Y.Z\ngit push orgin --tags\n</code></pre> <pre><code>    * Pre-release tags follow [PEP0440 pre-release format](https://peps.python.org/pep-0440/#pre-releases) format of `X.Y.Z{[a|b|rc]N}` (e.g. 1.8.0a1, 1.8.0b3, 1.8.0rc1).\n</code></pre> <p>NOTE These are entirely OPTIONAL. Examples:</p> <p><code>bash git tag 1.8.0a  - alpha 0 of 1.8.0 git tag 1.8.0b  - beta 0 of 1.8.0 git tag 1.8.0rc - preview/release-candidate 0 of 1.8.0 git tag 1.8.0a1 - alpha 1 of 1.8.0</code></p> <pre><code>git tag X.Y.Z{[a|b|rc]N}\ngit push orgin --tags\n</code></pre> <ol> <li> <p>Navigate to GitHub releases: <code>https://github.com/Cray-HPE/canu/releases</code></p> </li> <li> <p>Select \u201cDraft a new release\u201d</p> </li> <li> <p>\u201cChoose a tag\u201d and choose the tag you pushed.</p> </li> <li> <p>Select \u201cautogenerate release notes\u201d to pre-populate the fields.</p> </li> <li> <p>Write a short, quippy title for the release (replacing the autogenerated one, maybe).</p> </li> <li> <p>In the main text write \u201cOverview\u201d, a few short bullet points pulled from the changelog outlining major changes.</p> </li> <li> <p>In the main text write \u201cDetailed Changelog\u201d and paste in the changelog from readme.md.</p> </li> <li> <p>IMPORTANT If this is a pre-release, then check the \u201cSet as a pre-release\u201d box!</p> <ul> <li>Optionally uncheck the \u201cSet as the latest release\u201d if this release isn\u2019t to be advertised.</li> </ul> </li> <li> <p>Click \u201cPublish release\u201d</p> </li> <li> <p>Make sure the <code>canu</code> binary RPM exists in artifactory.</p> </li> <li> <p>Once new <code>canu</code> RPM is created. Navigate to: <code>https://github.com/Cray-HPE/canu/releases</code> edit release and upload the new RPM can also be downloaded from GitHub.</p> </li> </ol> <p><code>canu</code> exists in the pre-install-toolkit, and needs a manifest updated here:</p> <ul> <li>Metal Provision</li> </ul> <p><code>canu</code> also exists in the CSM tarball, and needs a manfiest update for both its RPM and Docker images here:</p> <ul> <li> <p>RPM</p> </li> <li> <p>Docker Image</p> </li> </ul>"},{"location":"report/","title":"canu report","text":"<p>Canu report commands.</p> <pre><code>canu report [OPTIONS] COMMAND [ARGS]...\n</code></pre>"},{"location":"report/#network","title":"network","text":"<p>Commands that report on the entire network.</p> <pre><code>canu report network [OPTIONS] COMMAND [ARGS]...\n</code></pre>"},{"location":"report/#cabling","title":"cabling","text":"<p>Report the cabling of all switches (Aruba, Dell, or Mellanox) on the network by using LLDP.</p> <p>Pass in either a comma separated list of IP addresses using the \u2013ips option</p> <p>OR</p> <p>Pass in a file of IP addresses with one address per line.</p> <p>There are three different connection types that will be shown in the results.</p> <ol> <li> <p>\u2018===&gt;\u2019 Outbound connections</p> </li> <li> <p>\u2018&lt;===\u2019 Inbound connections</p> </li> <li> <p>\u2018&lt;==&gt;\u2019 Bi-directional connections</p> </li> </ol> <p>There are two different \u2018\u2013view\u2019 options, \u2018switch\u2019 and \u2018equipment\u2019.</p> <ol> <li> <p>The \u2018\u2013view switch\u2019 option displays a table for every switch IP address passed in showing connections.</p> </li> <li> <p>The \u2018\u2013view equipment\u2019 option displays a table for each mac address connection. This means that servers and switches will both display incoming and outgoing connections.</p> </li> </ol> <p>If the neighbor name is not in LLDP, the IP and vlan information are displayed by looking up the MAC address in the ARP table and mac address table.</p> <p>If there is a duplicate port, the duplicates will be highlighted in \u2018bright white\u2019.</p> <p>Ports highlighted in \u2018blue\u2019 contain the string \u201cncn\u201d in the hostname.</p> <p>Ports are highlighted in \u2018green\u2019 when the port name is set with the interface name.</p>"},{"location":"report/#noqa-d301","title":"noqa: D301","text":"<p>Args:</p> <pre><code>ctx: CANU context settings\nips: Comma separated list of IPv4 addresses of switches\nips_file: File with one IPv4 address per line\nusername: Switch username\npassword: Switch password\nview: View of the cabling results.\nkea_lease_file: Name of the JSON file containing Kea leases\nsls_file: Name of the JSON file containing SLS system data\nsmd_file: Name of the JSON file containing SMD ethernetInterfaces\nheuristic_lookups: Turn off annotations to LLDP data based on common device use\n\n\n```\nlog_\n```\n\n: Level of logging.\nout: Name of the output file\n</code></pre> <pre><code>canu report network cabling [OPTIONS]\n</code></pre>"},{"location":"report/#options","title":"Options","text":""},{"location":"report/#-ips","title":"--ips( ) <p>Comma separated list of IPv4 addresses of switches</p>","text":""},{"location":"report/#-ips-file","title":"--ips-file( ) <p>File with one IPv4 address per line</p>","text":""},{"location":"report/#-username","title":"--username( ) <p>Switch username</p> <ul> <li> <p>Default</p> <p><code>admin</code></p> </li> </ul>","text":""},{"location":"report/#-password","title":"--password( ) <p>Switch password</p>","text":""},{"location":"report/#-view","title":"--view( ) <p>View of the cabling results.</p> <ul> <li> <p>Default</p> <p><code>switch</code></p> </li> <li> <p>Options</p> <p>switch | equipment</p> </li> </ul>","text":""},{"location":"report/#-kea-lease-file","title":"--kea-lease-file( ) <p>Kea leases in JSON format from API call used for MAC-to-hostname lookups.</p>","text":""},{"location":"report/#-sls-file","title":"--sls-file( ) <p>SLS file in JSON format from API call used for MAC-to-hostname lookups.</p>","text":""},{"location":"report/#-smd-file","title":"--smd-file( ) <p>SMD ethernetInterfaces in JSON format from API call used for MAC-to-hostname lookups.</p>","text":""},{"location":"report/#-heuristic-lookups","title":"--heuristic-lookups() <p>Make educated guesses and hints about what device is based on MAC.</p>","text":""},{"location":"report/#-log","title":"--log( ) <p>Level of logging.</p> <ul> <li> <p>Options</p> <p>DEBUG | INFO | WARNING | ERROR</p> </li> </ul>","text":""},{"location":"report/#-out","title":"--out( ) <p>Output results to a file</p>","text":""},{"location":"report/#firmware","title":"firmware <p>Report the firmware versions of all switches (Aruba, Dell, or Mellanox) on the network.</p> <p>Pass in either a comma separated list of IP addresses using the \u2018\u2013ips\u2019 option</p> <p>OR</p> <p>Pass in a file of IP addresses with one address per line using the \u2018\u2013ips-file\u2019 option</p> <p>There are three different statuses found in the report.</p> <ul> <li> <p>\ud83d\udef6 Pass: Indicates that the switch passed the firmware verification.</p> </li> <li> <p>\u274c Fail: Indicates that the switch failed the firmware verification, in the generated table, a list of expected firmware versions for that switch is displayed.</p> </li> <li> <p>\ud83d\udd3a Error: Indicates that there was an error connecting to the switch, check the Errors table for the specific error.</p> </li> </ul>","text":""},{"location":"report/#noqa-d301-b950","title":"noqa: D301, B950","text":"<p>Args:</p> <pre><code>ctx: CANU context settings\ncsm: CSM version\nips: Comma separated list of IPv4 addresses of switches\nips_file: File with one IPv4 address per line\nusername: Switch username\npassword: Switch password\n\n\n```\njson_\n```\n\n: Bool indicating json output\nout: Name of the output file\n</code></pre> <p>Returns:</p> <pre><code>json_formatted: If JSON is selected, returns output\n</code></pre> <pre><code>canu report network firmware [OPTIONS]\n</code></pre>"},{"location":"report/#options_1","title":"Options","text":""},{"location":"report/#-csm","title":"--csm( ) <p>Required CSM network version</p> <ul> <li> <p>Options</p> <p>1.0 | 1.2 | 1.3 | 1.4 | 1.5 | 1.6</p> </li> </ul>","text":""},{"location":"report/#-ips_1","title":"--ips( ) <p>Comma separated list of IPv4 addresses of switches</p>","text":""},{"location":"report/#-ips-file_1","title":"--ips-file( ) <p>File with one IPv4 address per line</p>","text":""},{"location":"report/#-username_1","title":"--username( ) <p>Switch username</p> <ul> <li> <p>Default</p> <p><code>admin</code></p> </li> </ul>","text":""},{"location":"report/#-password_1","title":"--password( ) <p>Switch password</p>","text":""},{"location":"report/#-json","title":"--json() <p>Output JSON</p>","text":""},{"location":"report/#-out_1","title":"--out( ) <p>Output results to a file</p>","text":""},{"location":"report/#version","title":"version <p>Report Switch Version.</p> <p>Args:</p> <pre><code>ctx: CANU context settings\nusername: Switch username\npassword: Switch password\nsls_file: JSON file containing SLS data\nsls_address: The address of SLS\nnetwork: The network that is used to connect to the switches.\n\n\n```\nlog_\n```\n\n: enable logging\n</code></pre> <pre><code>canu report network version [OPTIONS]\n</code></pre>","text":""},{"location":"report/#options_2","title":"Options","text":""},{"location":"report/#-sls-file_1","title":"--sls-file( ) <p>File containing system SLS JSON data.</p>","text":""},{"location":"report/#-network","title":"--network( ) <p>The network that is used to connect to the switches.</p> <ul> <li> <p>Default</p> <p><code>HMN</code></p> </li> <li> <p>Options</p> <p>HMN | CMN</p> </li> </ul>","text":""},{"location":"report/#-log_1","title":"--log() <p>enable logging.</p>","text":""},{"location":"report/#-username_2","title":"--username( ) <p>Switch username</p> <ul> <li> <p>Default</p> <p><code>admin</code></p> </li> </ul>","text":""},{"location":"report/#-password_2","title":"--password( ) <p>Switch password</p>","text":""},{"location":"report/#-sls-address","title":"--sls-address( ) <ul> <li> <p>Default</p> <p><code>api-gw-service-nmn.local</code></p> </li> </ul>","text":""},{"location":"report/#switch","title":"switch","text":"<p>Report switch commands.</p> <pre><code>canu report switch [OPTIONS] COMMAND [ARGS]...\n</code></pre>"},{"location":"report/#cabling_1","title":"cabling <p>Report the live cabling of a switch on the network by using LLDP.</p> <p>LLDP data which is missing the neighbor hostname will optionally be filled out with data from Kea, SLS, SMD and heuristic hints - in that order if all data sources are provided. If there is a duplicate port, the duplicates will be highlighted in \u2018bright white\u2019.</p> <p>Ports highlighted in \u2018blue\u2019 contain the string \u201cncn\u201d in the hostname.</p> <p>Ports are highlighted in \u2018green\u2019 when the port name is set with the interface name.</p>","text":""},{"location":"report/#noqa-d301-b950_1","title":"noqa: D301, B950","text":"<p>Args:</p> <pre><code>ctx: CANU context settings\nip: Switch IPv4 address\nusername: Switch username\npassword: Switch password\nkea_lease_file: Name of the JSON file containing Kea leases\nsls_file: Name of the JSON file containing SLS system data\nsmd_file: Name of the JSON file containing SMD ethernetInterfaces\nheuristic_lookups: Turn off annotations to LLDP data based on common device use\n\n\n```\nlog_\n```\n\n: Level of logging.\nout: Name of the output file\n</code></pre> <pre><code>canu report switch cabling [OPTIONS]\n</code></pre>"},{"location":"report/#options_3","title":"Options","text":""},{"location":"report/#-ip","title":"--ip( ) <p>Required The IP address of the switch</p>","text":""},{"location":"report/#-username_3","title":"--username( ) <p>Switch username</p> <ul> <li> <p>Default</p> <p><code>admin</code></p> </li> </ul>","text":""},{"location":"report/#-password_3","title":"--password( ) <p>Switch password</p>","text":""},{"location":"report/#-kea-lease-file_1","title":"--kea-lease-file( ) <p>Kea leases in JSON format from API call used for MAC-to-hostname lookups.</p>","text":""},{"location":"report/#-sls-file_2","title":"--sls-file( ) <p>SLS file in JSON format from API call used for MAC-to-hostname lookups.</p>","text":""},{"location":"report/#-smd-file_1","title":"--smd-file( ) <p>SMD ethernetInterfaces in JSON format from API call used for MAC-to-hostname lookups.</p>","text":""},{"location":"report/#-heuristic-lookups_1","title":"--heuristic-lookups() <p>Make educated guesses and hints about what device is based on MAC.</p>","text":""},{"location":"report/#-log_2","title":"--log( ) <p>Level of logging.</p> <ul> <li> <p>Options</p> <p>DEBUG | INFO | WARNING | ERROR</p> </li> </ul>","text":""},{"location":"report/#-out_2","title":"--out( ) <p>Output results to a file</p>","text":""},{"location":"report/#firmware_1","title":"firmware <p>Report the firmware of a switch (Aruba, Dell, or Mellanox) on the network.</p> <p>There are two different statuses that might be indicated.</p> <ul> <li> <p>\ud83d\udef6 - Pass: Indicates that the switch passed the firmware verification.</p> </li> <li> <p>\u274c - Fail: Indicates that the switch failed the firmware verification. A list of expected firmware versions will be displayed.</p> </li> </ul>","text":""},{"location":"report/#noqa-d301-b950_2","title":"noqa: D301, B950","text":"<p>Args:</p> <pre><code>ctx: CANU context settings\ncsm: CSM version\nip: Switch IPv4 address\nusername: Switch username\npassword: Switch password\n\n\n```\njson_\n```\n\n: Bool indicating json output\nverbose: Bool indicating verbose output\nout: Name of the output file\n</code></pre> <pre><code>canu report switch firmware [OPTIONS]\n</code></pre>"},{"location":"report/#options_4","title":"Options","text":""},{"location":"report/#-csm_1","title":"--csm( ) <p>Required CSM network version</p> <ul> <li> <p>Options</p> <p>1.0 | 1.2 | 1.3 | 1.4 | 1.5 | 1.6</p> </li> </ul>","text":""},{"location":"report/#-ip_1","title":"--ip( ) <p>Required The IP address of the switch</p>","text":""},{"location":"report/#-username_4","title":"--username( ) <p>Switch username</p> <ul> <li> <p>Default</p> <p><code>admin</code></p> </li> </ul>","text":""},{"location":"report/#-password_4","title":"--password( ) <p>Switch password</p>","text":""},{"location":"report/#-json_1","title":"--json() <p>Output JSON</p>","text":""},{"location":"report/#-verbose","title":"--verbose() <p>Verbose mode</p>","text":""},{"location":"report/#-out_3","title":"--out( ) <p>Output results to a file</p>","text":""},{"location":"rpm_install/","title":"Installing The CANU RPM","text":"<p>Find the unstable and stable RPMs at the following locations.</p> <ul> <li> <p>Unstable RPMs (e.g. main/develop/feature/bugfix branches, anything that is not a git-tag)</p> </li> <li> <p>Stable RPMs (e.g. git-tags)</p> </li> </ul> <p>To install the latest RPM, use <code>zypper</code> or <code>rpm</code>:</p> <pre><code>zypper --plus-repo=https://artifactory.algol60.net/artifactory/csm-rpms/hpe/stable/sle-15sp3 --no-gpg-checks -n in canu -y\nrpm -ivh https://artifactory.algol60.net/ui/native/csm-rpms/hpe/stable/sle-15sp3/canu/x86_64/canu-&lt;version&gt;.rpm\n</code></pre>"},{"location":"test_network/","title":"canu test","text":"<p>Run tests against the network.</p> <p>Args:</p> <pre><code>ctx: CANU context settings\nusername: Switch username\ncsm: CSM version\npassword: Switch password\nsls_file: JSON file containing SLS data\nsls_address: The address of SLS\nnetwork: The network that is used to connect to the switches.\n\n\n```\nlog_\n```\n\n: enable logging\n\n\n```\njson_\n```\n\n: output test results in JSON format\nping: run the ping test suite\n\n\n```\npre_install_\n```\n\n: Tests to run before CSM installation\n</code></pre> <pre><code>canu test [OPTIONS]\n</code></pre>"},{"location":"test_network/#options","title":"Options","text":""},{"location":"test_network/#-sls-file","title":"--sls-file( ) <p>File containing system SLS JSON data.</p>","text":""},{"location":"test_network/#-network","title":"--network( ) <p>The network that is used to connect to the switches.</p> <ul> <li> <p>Default</p> <p><code>HMN</code></p> </li> <li> <p>Options</p> <p>HMN | CMN</p> </li> </ul>","text":""},{"location":"test_network/#-log","title":"--log() <p>enable logging.</p>","text":""},{"location":"test_network/#-json","title":"--json() <p>JSON output.</p>","text":""},{"location":"test_network/#-ping","title":"--ping() <p>Ping test from all mgmt switches to all NCNs.</p>","text":""},{"location":"test_network/#-pre-install","title":"--pre-install() <p>Tests to run before installing CSM</p>","text":""},{"location":"test_network/#-sls-address","title":"--sls-address( ) <ul> <li> <p>Default</p> <p><code>api-gw-service-nmn.local</code></p> </li> </ul>","text":""},{"location":"test_network/#-password","title":"--password( ) <p>Switch password</p>","text":""},{"location":"test_network/#-csm","title":"--csm( ) <p>CSM version</p> <ul> <li> <p>Options</p> <p>1.0 | 1.2 | 1.3 | 1.4 | 1.5 | 1.6</p> </li> </ul>","text":""},{"location":"test_network/#-username","title":"--username( ) <p>Switch username</p> <ul> <li> <p>Default</p> <p><code>admin</code></p> </li> </ul>","text":""},{"location":"uninstallation/","title":"Uninstallation","text":"<p><code>pip3 uninstall canu</code></p>"},{"location":"validate/","title":"canu validate","text":"<p>CANU validate commands.</p> <pre><code>canu validate [OPTIONS] COMMAND [ARGS]...\n</code></pre>"},{"location":"validate/#network","title":"network","text":"<p>Commands that validate the network.</p> <pre><code>canu validate network [OPTIONS] COMMAND [ARGS]...\n</code></pre>"},{"location":"validate/#bgp","title":"bgp","text":"<p>Validate BGP neighbors.</p> <p>This command will check the BGP neighbors for the switch IP addresses entered. All of the neighbors of a switch must be \u2018Established\u2019, or the verification will fail.</p> <p>If a switch that is not a spine switch is tested, it will show in the results table as \u2018SKIP\u2019.</p> <ul> <li> <p>Enter a comma separated list of IP addresses with the \u2018\u2014ips\u2019 flag.</p> </li> <li> <p>Or read the IP addresses from a file, one IP address per line, using \u2018\u2013ips-file FILENAME\u2019 flag.</p> </li> </ul> <p>If you want to see the individual status of all the neighbors of a switch, use the \u2018\u2013verbose\u2019 flag.</p>"},{"location":"validate/#noqa-d301","title":"noqa: D301","text":"<p>Args:</p> <pre><code>ctx: CANU context settings\nusername: Switch username\npassword: Switch password\nverbose: Bool indicating verbose output\nnetwork: The network that BGP neighbors are checked\n</code></pre> <pre><code>canu validate network bgp [OPTIONS]\n</code></pre>"},{"location":"validate/#options","title":"Options","text":""},{"location":"validate/#-username","title":"--username( ) <p>Switch username</p> <ul> <li> <p>Default</p> <p><code>admin</code></p> </li> </ul>","text":""},{"location":"validate/#-password","title":"--password( ) <p>Switch password</p>","text":""},{"location":"validate/#-network","title":"--network( ) <p>The network that BGP neighbors are checked.</p> <ul> <li> <p>Default</p> <p><code>ALL</code></p> </li> <li> <p>Options</p> <p>ALL | NMN | CMN</p> </li> </ul>","text":""},{"location":"validate/#-verbose","title":"--verbose() <p>Verbose mode</p>","text":""},{"location":"validate/#cabling","title":"cabling <p>Validate network cabling.</p> <p>CANU can be used to validate that network cabling passes basic validation checks.</p> <p>This command will use LLDP to determine if the network is properly connected architecturally.</p> <p>The validation will ensure that spine switches, leaf switches, edge switches, and nodes all are connected properly.</p>","text":""},{"location":"validate/#noqa-d301-b950","title":"noqa: D301, B950","text":"<p>Args:</p> <pre><code>ctx: CANU context settings\narchitecture: CSM architecture\nips: Comma separated list of IPv4 addresses of switches\nips_file: File with one IPv4 address per line\nusername: Switch username\npassword: Switch password\n\n\n```\nlog_\n```\n\n: Level of logging.\nout: Name of the output file\n</code></pre> <pre><code>canu validate network cabling [OPTIONS]\n</code></pre>"},{"location":"validate/#options_1","title":"Options","text":""},{"location":"validate/#-a-architecture","title":"-a(, --architecture( ) <p>Required CSM architecture</p> <ul> <li> <p>Options</p> <p>Full | TDS | v1</p> </li> </ul>","text":""},{"location":"validate/#-ips","title":"--ips( ) <p>Comma separated list of IPv4 addresses of switches</p>","text":""},{"location":"validate/#-ips-file","title":"--ips-file( ) <p>File with one IPv4 address per line</p>","text":""},{"location":"validate/#-username_1","title":"--username( ) <p>Switch username</p> <ul> <li> <p>Default</p> <p><code>admin</code></p> </li> </ul>","text":""},{"location":"validate/#-password_1","title":"--password( ) <p>Switch password</p>","text":""},{"location":"validate/#-log","title":"--log( ) <p>Level of logging.</p> <ul> <li> <p>Options</p> <p>DEBUG | INFO | WARNING | ERROR</p> </li> </ul>","text":""},{"location":"validate/#-out","title":"--out( ) <p>Output results to a file</p>","text":""},{"location":"validate/#paddle","title":"paddle","text":"<p>Validate a CCJ file.</p> <p>Pass in a CCJ file to validate that it works architecturally. The validation will ensure that spine switches, leaf switches, edge switches, and nodes all are connected properly.</p>"},{"location":"validate/#noqa-d301_1","title":"noqa: D301","text":"<p>Args:</p> <pre><code>ctx: CANU context settings\nccj: Paddle CCJ file\nout: Filename for the JSON Topology if requested.\n\n\n```\nlog_\n```\n\n: Level of logging.\n</code></pre> <pre><code>canu validate paddle [OPTIONS]\n</code></pre>"},{"location":"validate/#options_2","title":"Options","text":""},{"location":"validate/#-ccj","title":"--ccj( ) <p>CCJ (CSM Cabling JSON) File containing system topology.</p>","text":""},{"location":"validate/#-out_1","title":"--out( ) <p>Output results to a file</p>","text":""},{"location":"validate/#-log_1","title":"--log( ) <p>Level of logging.</p> <ul> <li> <p>Options</p> <p>DEBUG | INFO | WARNING | ERROR</p> </li> </ul>","text":""},{"location":"validate/#paddle-cabling","title":"paddle-cabling","text":"<p>Validate a CCJ file against the current network cabling.</p> <p>Pass in a CCJ file to validate that it works architecturally.</p> <p>This command will also use LLDP to determine the neighbors of the IP addresses passed in to validate that the network is properly connected architecturally.</p> <p>The validation will ensure that spine switches, leaf switches, edge switches, and nodes all are connected properly.</p>"},{"location":"validate/#noqa-d301_2","title":"noqa: D301","text":"<p>Args:</p> <pre><code>ctx: CANU context settings\ncsm: csm version\nccj: Paddle CCJ file\nips: Comma separated list of IPv4 addresses of switches\nips_file: File with one IPv4 address per line\nusername: Switch username\npassword: Switch password\n\n\n```\nlog_\n```\n\n: Level of logging\nout: Name of the output file\n</code></pre> <pre><code>canu validate paddle-cabling [OPTIONS]\n</code></pre>"},{"location":"validate/#options_3","title":"Options","text":""},{"location":"validate/#-csm","title":"--csm( ) <p>Required CSM network version</p> <ul> <li> <p>Options</p> <p>1.0 | 1.2 | 1.3 | 1.4 | 1.5 | 1.6</p> </li> </ul>","text":""},{"location":"validate/#-ccj_1","title":"--ccj( ) <p>Required CCJ (CSM Cabling JSON) File containing system topology.</p>","text":""},{"location":"validate/#-ips_1","title":"--ips( ) <p>Comma separated list of IPv4 addresses of switches</p>","text":""},{"location":"validate/#-ips-file_1","title":"--ips-file( ) <p>File with one IPv4 address per line</p>","text":""},{"location":"validate/#-username_2","title":"--username( ) <p>Switch username</p> <ul> <li> <p>Default</p> <p><code>admin</code></p> </li> </ul>","text":""},{"location":"validate/#-password_2","title":"--password( ) <p>Switch password</p>","text":""},{"location":"validate/#-log_2","title":"--log( ) <p>Level of logging.</p> <ul> <li> <p>Options</p> <p>DEBUG | INFO | WARNING | ERROR</p> </li> </ul>","text":""},{"location":"validate/#-out_2","title":"--out( ) <p>Output results to a file</p>","text":""},{"location":"validate/#shcd","title":"shcd","text":"<p>Validate a SHCD file.</p> <p>CANU can be used to validate that an SHCD (SHasta Cabling Diagram) passes basic validation checks.</p> <ul> <li> <p>Use the \u2018\u2013tabs\u2019 flag to select which tabs on the spreadsheet will be included.</p> </li> <li> <p>The \u2018\u2013corners\u2019 flag is used to input the upper left and lower right corners of the table on each tab of the worksheet. If the corners are not specified, you will be prompted to enter them for each tab.</p> </li> <li> <p>The table should contain the 11 headers: Source, Rack, Location, Slot, (Blank), Port, Destination, Rack, Location, (Blank), Port.</p> </li> </ul>"},{"location":"validate/#noqa-d301-b950_1","title":"noqa: D301, B950","text":"<p>Args:</p> <pre><code>ctx: CANU context settings\narchitecture: CSM architecture\nshcd: SHCD file\ntabs: The tabs on the SHCD file to check, e.g. 10G_25G_40G_100G,NMN,HMN.\ncorners: The corners on each tab, comma separated e.g. \u2018J37,U227,J15,T47,J20,U167\u2019.\nedge: Vendor of the edge router\nout: Filename for the JSON Topology if requested.\n\n\n```\njson_\n```\n\n: Bool indicating json output\n\n\n```\nlog_\n```\n\n: Level of logging.\n</code></pre> <pre><code>canu validate shcd [OPTIONS]\n</code></pre>"},{"location":"validate/#options_4","title":"Options","text":""},{"location":"validate/#-a-architecture_1","title":"-a(, --architecture( ) <p>Required CSM architecture</p> <ul> <li> <p>Options</p> <p>Full | TDS | V1</p> </li> </ul>","text":""},{"location":"validate/#-shcd","title":"--shcd( ) <p>Required SHCD file</p>","text":""},{"location":"validate/#-tabs","title":"--tabs( ) <p>The tabs on the SHCD file to check, e.g. 10G_25G_40G_100G,NMN,HMN.</p>","text":""},{"location":"validate/#-corners","title":"--corners( ) <p>The corners on each tab, comma separated e.g. \u2018J37,U227,J15,T47,J20,U167\u2019.</p>","text":""},{"location":"validate/#-edge","title":"--edge( ) <p>Required Vendor of Edge router</p> <ul> <li> <p>Options</p> <p>Aruba | Arista</p> </li> </ul>","text":""},{"location":"validate/#-out_3","title":"--out( ) <p>Output results to a file</p>","text":""},{"location":"validate/#-json","title":"--json() <p>Output JSON model to a file</p>","text":""},{"location":"validate/#-log_3","title":"--log( ) <p>Level of logging.</p> <ul> <li> <p>Options</p> <p>DEBUG | INFO | WARNING | ERROR</p> </li> </ul>","text":""},{"location":"validate/#shcd-cabling","title":"shcd-cabling","text":"<p>Validate a SHCD file against the current network cabling.</p> <p>Pass in a SHCD file and a list of IP address to compair the connections.</p> <p>The output of the validate shcd-cabling command will show a port by port comparison between the devices found in the SHCD and devices found on the network. If there is a difference in what is found connected to a devices port in SHCD and Cabling, the line will be highlighted in \u2018red\u2019.</p>"},{"location":"validate/#noqa-d301-b950_2","title":"noqa: D301, B950","text":"<p>Args:</p> <pre><code>ctx: CANU context settings\ncsm: csm version\narchitecture: CSM architecture\nshcd: SHCD file\ntabs: The tabs on the SHCD file to check, e.g. 10G_25G_40G_100G,NMN,HMN.\ncorners: The corners on each tab, comma separated e.g. \u2018J37,U227,J15,T47,J20,U167\u2019.\nips: Comma separated list of IPv4 addresses of switches\nips_file: File with one IPv4 address per line\nmacs: Print NCN MAC addresses\nusername: Switch username\npassword: Switch password\n\n\n```\nlog_\n```\n\n: Level of logging\nout: Name of the output file\n</code></pre> <pre><code>canu validate shcd-cabling [OPTIONS]\n</code></pre>"},{"location":"validate/#options_5","title":"Options","text":""},{"location":"validate/#-csm_1","title":"--csm( ) <p>Required CSM network version</p> <ul> <li> <p>Options</p> <p>1.0 | 1.2 | 1.3 | 1.4 | 1.5 | 1.6</p> </li> </ul>","text":""},{"location":"validate/#-a-architecture_2","title":"-a(, --architecture( ) <p>Required CSM architecture</p> <ul> <li> <p>Options</p> <p>Full | TDS | V1</p> </li> </ul>","text":""},{"location":"validate/#-shcd_1","title":"--shcd( ) <p>Required SHCD file</p>","text":""},{"location":"validate/#-tabs_1","title":"--tabs( ) <p>The tabs on the SHCD file to check, e.g. 10G_25G_40G_100G,NMN,HMN.</p>","text":""},{"location":"validate/#-corners_1","title":"--corners( ) <p>The corners on each tab, comma separated e.g. \u2018J37,U227,J15,T47,J20,U167\u2019.</p>","text":""},{"location":"validate/#-ips_2","title":"--ips( ) <p>Comma separated list of IPv4 addresses of switches</p>","text":""},{"location":"validate/#-ips-file_2","title":"--ips-file( ) <p>File with one IPv4 address per line</p>","text":""},{"location":"validate/#-username_3","title":"--username( ) <p>Switch username</p> <ul> <li> <p>Default</p> <p><code>admin</code></p> </li> </ul>","text":""},{"location":"validate/#-password_3","title":"--password( ) <p>Switch password</p>","text":""},{"location":"validate/#-log_4","title":"--log( ) <p>Level of logging.</p> <ul> <li> <p>Options</p> <p>DEBUG | INFO | WARNING | ERROR</p> </li> </ul>","text":""},{"location":"validate/#-out_4","title":"--out( ) <p>Output results to a file</p>","text":""},{"location":"validate/#-macs","title":"--macs() <p>Print NCN MAC addresses</p>","text":""},{"location":"validate/#switch","title":"switch","text":"<p>Commands that validate a switch.</p> <pre><code>canu validate switch [OPTIONS] COMMAND [ARGS]...\n</code></pre>"},{"location":"validate/#config","title":"config <p>Validate switch config.</p> <p>After config has been generated, CANU can validate the generated config against running switch config. The running config can be from either an IP address, or a config file.</p> <ul> <li> <p>To get running config from an IP address, use the flags \u2018\u2013ip 192.168.1.1 \u2013username USERNAME \u2013password PASSWORD\u2019.</p> </li> <li> <p>To get running config from a file, use the flag \u2018\u2013running RUNNING_CONFIG.cfg\u2019 instead.</p> </li> </ul> <p>After running the \u2018validate switch config\u2019 command, you will be shown a line by line comparison of the currently running switch config against the config file that was passed in. You will also be given a list of remediation commands that can be typed into the switch to get the running config to match the config file. There will be a summary table at the end highlighting the most important differences between the configs.</p> <ul> <li> <p>Lines that are red and start with a \u2018-\u2019 are in the running config, but not in the config file</p> </li> <li> <p>Lines that are green and start with a \u2018+\u2019 are not in the running config, but are in the config file</p> </li> <li> <p>Lines that are blue and start with a \u2018?\u2019 are attempting to point out specific line differences</p> </li> </ul>","text":""},{"location":"validate/#noqa-d301-b950_3","title":"noqa: D301, B950","text":"<p>Args:</p> <pre><code>ctx: CANU context settings\nip: The IP address of the switch\nrunning: The running switch config file\nusername: Switch username\npassword: Switch password\ngenerated_config: Generated config file\nout: Name of the output file\nvendor: Switch vendor. Aruba, Dell, or Mellanox\nremediation: output remediation config\n</code></pre> <pre><code>canu validate switch config [OPTIONS]\n</code></pre>"},{"location":"validate/#options_6","title":"Options","text":""},{"location":"validate/#-ip","title":"--ip( ) <p>The IP address of the switch with running config</p>","text":""},{"location":"validate/#-running","title":"--running( ) <p>The running switch config file</p>","text":""},{"location":"validate/#-vendor","title":"--vendor( ) <p>The vendor is needed if passing in the running config from a file</p> <ul> <li> <p>Options</p> <p>Aruba | Dell | Mellanox</p> </li> </ul>","text":""},{"location":"validate/#-username_4","title":"--username( ) <p>Switch username</p> <ul> <li> <p>Default</p> <p><code>admin</code></p> </li> </ul>","text":""},{"location":"validate/#-password_4","title":"--password( ) <p>Switch password</p>","text":""},{"location":"validate/#-generated","title":"--generated( ) <p>Generated config file</p>","text":""},{"location":"validate/#-out_5","title":"--out( ) <p>Output results to a file</p>","text":""},{"location":"validate/#-remediation","title":"--remediation() <p>Outputs commands to get from the running-config to generated config, Mellanox not supported</p>","text":""},{"location":"venv/","title":"Setup A Virtual Environment","text":"<p>Besides using the CANU container, setting up a Python virtual environment and installing canu from this repo is another option for using and developing CANU.</p> <pre><code>git clone\ncd canu\npython3 -m venv .venv\nsource ./.venv/bin/activate\npython3 -m pip install 'setuptools_scm[toml]'\npython3 -m pip install . \n# or python3 -m pip install --editable . \n</code></pre>"},{"location":"venv/#development-build","title":"Development Build","text":"<p>You can install CANU in editable mode, which allows for changes you make in the code to show up immediately when running CANU.</p> <pre><code>python3 -m pip install --editable .\n</code></pre>"},{"location":"venv/#install-extras","title":"Install Extras","text":"<p>You may also want to install some CANU\u2019s extras if you are developing it.  For example, you may want to run some of the unit tests, or generate new documentation.  These extras can be seen in <code>pyproject.toml</code>.</p> <pre><code>python3 -m pip install '.[docs,lint,test]'\n</code></pre>"},{"location":"venv/#exiting-the-virtual-environment","title":"Exiting The Virtual Environment","text":"<p>When you are done working in the virtual environment, exit out it:</p> <pre><code>deactivate\n</code></pre>"},{"location":"versioning/","title":"Versioning","text":"<p>The version is derived from Git by the <code>setuptools_scm</code> Python module and follows PEP0440\u2019s version identification and dependency specification for final and pre releases.</p>"},{"location":"versioning/#classification","title":"Classification","text":"<p>The items below denote how stable, pre-release, and unstable versions are classified through version strings.</p> <ul> <li>(stable) release: A git-tag following the <code>X.Y.Z</code> semver format is considered a stable, release version.</li> </ul> <pre><code># Format:\n# {tag}\n# X.Y.Z\n# X - Major\n# Y - Minor\n# Z - Micro (a.k.a. patch)\n0.1.2\n</code></pre> <ul> <li>(stable) post-release: A git-tag following the <code>X.Y.Z.postN</code> (where <code>N</code> is an integer), indicates a post-release. These are seldom used, and are strictly for handling documentation, packaging, or other meta updates after a release tag was already created where it isn\u2019t warranted to publish an entirely new release.</li> </ul> <pre><code># Format:\n# {tag}\n# X.Y.Z.postN\n# X - Major\n# Y - Minor\n# Z - Micro (a.k.a. patch)\n# Z - Post release [1-9]+\n0.1.2.post1\n</code></pre> <p>NOTE <code>X.Y.Z.post0</code> is equivalent to <code>X.Y.Z</code>, <code>post0</code> indicates the first release.</p> <ul> <li>(unstable) pre-release: A git-tag with an <code>a</code>(lpha), <code>b</code>(eta), or <code>r</code>(elease) <code>c</code>(andidate) annotation and an identification number <code>N</code> denotes a pre-release/preview.</li> </ul> <p>For <code>canu</code>, these are sometimes created before an official release (e.g. 1.7.0a1 might exist before 1.7.0 is released). Additionally the beta and release candidate tags may be skipped. Whether an alpha, beta, or release candidate pre-release is taken is entirely up to the <code>canu</code> release management team.</p> <pre><code># Format:\n# {tag}[{a|b|rc}N]\n0.1.2a1\n0.1.2b1\n0.1.2rc1\n</code></pre> <ul> <li> <p>(unstable) development: Development builds auto-increment the micro version (the <code>Z</code> in <code>X.Y.Z</code>) or pre-release version (the <code>N</code> in <code>X.Y.Z{[a|b|rc]N}</code>), and then append a suffix based on whether the working directory was clean, dirty, or mixed.</p> <ul> <li>clean: When the version shows an appended <code>devN+{scm_letter}{revision_short_hash}</code>, that means there have been commits made since the previous git-tag.</li> </ul> </li> </ul> <pre><code># Format:\n# {next_version}.dev{distance}+{scm_letter}{revision_short_hash}\n\n# If the previous git-tag was 0.1.2:\n           0.1.3.dev4+g818da8a\n\n# If the previous get-tag was a pre-release of 0.1.3a1:\n         0.1.3a2.dev4+g818da8a\n</code></pre> <pre><code>* ***dirty*** When the version shows an appended `.d{YYYYMMDD}` datestamp, that means there were modified/uncommitted changes in the working directory when the application was built.\n</code></pre> <pre><code># Format:\n# {next_version}.d(datestamp}\n\n# If the previous git-tag was 0.1.2:\n           0.1.3.d20230123\n\n# If the previous get-tag was a pre-release of 0.1.3a1:\n         0.1.2a2.d20230123\n</code></pre> <pre><code>* ***mixed*** When the version shows a development tag with an appended datestamp, this means commits have been made but there were uncommitted changes present in the working directory when the application was built.\n</code></pre> <pre><code># Format:\n# {next_Version}.dev{distance}+{scm_letter}{revision_short_hash}.d{datestamp}\n\n# If the previous git-tag was 0.1.2:\n           0.1.3.dev3+g3071655.d20230123\n\n# If the previous get-tag was a pre-release of 0.1.3a1:\n         0.1.3a2.dev3+g3071655.d20230123\n</code></pre>"},{"location":"versioning/#configuration","title":"Configuration","text":"<p>The <code>setuptools_scm</code> module is configured by <code>pyproject.toml</code>.</p> <p>For more information regarding configuration of <code>setuptools_scm</code>, see version number construction.</p>"},{"location":"_build/markdown/","title":"CANU","text":"<p>(CSM Automatic Network Utility) floats through a Shasta network and makes setup and config breeze.</p> <p>CANU can be used to:</p> <ul> <li> <p>Check if switches (Aruba, Dell, or Mellanox) on a Shasta network meet the firmware version requirements</p> </li> <li> <p>Check network cabling status using LLDP</p> </li> <li> <p>Validate BGP status</p> </li> <li> <p>Validate that SHCD spreadsheets are configured correctly and pass a number of checks</p> </li> <li> <p>Validate an SHCD against actual network cabling status to check for mis-cabling</p> </li> <li> <p>Generate switch configuration for an entire network</p> </li> <li> <p>Convert SHCD to CCJ (CSM Cabling JSON)</p> </li> <li> <p>Use CCJ / Paddle to validate the network and generate network config</p> </li> <li> <p>Run tests against the mgmt network to check for faults/inconsistencies.</p> </li> <li> <p>Backup switch configs.</p> </li> </ul>"},{"location":"_build/markdown/backup/","title":"canu backup network","text":"<p>Canu backup network config.</p> <pre><code>canu backup network [OPTIONS]\n</code></pre>"},{"location":"_build/markdown/backup/#options","title":"Options","text":""},{"location":"_build/markdown/backup/#-sls-file","title":"--sls-file( ) <p>File containing system SLS JSON data.</p>","text":""},{"location":"_build/markdown/backup/#-network","title":"--network( ) <p>The network that is used to connect to the switches.</p> <ul> <li> <p>Default</p> <p><code>HMN</code></p> </li> <li> <p>Options</p> <p>HMN | CMN</p> </li> </ul>","text":""},{"location":"_build/markdown/backup/#-log","title":"--log() <p>enable logging.</p>","text":""},{"location":"_build/markdown/backup/#-folder","title":"--folder( ) <p>Required Folder to store config files</p>","text":""},{"location":"_build/markdown/backup/#-unsanitized","title":"--unsanitized() <p>Retain sensitive data</p>","text":""},{"location":"_build/markdown/backup/#-sls-address","title":"--sls-address( ) <ul> <li> <p>Default</p> <p><code>api-gw-service-nmn.local</code></p> </li> </ul>","text":""},{"location":"_build/markdown/backup/#-password","title":"--password( ) <p>Switch password</p>","text":""},{"location":"_build/markdown/backup/#-username","title":"--username( ) <p>Switch username</p> <ul> <li> <p>Default</p> <p><code>admin</code></p> </li> </ul>","text":""},{"location":"_build/markdown/cache/","title":"Deprecated","text":""},{"location":"_build/markdown/cache/#canu-cache","title":"canu cache","text":"<p>Print the canu_cache.yaml file.</p> <pre><code>canu cache [OPTIONS]\n</code></pre>"},{"location":"_build/markdown/canu_inventory/","title":"Using <code>canu-inventory</code> with Ansible","text":"<p><code>canu-inventory</code> is a dynamic inventory script that queries a <code>sls_input_file.json</code> in the working directory, or an API gateway (<code>$SLS_API_GW</code>).  It can be called directly to print the information or it can be passed as an argument to <code>ansible-inventory</code>.</p> <ul> <li> <p><code>$SLS_API_GW</code> and <code>$SLS_TOKEN</code> (or <code>$TOKEN</code>) must be set in order to query the API.</p> </li> <li> <p><code>$SWITCH_USERNAME</code> and <code>$SWITCH_PASSWORD</code> must be set in order to execute playbooks.</p> </li> <li> <p><code>ANSIBLE_HOST_KEY_CHECKING=False</code> can be set to ignore host key checking.</p> </li> <li> <p><code>-e config_folder</code> should be set to the directory containing the switch configs.</p> </li> </ul> <pre><code># examples\nansible-inventory -i canu-inventory --list\nansible-playbook -i canu-inventory aruba-aoscx.yml -e config_folder=/switch_configs\n</code></pre> <p>When running the playbook you may need to input the full path to <code>canu-inventory</code>, the playbook, and the switch configs.</p> <pre><code># example\nansible-playbook -i /Users/bin/canu-inventory /Users/bin/canu/inventory/plays/aruba-aoscx.yml -e config_folder=/Users/canu\n</code></pre> <p>If using the API, <code>$TOKEN</code> or <code>$SLS_TOKEN</code> need to be set.</p> <p>If running this from outside the cluster over the CMN, <code>$REQUESTS_CA_BUNDLE</code> needs to be set</p>"},{"location":"_build/markdown/container_install/","title":"Install The CANU Container","text":""},{"location":"_build/markdown/container_install/#pre-built-image","title":"Pre-built Image","text":"<p>A pre-built CANU image can be pulled using a container runtime (Docker, Podman, etc.)</p> <pre><code>docker pull &lt;registry&gt;/canu:&lt;tag&gt;\n</code></pre> <p>You will need to authorize your container runtime in order to pull from it.</p>"},{"location":"_build/markdown/container_install/#wrapper-script","title":"Wrapper Script","text":"<p>You may also wish to install the <code>canuctl</code> wrapper script to simplify running the container with the correct arguments.  That script is installed with the RPM or is available in the repo when building the container image.</p> <pre><code>./canuctl -p # run the prouction container\n./canuctl -d # run a development container, which has a development environment setup for making changes\n</code></pre> <pre><code>./canuctl -h\n\n./canuctl -d(ev) | -p(rod) [-r(ebuild)] [-i(mage) &lt;image&gt;] [args] [-h(elp)]\n\n  -d: run the dev container (editable environment to make changes to the code)\n  -p: run the prod container (canu for everyday use)\n  -r: rebuild the container (default ${ALPINE_IMAGE}: alpine:3.17)\n  -i: specify the image to use (default ${CANU_IMAGE}: artifactory.algol60.net/csm-docker/stable/canu)\n  -h: print this help message\n\n</code></pre>"},{"location":"_build/markdown/container_install/#dockerfile","title":"Dockerfile","text":"<p>The container image can be built from the <code>Dockerfile</code> in the canu repo.</p> <pre><code>git clone https://github.com/Cray-HPE/canu.git\ncd canu\nmake prod\n</code></pre> <p>Note: this pulls from an authenticated Artifactory by default in order to get the base image.  You will need to authorize your container runtime in order to pull from it.</p> <p>Alternatively, you can override the base image to one that is publicly accessible.</p> <pre><code>ALPINE_IMAGE=alpine:3.17 make image\n</code></pre>"},{"location":"_build/markdown/examples_output/","title":"Initialization","text":"<p>To help make switch setup a breeze. CANU can automatically parse SLS JSON data - including CSI sls_input_file.json output or the Shasta SLS API for switch IPv4 addresses.</p>"},{"location":"_build/markdown/examples_output/#csi-input","title":"CSI Input","text":"<ul> <li>In order to parse CSI output, use the <code>--sls-file FILE</code> flag to pass in the folder where an SLS JSON file is located.</li> </ul> <p>The CSI <code>sls_input_file.json</code> file is generally stored in one of two places depending on how far the system is in the install process.</p> <ul> <li> <p>Early in the install process, when running off of the LiveCD the CSI <code>sls_input_file.json</code> file is normally found in the the directory <code>/var/www/ephemeral/prep/SYSTEMNAME/</code></p> </li> <li> <p>Later in the install process, the CSI <code>sls_input_file.json</code> file is generally in <code>/mnt/pitdata/prep/SYSTEMNAME/</code></p> </li> <li> <p>The SLS file can also be obtained from an NCN that\u2019s in the k8s cluster by running <code>cray sls dumpstate list  --format json</code></p> </li> <li> <p>The switch IPs will be read from the \u2018NMN\u2019 network, if a different network is desired, use the <code>--network</code> flag to choose a different one e.g. (CAN, MTL, NMN).</p> </li> </ul> <p>To get the switch IP addresses from CSI output, run the command:</p> <pre><code>canu init --sls-file SLS_FILE --out output.txt\n</code></pre> <p>Potential output:</p> <pre><code>8 IP addresses saved to output.txt\n</code></pre>"},{"location":"_build/markdown/examples_output/#sls-api-input","title":"SLS API Input","text":"<ul> <li>To parse the Shasta SLS API for IP addresses, ensure that you have a valid token. The token file can either be passed in with the <code>--auth-token TOKEN_FILE</code> flag, or it can be automatically read if the environmental variable <code>SLS_TOKEN</code> is set. The SLS address is default set to <code>api-gw-service-nmn.local</code>, if you are operating on a system with a different address, you can set it with the <code>--sls-address SLS_ADDRESS</code> flag.</li> </ul> <p>To get the switch IP addresses from the Shasta SLS API, run the command:</p> <pre><code>canu init --auth-token ~./config/cray/tokens/ --sls-address 1.2.3.4 --out output.txt\n</code></pre> <p>Potential output:</p> <pre><code>8 IP addresses saved to output.txt\n</code></pre> <p>The output file for the <code>canu init</code> command is set with the <code>--out FILENAME</code> flag.</p>"},{"location":"_build/markdown/examples_output/#report-switch-firmware","title":"Report Switch Firmware","text":"<p>CANU checks the switch firmware version against the standard in the <code>canu.yaml</code> file found in the root directory.</p> <p>The CSM version is required to determine the firmware to validate against, you can pass it in with <code>--csm</code> like <code>--csm 1.2</code>.</p> <p>To check the firmware of a single switch run: <code>canu report switch firmware --csm 1.2 --ip 192.168.1.1 --username USERNAME --password PASSWORD</code></p> <pre><code>$ canu report switch firmware --csm 1.2 --ip 192.168.1.1 --username USERNAME --password PASSWORD\n\ud83d\udef6 - Pass - IP: 192.168.1.1 Hostname:sw-spine-001 Firmware: GL.10.06.0010\n</code></pre>"},{"location":"_build/markdown/examples_output/#report-network-firmware","title":"Report Network Firmware","text":"<p>Multiple switches on a network (Aruba, Dell, or Mellanox) can be checked for their firmware versions. The IPv4 addresses of the switches can either be entered comma separated, or be read from a file. To enter a comma separated list of IP addresses to the <code>---ips</code> flag. To read the IP addresses from a file, make sure the file has one IP address per line, and use the flag like <code>--ips-file FILENAME</code> to input the file.</p> <p>The CSM version is required to determine the firmware to validate against, you can pass it in with <code>--csm</code> like <code>--csm 1.2</code>.</p> <p>An example of checking the firmware of multiple switches: <code>canu report network firmware --csm 1.2 --ips 192.168.1.1,192.168.1.2 --username USERNAME --password PASSWORD</code></p> <pre><code>canu report network firmware --csm 1.2 --ips 192.168.1.1,192.168.1.2,192.168.1.3,192.168.1.4 --username USERNAME --password PASSWORD\n</code></pre> <p>Potential output:</p> <pre><code>------------------------------------------------------------------\n    STATUS  IP              HOSTNAME            FIRMWARE\n------------------------------------------------------------------\n \ud83d\udef6 Pass    192.168.1.1     test-switch-spine01 GL.10.06.0010\n \ud83d\udef6 Pass    192.168.1.2     test-switch-leaf01  FL.10.06.0010\n \u274c Fail    192.168.1.3     test-wrong-version  FL.10.05.0001   Firmware should be in range ['FL.10.06.0001']\n \ud83d\udd3a Error   192.168.1.4\n\n\nErrors\n------------------------------------------------------------------\n192.168.1.4     - HTTP Error. Check that this IP is an Aruba switch, or check the username and password\n\nSummary\n------------------------------------------------------------------\n\ud83d\udef6 Pass - 2 switches\n\u274c Fail - 1 switches\n\ud83d\udd3a Error - 1 switches\nGL.10.06.0010 - 1 switches\nFL.10.06.0010 - 1 switches\nFL.10.05.0010 - 1 switches\n</code></pre> <p>When using the network firmware commands, the table will show either: \ud83d\udef6 Pass, \u274c Fail, or \ud83d\udd3a Error. The switch will pass or fail based on if the switch firmware matches the <code>canu.yaml</code>.</p>"},{"location":"_build/markdown/examples_output/#output-to-a-file","title":"Output to a File","text":"<p>To output the results of the switch firmware or network firmware commands to a file, append the <code>--out FILENAME</code> flag</p>"},{"location":"_build/markdown/examples_output/#output-to-json","title":"Output to JSON","text":"<p>To get the JSON output from a single switch, or from multiple switches, make sure to use the <code>--json</code> flag. An example json output is below.</p> <pre><code>canu network firmware --csm 1.2 --ips 192.168.1.1,192.168.1.2 --username USERNAME --password PASSWORD --json\n</code></pre> <p>Potential output:</p> <pre><code>{\n    \"192.168.1.1\": {\n        \"status\": \"Pass\",\n        \"hostname\": \"test-switch-spine01\",\n        \"platform_name\": \"8325\",\n        \"firmware\": {\n            \"current_version\": \"GL.10.06.0010\",\n            \"primary_version\": \"GL.10.06.0010\",\n            \"secondary_version\": \"GL.10.05.0020\",\n            \"default_image\": \"primary\",\n            \"booted_image\": \"primary\",\n        },\n    },\n    \"192.168.1.2\": {\n        \"status\": \"Pass\",\n        \"hostname\": \"test-switch-leaf01\",\n        \"platform_name\": \"6300\",\n        \"firmware\": {\n            \"current_version\": \"FL.10.06.0010\",\n            \"primary_version\": \"FL.10.06.0010\",\n            \"secondary_version\": \"FL.10.05.0020\",\n            \"default_image\": \"primary\",\n            \"booted_image\": \"primary\",\n        },\n    },\n}\n</code></pre>"},{"location":"_build/markdown/examples_output/#report-switch-cabling","title":"Report Switch Cabling","text":"<p>CANU can also use LLDP to check the cabling status of a switch. To check the cabling of a single switch run: <code>canu report switch cabling --ip 192.168.1.1 --username USERNAME --password PASSWORD</code></p> <pre><code>canu report switch cabling --ip 192.168.1.1 --username USERNAME --password PASSWORD\n</code></pre> <p>Potential output:</p> <pre><code>Switch: test-switch-spine01 (192.168.1.1)\nAruba 8325\n------------------------------------------------------------------------------------------------------------------------------------------\nPORT        NEIGHBOR       NEIGHBOR PORT      PORT DESCRIPTION                                      DESCRIPTION\n------------------------------------------------------------------------------------------------------------------------------------------\n1/1/1   ==&gt;                00:00:00:00:00:01  No LLDP data, check ARP vlan info.                    192.168.1.20:vlan1, 192.168.2.12:vlan2\n1/1/3   ==&gt; ncn-test2      00:00:00:00:00:02  mgmt0                                                 Linux ncn-test2\n1/1/5   ==&gt; ncn-test3      00:00:00:00:00:03  mgmt0                                                 Linux ncn-test3\n1/1/7   ==&gt;                00:00:00:00:00:04  No LLDP data, check ARP vlan info.                    192.168.1.10:vlan1, 192.168.2.9:vlan2\n1/1/51  ==&gt; test-spine02   1/1/51                                                                   Aruba JL635A  GL.10.06.0010\n1/1/52  ==&gt; test-spine02   1/1/52                                                                   Aruba JL635A  GL.10.06.0010\n</code></pre> <p>Sometimes when checking cabling using LLDP, the neighbor does not return any information except a MAC address. When that is the case, CANU looks up the MAC in the ARP table and displays the IP addresses and vlan information associated with the MAC.</p> <p>Entries in the table will be colored based on what they are. Neighbors that have ncn in their name will be colored blue. Neighbors that have a port labeled (not a MAC address), are generally switches and are labeled green. Ports that are duplicated, will be bright white.</p>"},{"location":"_build/markdown/examples_output/#report-network-cabling","title":"Report Network Cabling","text":"<p>The cabling of multiple switches (Aruba, Dell, or Mellanox) on a network can be checked at the same time using LLDP. The IPv4 addresses of the switches can either be entered comma separated, or be read from a file. To enter a comma separated list of IP addresses to the <code>---ips</code> flag. To read the IP addresses from a file, make sure the file has one IP address per line, and use the flag like <code>--ips-file FILENAME</code> to input the file.</p> <p>An example of checking the cabling of multiple switches: <code>canu report network cabling --ips 192.168.1.1,192.168.1.2 --username USERNAME --password PASSWORD</code></p> <p>There are two different <code>--view</code> options, switch and equipment.</p> <ol> <li> <p>The <code>--view switch</code> option displays a table for every switch IP address passed in showing connections. This is the same view as shown in the above example of checking single switch cabling.</p> </li> <li> <p>The <code>--view equipment</code> option displays a table for each mac address connection. This means that servers and switches will both display incoming and outgoing connections.</p> </li> </ol> <p>An example of checking the cabling of multiple switches and displaying with the equipment view: <code>canu network cabling --ips 192.168.1.1,192.168.1.2 --username USERNAME --password PASSWORD --view equipment</code></p> <pre><code>canu report network cabling --ips 192.168.1.1,192.168.1.2 --username USERNAME --password PASSWORD --view equipment\n</code></pre> <p>Potential output:</p> <pre><code>sw-spine01 Aruba JL635A  GL.10.06.0010\naa:aa:aa:aa:aa:aa\n----------------------------------------------------------------------------------------------------\n1/1/1                     &lt;==&gt; sw-spine02      1/1/1  Aruba JL635A  GL.10.06.0010\n1/1/3                     ===&gt;                 00:00:00:00:00:00 mgmt1\n1/1/4                     ===&gt; ncn-test        bb:bb:bb:bb:bb:bb mgmt1 Linux ncn-test\n\n\nsw-spine02 Aruba JL635A  GL.10.06.0010\nbb:bb:bb:bb:bb:bb\n----------------------------------------------------------------------------------------------------\n1/1/1                     &lt;==&gt; sw-spine01      1/1/1  Aruba JL635A  GL.10.06.0010\n\n\n00:00:00:00:00:00\n192.168.2.2:vlan3, 192.168.1.2:vlan1\n----------------------------------------------------------------------------------------------------\n00:00:00:00:00:00 mgmt1   &lt;=== sw-spine01      1/1/3\n\n\nncn-test Linux ncn-test2\nbb:bb:bb:bb:bb:bb\n----------------------------------------------------------------------------------------------------\nbb:bb:bb:bb:bb:bb mgmt1   &lt;=== sw-spine01      1/1/4\n</code></pre>"},{"location":"_build/markdown/examples_output/#validate-shcd","title":"Validate SHCD","text":"<p>CANU can be used to validate that an SHCD (SHasta Cabling Diagram) passes basic validation checks.</p> <ul> <li> <p>The <code>--architecture / -a</code> flag is used to set the architecture of the system, either TDS, Full, or V1..</p> </li> <li> <p>Use the <code>--tabs</code> flag to select which tabs on the spreadsheet will be included.</p> </li> <li> <p>The <code>--corners</code> flag is used to input the upper left and lower right corners of the table on each tab of the worksheet. The table should contain the 11 headers: Source, Rack, Location, Slot, (Blank), Port, Destination, Rack, Location, (Blank), Port. If the corners are not specified, you will be prompted to enter them for each tab.</p> </li> </ul> <p>To check an SHCD run: <code>canu validate shcd -a tds --shcd FILENAME.xlsx --tabs 25G_10G,NMN,HMN --corners I14,S25,I16,S22,J20,T39</code></p> <pre><code>canu validate shcd -a tds --shcd FILENAME.xlsx --tabs 25G_10G,NMN,HMN --corners I14,S25,I16,S22,J20,T39\n</code></pre> <p>Potential output:</p> <pre><code>SHCD Node Connections\n------------------------------------------------------------\n0: sw-spine-001 connects to 6 nodes: [1, 2, 3, 4, 5, 6]\n1: sw-spine-002 connects to 6 nodes: [0, 2, 3, 4, 5, 6]\n2: sw-leaf-bmc-001 connects to 2 nodes: [0, 1]\n3: uan001 connects to 2 nodes: [0, 1]\n4: ncn-s001 connects to 2 nodes: [0, 1]\n5: ncn-w001 connects to 2 nodes: [0, 1]\n6: ncn-m001 connects to 2 nodes: [0, 1]\n\nWarnings\n\nNode type could not be determined for the following\n------------------------------------------------------------\nCAN switch\n</code></pre> <p>The SHCD can easily be converted into CCJ by using by using the <code>--json</code> flag and outputting to a file by <code>canu validate shcd --shcd SHCD.xlsx --json --out paddle.json</code></p>"},{"location":"_build/markdown/examples_output/#validate-paddle","title":"Validate Paddle","text":"<p>CANU can be used to validate that a CCJ (CSM Cabling JSON) passes basic validation checks.</p> <p>To validate a paddle CCJ run: <code>canu validate paddle --ccj paddle.json</code></p> <pre><code>canu validate paddle --ccj paddle.json\n</code></pre> <p>Potential output:</p> <pre><code>CCJ Node Connections\n------------------------------------------------------------\n0: sw-spine-001 connects to 6 nodes: [1, 2, 3, 4, 5, 6]\n1: sw-spine-002 connects to 6 nodes: [0, 2, 3, 4, 5, 6]\n2: sw-leaf-bmc-001 connects to 2 nodes: [0, 1]\n3: uan001 connects to 2 nodes: [0, 1]\n4: ncn-s001 connects to 2 nodes: [0, 1]\n5: ncn-w001 connects to 2 nodes: [0, 1]\n6: ncn-m001 connects to 2 nodes: [0, 1]\n</code></pre>"},{"location":"_build/markdown/examples_output/#validate-network-cabling","title":"Validate Network Cabling","text":"<p>CANU can be used to validate that network cabling passes basic validation checks.</p> <ul> <li> <p>The <code>--architecture / -a</code> flag is used to set the architecture of the system, either TDS, Full, or V1.</p> </li> <li> <p>To enter a comma separated list of IP addresses to the <code>---ips</code> flag. To read the IP addresses from a file, make sure the file has one IP address per line, and use the flag like <code>--ips-file FILENAME</code> to input the file.</p> </li> </ul> <p>To validate the cabling run: <code>canu validate network cabling -a tds --ips 192.168.1.1,192.168.1.2 --username USERNAME --password PASSWORD</code></p> <pre><code>canu validate network cabling -a tds --ips 192.168.1.1,192.168.1.2 --username USERNAME --password PASSWORD\n</code></pre> <p>Potential output:</p> <pre><code>Cabling Node Connections\n------------------------------------------------------------\n0: sw-spine-001 connects to 10 nodes: [1, 2, 3, 4]\n1: ncn-m001 connects to 2 nodes: [0, 4]\n2: ncn-w001 connects to 2 nodes: [0, 4]\n3: ncn-s001 connects to 2 nodes: [0, 4]\n4: sw-spine-002 connects to 10 nodes: [0, 1, 2, 3 ]\n\nWarnings\n\nNode type could not be determined for the following\n------------------------------------------------------------\nsw-leaf-001\nsw-spine-001     1/1/1     ===&gt; aa:aa:aa:aa:aa:aa\nsw-spine-001     1/1/2     ===&gt; 1/1/1 CFCANB4S1 Aruba JL479A  TL.10.03.0081\nsw-spine-001     1/1/3     ===&gt; 1/1/3 sw-leaf-001 Aruba JL663A  FL.10.06.0010\nsw-spine-002     1/1/4     ===&gt; bb:bb:bb:bb:bb:bb\nsw-spine-002     1/1/5     ===&gt; 1/1/2 CFCANB4S1 Aruba JL479A  TL.10.03.0081\nsw-spine-002     1/1/6     ===&gt; 1/1/6 sw-leaf-001 Aruba JL663A  FL.10.06.0010\nNodes that show up as MAC addresses might need to have LLDP enabled.\n\nThe following nodes should be renamed\n------------------------------------------------------------\nsw-leaf01 should be renamed (could not identify node)\nsw-spine01 should be renamed sw-spine-001\nsw-spine02 should be renamed sw-spine-002\n</code></pre> <p>If there are any nodes that cannot be determined or should be renamed, there will be warning tables that show the details.</p>"},{"location":"_build/markdown/examples_output/#validate-shcd-and-cabling","title":"Validate SHCD and Cabling","text":"<p>CANU can be used to validate an SHCD against the current network cabling.</p> <ul> <li> <p>The <code>--csm</code> flag is used to set the CSM version of the system.</p> </li> <li> <p>The <code>--architecture / -a</code> flag is used to set the architecture of the system, either TDS, Full, or V1.</p> </li> <li> <p>Use the <code>--tabs</code> flag to select which tabs on the spreadsheet will be included.</p> </li> <li> <p>The <code>--corners</code> flag is used to input the upper left and lower right corners of the table on each tab of the worksheet. The table should contain the 11 headers: Source, Rack, Location, Slot, (Blank), Port, Destination, Rack, Location, (Blank), Port. If the corners are not specified, you will be prompted to enter them for each tab.</p> </li> <li> <p>To enter a comma separated list of IP addresses to the <code>---ips</code> flag. To read the IP addresses from a file, make sure the file has one IP address per line, and use the flag like <code>--ips-file FILENAME</code> to input the file.</p> </li> </ul> <p>To validate an SHCD against the cabling run: <code>canu validate shcd-cabling --csm 1.2 -a tds --shcd FILENAME.xlsx --tabs 25G_10G,NMN --corners I14,S49,I16,S22 --ips 192.168.1.1,192.168.1.2 --username USERNAME --password PASSWORD</code></p> <pre><code>canu validate shcd-cabling --csm 1.2 -a tds --shcd FILENAME.xlsx --tabs 25G_10G,NMN --corners I14,S49,I16,S22 --ips 192.168.1.1,192.168.1.2 --username USERNAME --password PASSWORD\n</code></pre> <p>Potential output:</p> <pre><code>====================================================================================================\nSHCD vs Cabling\n====================================================================================================\n\nncn-m001\nRack: x3000    Elevation: u14\n--------------------------------------------------------------------------------\nPort   SHCD                     Cabling\n--------------------------------------------------------------------------------\n1      sw-spine-001:5           sw-spine-001:5\n2      sw-spine-002:5           sw-spine-002:5\n\nncn-s001\nRack: x3000    Elevation: u15\n--------------------------------------------------------------------------------\nPort   SHCD                     Cabling\n--------------------------------------------------------------------------------\n1      sw-spine-001:6           None\n2      sw-spine-002:6           None\n\nncn-w001\nRack: x3000    Elevation: u16\n--------------------------------------------------------------------------------\nPort   SHCD                     Cabling\n--------------------------------------------------------------------------------\n1      sw-spine-001:7           sw-spine-001:7\n2      sw-spine-002:7           sw-spine-002:7\n\nsw-spine-001\nRack: x3000    Elevation: u17\n--------------------------------------------------------------------------------\nPort   SHCD                     Cabling\n--------------------------------------------------------------------------------\n1      sw-spine-002:1           sw-spine-002:1\n2      sw-spine-002:2           sw-spine-002:2\n3      uan001:pcie-slot1:1      aa:aa:aa:aa:aa:aa Cray, Inc.\n5      ncn-m001:pcie-slot1:1    ncn-m001:pcie-slot1:1\n6      ncn-s001:pcie-slot1:1    b4:2e:99:aa:bb:cc GIGA-BYTE TECHNOLOGY CO.,LTD.\n7      ncn-w001:pcie-slot1:1    ncn-w001:pcie-slot1:1\n\nsw-spine-002\nRack: x3000    Elevation: u18\n--------------------------------------------------------------------------------\nPort   SHCD                     Cabling\n--------------------------------------------------------------------------------\n1      sw-spine-001:1           sw-spine-001:1\n2      sw-spine-001:2           sw-spine-001:2\n3      uan001:pcie-slot1:2      bb:bb:bb:bb:bb:bb Cray, Inc.\n5      ncn-m001:pcie-slot1:2    ncn-m001:pcie-slot1:2\n6      ncn-s001:pcie-slot1:2    b8:59:9f:aa:bb:cc Mellanox Technologies, Inc.\n7      ncn-w001:pcie-slot1:2    ncn-w001:pcie-slot1:2\n\nuan001\nRack: x3000    Elevation: u19\n--------------------------------------------------------------------------------\nPort   SHCD                     Cabling\n--------------------------------------------------------------------------------\n1      sw-spine-001:3           None\n2      sw-spine-002:3           None\n\n\n====================================================================================================\nSHCD Warnings\n====================================================================================================\n\nWarnings\n\nNode type could not be determined for the following\n------------------------------------------------------------\nSheet: HMN\nCell: R21      Name: SITE\n\n\n====================================================================================================\nCabling Warnings\n====================================================================================================\n\nNode type could not be determined for the following\n------------------------------------------------------------\nsw-spine-001     1/1/3     ===&gt; aa:aa:aa:aa:aa:aa Cray, Inc.\nsw-spine-002     1/1/3     ===&gt; bb:bb:bb:bb:bb:bb Cray, Inc.\nNodes that show up as MAC addresses might need to have LLDP enabled.\n</code></pre> <p>The output of the <code>validate shcd-cabling</code> command will show a port by port comparison between the devices found in the SHCD and devices found on the network. If there is a difference in what is found connected to a devices port in SHCD and Cabling, the line will be highlighted in red.</p>"},{"location":"_build/markdown/examples_output/#validate-paddle-and-cabling","title":"Validate Paddle and Cabling","text":"<p>CANU can be used to validate aCCJ paddle against the current network cabling.</p> <ul> <li> <p>The <code>--csm</code> flag is used to set the CSM version of the system.</p> </li> <li> <p>The <code>--ccj</code> flag is used to input the CCJ file.</p> </li> <li> <p>To enter a comma separated list of IP addresses to the <code>---ips</code> flag. To read the IP addresses from a file, make sure the file has one IP address per line, and use the flag like <code>--ips-file FILENAME</code> to input the file.</p> </li> </ul> <p>To validate an SHCD against the cabling run: <code>canu validate paddle-cabling --csm 1.2 --ccj paddle.json --ips 192.168.1.1,192.168.1.2 --username USERNAME --password PASSWORD</code></p> <pre><code>canu validate paddle-cabling --csm 1.2 --ccj paddle.json --ips 192.168.1.1,192.168.1.2 --username USERNAME --password PASSWORD\n</code></pre> <p>Potential output:</p> <pre><code>====================================================================================================\nCCJ vs Cabling\n====================================================================================================\n\nncn-m001\nRack: x3000    Elevation: u14\n--------------------------------------------------------------------------------\nPort   CCJ                      Cabling\n--------------------------------------------------------------------------------\n1      sw-spine-001:5           sw-spine-001:5\n2      sw-spine-002:5           sw-spine-002:5\n\nncn-s001\nRack: x3000    Elevation: u15\n--------------------------------------------------------------------------------\nPort   CCJ                      Cabling\n--------------------------------------------------------------------------------\n1      sw-spine-001:6           None\n2      sw-spine-002:6           None\n\nncn-w001\nRack: x3000    Elevation: u16\n--------------------------------------------------------------------------------\nPort   CCJ                      Cabling\n--------------------------------------------------------------------------------\n1      sw-spine-001:7           sw-spine-001:7\n2      sw-spine-002:7           sw-spine-002:7\n\nsw-spine-001\nRack: x3000    Elevation: u17\n--------------------------------------------------------------------------------\nPort   CCJ                      Cabling\n--------------------------------------------------------------------------------\n1      sw-spine-002:1           sw-spine-002:1\n2      sw-spine-002:2           sw-spine-002:2\n3      uan001:pcie-slot1:1      aa:aa:aa:aa:aa:aa Cray, Inc.\n5      ncn-m001:pcie-slot1:1    ncn-m001:pcie-slot1:1\n6      ncn-s001:pcie-slot1:1    b4:2e:99:aa:bb:cc GIGA-BYTE TECHNOLOGY CO.,LTD.\n7      ncn-w001:pcie-slot1:1    ncn-w001:pcie-slot1:1\n\nsw-spine-002\nRack: x3000    Elevation: u18\n--------------------------------------------------------------------------------\nPort   CCJ                      Cabling\n--------------------------------------------------------------------------------\n1      sw-spine-001:1           sw-spine-001:1\n2      sw-spine-001:2           sw-spine-001:2\n3      uan001:pcie-slot1:2      bb:bb:bb:bb:bb:bb Cray, Inc.\n5      ncn-m001:pcie-slot1:2    ncn-m001:pcie-slot1:2\n6      ncn-s001:pcie-slot1:2    b8:59:9f:aa:bb:cc Mellanox Technologies, Inc.\n7      ncn-w001:pcie-slot1:2    ncn-w001:pcie-slot1:2\n\nuan001\nRack: x3000    Elevation: u19\n--------------------------------------------------------------------------------\nPort   CCJ                      Cabling\n--------------------------------------------------------------------------------\n1      sw-spine-001:3           None\n2      sw-spine-002:3           None\n\n\n====================================================================================================\nCCJ  Warnings\n====================================================================================================\n\n====================================================================================================\nCabling Warnings\n====================================================================================================\n\nNode type could not be determined for the following\n------------------------------------------------------------\nsw-spine-001     1/1/3     ===&gt; aa:aa:aa:aa:aa:aa Cray, Inc.\nsw-spine-002     1/1/3     ===&gt; bb:bb:bb:bb:bb:bb Cray, Inc.\nNodes that show up as MAC addresses might need to have LLDP enabled.\n</code></pre> <p>The output of the <code>validate paddle-cabling</code> command will show a port by port comparison between the devices found in the CCJ and devices found on the network. If there is a difference in what is found connected to a devices port in CCJ and Cabling, the line will be highlighted in red.</p>"},{"location":"_build/markdown/examples_output/#validate-network-bgp","title":"Validate Network BGP","text":"<p>CANU can be used to validate BGP neighbors. All neighbors of a switch must return status Established or the verification will fail.</p> <ul> <li>The default asn is set to 65533 if it needs to be changed, use the flag <code>--asn NEW_ASN_NUMBER</code> to set the new number</li> </ul> <p>If you want to see the individual status of all the neighbors of a switch, use the <code>--verbose</code> flag.</p> <p>To validate BGP run: <code>canu validate network bgp --ips 192.168.1.1,192.168.1.2 --username USERNAME --password PASSWORD</code></p> <pre><code>canu validate network bgp --username USERNAME --password PASSWORD\n</code></pre> <p>Potential output:</p> <pre><code>BGP Neighbors Established\n--------------------------------------------------\nPASS - IP: 192.168.1.1 Hostname: sw-spine01\nPASS - IP: 192.168.1.2 Hostname: sw-spine01\n</code></pre> <p>If any of the spine switch neighbors for a connection other than Established, the switch will FAIL validation.</p>"},{"location":"_build/markdown/examples_output/#generate-switch-config","title":"Generate Switch Config","text":"<p>To see all the lags that are generated, see lags</p> <p>CANU can be used to generate switch config.</p> <p>In order to generate switch config, a valid SHCD or CCJ must be passed in and system variables must be read in from any SLS data, including CSI output or the SLS API.</p>"},{"location":"_build/markdown/examples_output/#csi-input_1","title":"CSI Input","text":"<ul> <li>In order to parse CSI output, use the <code>--sls-file FILE</code> flag to pass in the folder where the <code>sls_file.json</code> file is located.</li> </ul> <p>The sls_input_file.json file is generally stored in one of two places depending on how far the system is in the install process.</p> <ul> <li> <p>Early in the install process, when running off of the LiveCD the sls_input_file.json file is normally found in the the directory <code>/var/www/ephemeral/prep/SYSTEMNAME/</code></p> </li> <li> <p>Later in the install process, the sls_input_file.json file is generally in <code>/mnt/pitdata/prep/SYSTEMNAME/</code></p> </li> </ul>"},{"location":"_build/markdown/examples_output/#sls-api-input_1","title":"SLS API Input","text":"<ul> <li>To parse the Shasta SLS API for IP addresses, ensure that you have a valid token. The token file can either be passed in with the <code>--auth-token TOKEN_FILE</code> flag, or it can be automatically read if the environmental variable SLS_TOKEN is set. The SLS address is default set to api-gw-service-nmn.local, if you are operating on a system with a different address, you can set it with the <code>--sls-address SLS_ADDRESS</code> flag.</li> </ul>"},{"location":"_build/markdown/examples_output/#paddle-ccj-input","title":"Paddle / CCJ Input","text":"<ul> <li> <p>The <code>--csm</code> flag is used to set the CSM version of the system.</p> </li> <li> <p>The <code>--ccj</code> flag is used to input the CCJ file.</p> </li> </ul> <p>To generate switch config run: <code>canu generate switch config --csm 1.2 --ccj paddle.json --sls-file SLS_FILE --name SWITCH_HOSTNAME --out FILENAME</code></p>"},{"location":"_build/markdown/examples_output/#shcd-input","title":"SHCD Input","text":"<ul> <li> <p>The <code>--csm</code> flag is used to set the CSM version of the system.</p> </li> <li> <p>The <code>--architecture / -a</code> flag is used to set the architecture of the system, either TDS, Full, or V1..</p> </li> <li> <p>Use the <code>--tabs</code> flag to select which tabs on the spreadsheet will be included.</p> </li> <li> <p>The <code>--corners</code> flag is used to input the upper left and lower right corners of the table on each tab of the worksheet. The table should contain the 11 headers: Source, Rack, Location, Slot, (Blank), Port, Destination, Rack, Location, (Blank), Port. If the corners are not specified, you will be prompted to enter them for each tab.</p> </li> </ul> <p>To generate config for a specific switch, a hostname must also be passed in using the <code>--name HOSTNAME</code> flag. To output the config to a file, append the <code>--out FILENAME</code> flag.</p> <p>To generate switch config run: <code>canu generate switch config --csm 1.2 -a full --shcd FILENAME.xlsx --tabs 'INTER_SWITCH_LINKS,NON_COMPUTE_NODES,HARDWARE_MANAGEMENT,COMPUTE_NODES' --corners 'J14,T44,J14,T48,J14,T24,J14,T23' --sls-file SLS_FILE --name SWITCH_HOSTNAME --out FILENAME</code></p> <pre><code>canu generate switch config --csm 1.2 -a full --shcd FILENAME.xlsx --tabs INTER_SWITCH_LINKS,NON_COMPUTE_NODES,HARDWARE_MANAGEMENT,COMPUTE_NODES --corners J14,T44,J14,T48,J14,T24,J14,T23 --sls-file SLS_FILE --name sw-spine-001\n</code></pre> <p>Potential output:</p> <pre><code>hostname sw-spine-001\nuser admin group administrators password plaintext\nbfd\nno ip icmp redirect\nvrf CAN\nvrf keepalive\n...\n</code></pre>"},{"location":"_build/markdown/examples_output/#generate-switch-configs-including-custom-configurations","title":"Generate Switch Configs Including Custom Configurations","text":"<p>Pass in a switch config file that CANU will inject into the generated config. A use case would be to add custom site connections. This config file will overwrite previously generate config.</p> <p>The <code>custom-config</code> file type is YAML and a single file can be used for multiple switches. You will need to specify the switch name and what config inject.  The <code>custom-config</code> feature is using the hierarchical configuration library, documentation can be found here https://netdevops.io/hier_config/.</p> <p>custom config file examples</p> <p>Aruba</p> <pre><code>sw-spine-001:  |\n    ip route 0.0.0.0/0 10.103.15.185\n    interface 1/1/36\n        no shutdown\n        ip address 10.103.15.186/30\n        exit\n    system interface-group 3 speed 10g\n    interface 1/1/2\n        no shutdown\n        mtu 9198\n        description sw-spine-001:16==&gt;ion-node\n        no routing\n        vlan access 7\n        spanning-tree bpdu-guard\n        spanning-tree port-type admin-edge\nsw-spine-002:  |\n    ip route 0.0.0.0/0 10.103.15.189\n    interface 1/1/36\n        no shutdown\n        ip address 10.103.15.190/30\n        exit\n    system interface-group 3 speed 10g\nsw-leaf-bmc-001:  |\n    interface 1/1/20\n        no routing\n        vlan access 4\n        spanning-tree bpdu-guard\n        spanning-tree port-type admin-edge\n</code></pre> <p>Mellanox/Dell</p> <pre><code>sw-spine-001:  |\n    interface ethernet 1/1 speed 10G force\n    interface ethernet 1/1 description \"sw-spine02-1/16\"\n    interface ethernet 1/1 no switchport force\n    interface ethernet 1/1 ip address 10.102.255.14/30 primary\n    interface ethernet 1/1 dcb priority-flow-control mode on force\n    ip route vrf default 0.0.0.0/0 10.102.255.13\nsw-spine-002:  |\n    interface ethernet 1/16 speed 10G force\n    interface ethernet 1/16 description \"sw-spine01-1/16\"\n    interface ethernet 1/16 no switchport force\n    interface ethernet 1/16 ip address 10.102.255.34/30 primary\n    interface ethernet 1/16 dcb priority-flow-control mode on force\n    ip route vrf default 0.0.0.0/0 10.102.255.33\nsw-leaf-bmc-001:  |\n    interface ethernet1/1/12\n      description sw-leaf-bmc-001:12==&gt;cn003:2\n      no shutdown\n      switchport access vlan 4\n      mtu 9216\n      flowcontrol receive off\n      flowcontrol transmit off\n      spanning-tree bpduguard enable\n      spanning-tree port type edge\n    interface vlan7\n        description CMN\n        no shutdown\n        ip vrf forwarding Customer\n        mtu 9216\n        ip address 10.102.4.100/25\n        ip access-group cmn-can in\n        ip access-group cmn-can out\n        ip ospf 2 area 0.0.0.0\n</code></pre> <p>To generate switch configuration with custom config injection.</p> <pre><code>canu generate switch config --csm 1.2 -a full --shcd FILENAME.xlsx --tabs INTER_SWITCH_LINKS,NON_COMPUTE_NODES,HARDWARE_MANAGEMENT,COMPUTE_NODES --corners J14,T44,J14,T48,J14,T24,J14,T23 --sls-file SLS_FILE --name sw-spine-001 --custom-config CUSTOM_CONFIG_FILE.yaml\n</code></pre>"},{"location":"_build/markdown/examples_output/#generate-switch-config-while-preserving-lag-s","title":"Generate Switch Config while preserving LAG #s","text":"<p>This option allows you to generate swtich configs while preserving the lag #s of the previous running config.</p> <p>The use case for this is if you have a running system and you don\u2019t want to take an outage to renumber the LAGs.</p> <p>It requires a folder with the config/s backed up.</p> <p>The recommended way to back these configs up is with <code>canu backup</code></p> <pre><code>canu generate switch config -a v1 --csm 1.0 --ccj ccj.json --sls-file sls_input_file.json --name sw-spine-001 --preserve ../backup_configs/\n</code></pre>"},{"location":"_build/markdown/examples_output/#generate-network-config","title":"Generate Network Config","text":"<p>To see all the lags that are generated, see lags</p> <p>CANU can also generate switch config for all the switches on a network.</p> <p>In order to generate network config, a valid SHCD or CCJ must be passed in and system variables must be read in from either CSI output or the SLS API. The instructions are exactly the same as the above except there will not be a hostname and a folder must be specified for config output using the <code>--folder FOLDERNAME</code> flag.</p> <p>To generate switch config from a CCJ paddle run: <code>canu generate network config --csm 1.2 --ccj paddle.json --sls-file SLS_FILE --folder FOLDERNAME</code></p> <p>To generate switch config from SHCD run: <code>canu generate network config --csm 1.2 -a full --shcd FILENAME.xlsx --tabs 'INTER_SWITCH_LINKS,NON_COMPUTE_NODES,HARDWARE_MANAGEMENT,COMPUTE_NODES' --corners 'J14,T44,J14,T48,J14,T24,J14,T23' --sls-file SLS_FILE --folder FOLDERNAME</code></p> <pre><code>canu generate network config --csm 1.2 -a full --shcd FILENAME.xlsx --tabs INTER_SWITCH_LINKS,NON_COMPUTE_NODES,HARDWARE_MANAGEMENT,COMPUTE_NODES --corners J14,T44,J14,T48,J14,T24,J14,T23 --sls-file SLS_FILE --folder switch_config\n</code></pre> <p>Potential output:</p> <pre><code>sw-spine-001 Config Generated\nsw-spine-002 Config Generated\nsw-leaf-001 Config Generated\nsw-leaf-002 Config Generated\nsw-leaf-003 Config Generated\nsw-leaf-004 Config Generated\nsw-cdu-001 Config Generated\nsw-cdu-002 Config Generated\nsw-leaf-bmc-001 Config Generated\n\n</code></pre>"},{"location":"_build/markdown/examples_output/#generate-network-config-with-custom-config-injection","title":"Generate Network Config With Custom Config Injection","text":"<p>This option allows extension and maintenance of switch configurations beyond plan-of-record. A YAML file expresses custom configurations across the network and these configurations are merged with the plan-of-record configurations.</p> <p>WARNING: Extreme diligence should be used applying custom configurations which override plan-of-record generated configurations. Custom configurations will overwrite generated configurations! Override/overwrite is by design to support and document cases where site-interconnects demand \u201cnonstandard\u201d configurations or a bug must be worked around.</p> <p>To generate network configuration with custom config injection run</p> <pre><code>canu generate network config --csm 1.2 -a full --shcd FILENAME.xlsx --tabs INTER_SWITCH_LINKS,NON_COMPUTE_NODES,HARDWARE_MANAGEMENT,COMPUTE_NODES --corners J14,T44,J14,T48,J14,T24,J14,T23 --sls-file SLS_FILE --folder switch_config --custom-config CUSTOM_CONFIG_FILE.yaml\n</code></pre>"},{"location":"_build/markdown/examples_output/#generate-network-config-while-preserving-lag-s","title":"Generate Network Config while preserving LAG #s","text":"<p>This option allows you to generate swtich configs while preserving the lag #s of the previous running config.</p> <p>The use case for this is if you have a running system and you don\u2019t want to take an outage to renumber the LAGs.</p> <p>It requires a folder with the config/s backed up.</p> <p>The recommended way to back these configs up is with <code>backup network</code></p> <pre><code>canu generate network config --csm 1.0 -a full --shcd FILENAME.xlsx --tabs INTER_SWITCH_LINKS,NON_COMPUTE_NODES,HARDWARE_MANAGEMENT,COMPUTE_NODES --corners J14,T44,J14,T48,J14,T24,J14,T23 --sls-file SLS_FILE --folder switch_config --preserve FOLDER_WITH_SWITCH_CONFIGS\n</code></pre>"},{"location":"_build/markdown/examples_output/#validate-switch-config","title":"Validate Switch Config","text":"<p>After config has been generated, CANU can validate the generated config against running switch config. The running config can be from either an IP address, or a config file.</p> <ul> <li> <p>To get running config from an IP address, use the flags <code>--ip 192.168.1.1 --username USERNAME --password PASSWORD</code>.</p> </li> <li> <p>To get running config from a file, use the flag <code>--running RUNNING_CONFIG.cfg</code> instead.</p> </li> </ul> <p>After running the <code>validate switch config</code> command, you will be shown a line by line comparison of the currently running switch config against the config file that was passed in. You will also be given a list of remediation commands that can be typed into the switch to get the running config to match the config file. There will be a summary table at the end highlighting the most important differences between the configs.</p> <ul> <li> <p>Lines that are red and start with a <code>-</code> are in the running config, but not in the config file</p> </li> <li> <p>Lines that are green and start with a <code>+</code> are not in the running config, but are in the config file</p> </li> <li> <p>Lines that are blue and start with a <code>?</code> are attempting to point out specific line differences</p> </li> </ul> <p>To validate switch config run: <code>canu validate switch config --ip 192.168.1.1 --username USERNAME --password PASSWORD --generated SWITCH_CONFIG.cfg</code></p> <pre><code>canu validate switch config --ip 192.168.1.1 --generated sw-spine-001.cfg\n</code></pre> <p>Potential output:</p> <pre><code>hostname sw-spine-001\n- ntp server 192.168.1.10\n?                       ^\n+ ntp server 192.168.1.16\n?                       ^\n  vlan 1\n  vlan 2\n-     name RVR_NMN\n?          ----\n+     name NMN\n      apply access-list ip nmn-hmn in\n      apply access-list ip nmn-hmn out\n...\n\nSwitch: sw-leaf-001 (192.168.1.1)\nDifferences\n-------------------------------------------------------------------------\nIn Generated Not In Running (+)     |  In Running Not In Generated (-)\n-------------------------------------------------------------------------\nTotal Additions:                 7  |  Total Deletions:                 7\nHostname:                        1  |  Hostname:                        1\nInterface:                       2  |  Interface:                       1\nInterface Lag:                   1  |  Interface Lag:                   2\nSpanning Tree:                   2  |  Spanning Tree:                   3\nRouter:                          1  |\n</code></pre>"},{"location":"_build/markdown/examples_output/#validate-network-config","title":"Validate Network Config","text":"<p>Aruba support only.</p> <p>The <code>validate network config</code> command works almost the same as the above <code>validate switch config</code> command. There are three options for passing in the running config:</p> <ul> <li> <p>A comma separated list of ips using <code>--ips 192.168.1.1,192.168.1.</code></p> </li> <li> <p>A file of ip addresses, one per line using the flag <code>--ips-file ips.txt</code></p> </li> <li> <p>A directory containing the running configuration <code>--running RUNNING/CONFIG/DIRECTORY</code></p> </li> </ul> <p>A directory of generated config files will also need to be passed in using <code>--generated GENERATED/CONFIG/DIRECTORY</code>. There will be a summary table for each switch highlighting the most important differences between the running switch config and the generated config files.</p> <p>To validate switch config run: <code>canu validate network config --ips-file ips.txt --username USERNAME --password PASSWORD --generated /CONFIG/FOLDER</code></p> <pre><code>canu validate network config --csm 1.2 --ips-file ips.txt --generated /CONFIG/FOLDER\n</code></pre> <p>Potential output:</p> <pre><code>Switch: sw-leaf-001 (192.168.1.1)\nDifferences\n-------------------------------------------------------------------------\nIn Generated Not In Running (+)     |  In Running Not In Generated (-)\n-------------------------------------------------------------------------\nTotal Additions:                 7  |  Total Deletions:                 7\nHostname:                        1  |  Hostname:                        1\nInterface:                       2  |  Interface:                       1\nInterface Lag:                   1  |  Interface Lag:                   2\nSpanning Tree:                   2  |  Spanning Tree:                   3\nRouter:                          1  |\n\nSwitch: sw-spine-001 (192.168.1.2)\nDifferences\n-------------------------------------------------------------------------\nIn Generated Not In Running (+)     |  In Running Not In Generated (-)\n-------------------------------------------------------------------------\nTotal Additions:                 3  |  Total Deletions:                 2\nInterface:                       2  |  Interface:                       1\nInterface Lag:                   1  |\n\n...\n\nErrors\n----------------------------------------------------------------------------------------------------\n192.168.1.3      - Timeout error connecting to switch 192.168.1.3, check the entered username, IP address and password.\n</code></pre>"},{"location":"_build/markdown/examples_output/#file-output-and-json","title":"File Output and JSON","text":"<p>To output the results of the config validation command to a file, append the <code>--out FILENAME</code> flag. To get the results as JSON, use the <code>--json</code> flag.</p>"},{"location":"_build/markdown/examples_output/#cache","title":"Cache","text":"<p>There are several commands to help with the canu cache:</p> <ul> <li> <p><code>canu cache location</code> will tell you the folder where your cache is located</p> </li> <li> <p><code>canu cache print</code> will print a colored version of your cache to the screen</p> </li> <li> <p><code>canu cache delete</code> will delete your cache file, the file will be created again on the next canu command</p> </li> </ul>"},{"location":"_build/markdown/examples_output/#test-the-network","title":"Test The Network","text":"<p>CANU has the ability to run a set of tests against all of the switches in the management network. It is utilizing the nornir automation framework and additional nornir plugins to do this.</p> <p>More info can be found at</p> <ul> <li> <p>https://nornir.tech/2021/08/06/testing-your-network-with-nornir-testsprocessor/</p> </li> <li> <p>https://github.com/nornir-automation/nornir</p> </li> <li> <p>https://github.com/dmulyalin/salt-nornir</p> </li> </ul> <p>Required Input You can either use an SLS file or pull the SLS file from the API-Gateway using a token.</p> <ul> <li> <p><code>--sls-file</code></p> </li> <li> <p><code>--auth-token</code></p> </li> </ul> <p>Options</p> <ul> <li> <p><code>--log</code> outputs the nornir debug logs</p> </li> <li> <p><code>--network [HMN|CMN]</code> This gives the user the ability to connect to the switches over the CMN.  This allows the use of this tool from outside the Mgmt Network.  The default network used is the HMN.</p> </li> <li> <p><code>--json</code> outputs the results in json format.</p> </li> <li> <p><code>--password</code> prompts if password is not entered</p> </li> <li> <p><code>--username</code> defaults to admin</p> </li> </ul>"},{"location":"_build/markdown/examples_output/#adding-tests","title":"Adding tests","text":"<p>Additional tests can be easily added by updating the .yaml file at <code>canu/test/\\*/test_suite.yaml</code> More information on tests and how to write them can be found at https://nornir.tech/2021/08/06/testing-your-network-with-nornir-testsprocessor/</p> <p>Example test</p> <pre><code>- name: Software version test\n  task: show version\n  test: contains\n  pattern: \"10.08.1021\"\n  err_msg: Software version is wrong\n  device:\n    - cdu\n    - leaf\n    - leaf-bmc\n    - spine\n</code></pre> <p>This test logs into the cdu, leaf, leaf-bmc, and spine switches and runs the command <code>show version</code> and checks that <code>10.09.0010</code> is in the output.  If it\u2019s not the test fails.</p>"},{"location":"_build/markdown/examples_output/#backup-network","title":"Backup Network","text":"<p>Canu can backup the running configurations for switches in the management network. It backs up the entire switch inventory from SLS by defualt, if you want to backup just one switch use the <code>--name</code> flag.</p> <p>Required Input You can either use an SLS file or pull the SLS file from the API-Gateway using a token.</p> <ul> <li> <p><code>--sls-file</code></p> </li> <li> <p><code>--folder</code> \u201cFolder to store running config files\u201d</p> </li> </ul> <p>Options</p> <ul> <li> <p><code>--log</code> outputs the nornir debug logs</p> </li> <li> <p><code>--network [HMN|CMN]</code> This gives the user the ability to connect to the switches over the CMN.  This allows the use of this tool from outside the Mgmt Network.  The default network used is the HMN.</p> </li> <li> <p><code>--password</code> prompts if password is not entered</p> </li> <li> <p><code>--username</code> defaults to admin</p> </li> <li> <p><code>--unsanitized</code> Retains sensitive data such as passwords and SNMP credentials.  The default is to sanitize the config.</p> </li> <li> <p><code>--name</code> The name of the switch that you want to back up. e.g. \u2018sw-spine-001\u2019</p> </li> </ul> <p>Example</p> <pre><code>canu backup network --sls-file ./sls_input_file.json --network CMN --folder ./ --unsanitized\n</code></pre> <p>Potential output:</p> <pre><code>Running Configs Saved\n---------------------\nsw-spine-001.cfg\nsw-spine-002.cfg\nsw-leaf-001.cfg\nsw-leaf-002.cfg\nsw-leaf-003.cfg\nsw-leaf-004.cfg\nsw-leaf-bmc-001.cfg\nsw-leaf-bmc-002.cfg\nsw-cdu-001.cfg\nsw-cdu-002.cfg\n</code></pre>"},{"location":"_build/markdown/examples_output/#send-command","title":"Send Command","text":"<p>Canu can send commands to the switches via the CLI. This is primarily used for <code>show</code> commands since we do not elevate to configuration mode.</p> <p>You can either use an SLS file or pull the SLS file from the API-Gateway using a token.</p> <ul> <li> <p><code>--sls-file</code></p> </li> <li> <p><code>--log</code> outputs the nornir debug logs</p> </li> <li> <p><code>--network [HMN|CMN]</code> This gives the user the ability to connect to the switches over the CMN.  This allows the use of this tool from outside the Mgmt Network.  The default network used is the HMN.</p> </li> <li> <p><code>--command</code> command to send to the switch/switches.</p> </li> <li> <p><code>--password</code> prompts if password is not entered</p> </li> <li> <p><code>--username</code> defaults to admin</p> </li> <li> <p><code>--name</code> The name of the switch that you want to back up. e.g. \u2018sw-spine-001\u2019</p> </li> </ul> <p>Examples</p> <pre><code>canu send command --sls-file ./sls_input_file.json --network cmn --command \"show banner exec\" --name sw-spine-001\n-netmiko_send_command************************************************************\n* sw-spine-001 ** changed : False **********************************************\nvvvv netmiko_send_command ** changed : False vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv INFO\n###############################################################################\n# CSM version:  1.2\n# CANU version: 1.3.2\n###############################################################################\n\n^^^^ END netmiko_send_command ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n</code></pre> <pre><code>canu send command --command 'show version | include \"Version      :\"'\n\\netmiko_send_command************************************************************\n* sw-leaf-bmc-001 ** changed : False *******************************************\nvvvv netmiko_send_command ** changed : False vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv INFO\nVersion      : FL.10.09.0010                                                 \n^^^^ END netmiko_send_command ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n* sw-spine-001 ** changed : False **********************************************\nvvvv netmiko_send_command ** changed : False vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv INFO\nVersion      : GL.10.09.0010                                                 \n^^^^ END netmiko_send_command ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n* sw-spine-002 ** changed : False **********************************************\nvvvv netmiko_send_command ** changed : False vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv INFO\nVersion      : GL.10.09.0010                                                 \n^^^^ END netmiko_send_command ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n</code></pre>"},{"location":"_build/markdown/examples_output/#report-network-version","title":"Report Network Version","text":"<p>Canu reports the version of configuration on the switch.  It reads the exec baner of all the switches and outputs to the screen.</p> <p>Options</p> <ul> <li> <p><code>--sls-file</code></p> </li> <li> <p><code>--network [HMN|CMN]</code> This gives the user the ability to connect to the switches over the CMN.  This allows the use of this tool from outside the Mgmt Network.  The default network used is the HMN.</p> </li> <li> <p><code>--password</code> prompts if password is not entered</p> </li> <li> <p><code>--username</code> defaults to admin</p> </li> </ul> <p>Example</p> <pre><code>canu report network version --sls-file ../sls_input_file.json --network cmn\nPassword: \nSWITCH            CANU VERSION      CSM VERSION\nsw-spine-001      1.5.12            1.2  \nsw-spine-002      1.5.12            1.2  \nsw-leaf-bmc-001   1.5.12            1.2\n</code></pre> <pre><code>canu send command --command 'show version | include \"Version      :\"'\n\\netmiko_send_command************************************************************\n* sw-leaf-bmc-001 ** changed : False *******************************************\nvvvv netmiko_send_command ** changed : False vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv INFO\nVersion      : FL.10.09.0010\n^^^^ END netmiko_send_command ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n* sw-spine-001 ** changed : False **********************************************\nvvvv netmiko_send_command ** changed : False vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv INFO\nVersion      : GL.10.09.0010\n^^^^ END netmiko_send_command ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n* sw-spine-002 ** changed : False **********************************************\nvvvv netmiko_send_command ** changed : False vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv INFO\nVersion      : GL.10.09.0010\n^^^^ END netmiko_send_command ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n</code></pre>"},{"location":"_build/markdown/generate/","title":"canu generate","text":"<p>Canu generate commands.</p> <pre><code>canu generate [OPTIONS] COMMAND [ARGS]...\n</code></pre>"},{"location":"_build/markdown/generate/#network","title":"network","text":"<p>Canu generate network commands.</p> <pre><code>canu generate network [OPTIONS] COMMAND [ARGS]...\n</code></pre>"},{"location":"_build/markdown/generate/#config","title":"config","text":"<p>Generate the config of all switches (Aruba, Dell, or Mellanox) on the network using the SHCD.</p> <p>In order to generate network switch config, a valid SHCD must be passed in and system variables must be read in from either an SLS output file or the SLS API.</p>"},{"location":"_build/markdown/generate/#csi-input","title":"CSI Input","text":"<ul> <li> <p>In order to parse network data using SLS, pass in the file containing SLS JSON data (normally sls_file.json) using the \u2018\u2013sls-file\u2019 flag</p> </li> <li> <p>If used, CSI-generated sls_input_file.json file is generally stored in one of two places depending on how far the system is in the install process.</p> </li> <li> <p>Early in the install process, when running off of the LiveCD the sls_input_file.json file is normally found in the the directory \u2018/var/www/ephemeral/prep/SYSTEMNAME/\u2019</p> </li> <li> <p>Later in the install process, the sls_file.json file is generally in \u2018/mnt/pitdata/prep/SYSTEMNAME/\u2019</p> </li> </ul>"},{"location":"_build/markdown/generate/#sls-api-input","title":"SLS API Input","text":"<ul> <li> <p>To parse the Shasta SLS API for IP addresses, ensure that you have a valid token.</p> </li> <li> <p>The token file can either be passed in with the \u2018\u2013auth-token TOKEN_FILE\u2019 flag, or it can be automatically read if the environmental variable \u2018SLS_TOKEN\u2019 is set.</p> </li> <li> <p>The SLS address is default set to \u2018api-gw-service-nmn.local\u2019.</p> </li> <li> <p>if you are operating on a system with a different address, you can set it with the \u2018\u2013sls-address SLS_ADDRESS\u2019 flag.</p> </li> </ul>"},{"location":"_build/markdown/generate/#shcd-input","title":"SHCD Input","text":"<ul> <li> <p>Use the \u2018\u2013tabs\u2019 flag to select which tabs on the spreadsheet will be included.</p> </li> <li> <p>The \u2018\u2013corners\u2019 flag is used to input the upper left and lower right corners of the table on each tab of the worksheet. If the corners are not specified, you will be prompted to enter them for each tab.</p> </li> <li> <p>The table should contain the 11 headers: Source, Rack, Location, Slot, (Blank), Port, Destination, Rack, Location, (Blank), Port.</p> </li> </ul> <p>Use the \u2018\u2013folder FOLDERNAME\u2019 flag to output all the switch configs to a folder.</p>"},{"location":"_build/markdown/generate/#noqa-d301-b950","title":"noqa: D301, B950","text":"<p>Args:</p> <pre><code>ctx: CANU context settings\ncsm: CSM version\narchitecture: CSM architecture\nccj: Paddle CCJ file\nshcd: SHCD file\ntabs: The tabs on the SHCD file to check, e.g. 10G_25G_40G_100G,NMN,HMN.\ncorners: The corners on each tab, comma separated e.g. \u2018J37,U227,J15,T47,J20,U167\u2019.\nsls_file: Directory containing the CSI json file\nauth_token: Token for SLS authentication\nsls_address: The address of SLS\nfolder: Folder to store config files\npreserve: Folder where switch running configs exist.  This folder should be populated from the \u201ccanu backup network\u201d command.\ncustom_config: yaml file containing customized switch configurations which is merged with the generated config.\nedge: Vendor of the edge router\nreorder: Filters generated configurations through hier_config generate a more natural running-configuration order.\nbgp_control_plane: Network used for BGP control plane\nvrf: Named VRF used for CSM networks\nbond_app_nodes: Generates bonded configuration for application nodes connected the NMN.\n\n\n```\nlog_\n```\n\n: Level of logging.\n</code></pre> <pre><code>canu generate network config [OPTIONS]\n</code></pre>"},{"location":"_build/markdown/generate/#options","title":"Options","text":""},{"location":"_build/markdown/generate/#-csm","title":"--csm( ) <p>Required CSM network version</p> <ul> <li> <p>Options</p> <p>1.0 | 1.2 | 1.3 | 1.4 | 1.5 | 1.6</p> </li> </ul>","text":""},{"location":"_build/markdown/generate/#-a-architecture","title":"-a(, --architecture( ) <p>CSM architecture</p> <ul> <li> <p>Options</p> <p>Full | TDS | V1</p> </li> </ul>","text":""},{"location":"_build/markdown/generate/#-ccj","title":"--ccj( ) <p>Paddle CCJ file</p>","text":""},{"location":"_build/markdown/generate/#-shcd","title":"--shcd( ) <p>SHCD file</p>","text":""},{"location":"_build/markdown/generate/#-tabs","title":"--tabs( ) <p>The tabs on the SHCD file to check, e.g. 10G_25G_40G_100G,NMN,HMN.</p>","text":""},{"location":"_build/markdown/generate/#-corners","title":"--corners( ) <p>The corners on each tab, comma separated e.g. \u2018J37,U227,J15,T47,J20,U167\u2019.</p>","text":""},{"location":"_build/markdown/generate/#-sls-file","title":"--sls-file( ) <p>File containing system SLS JSON data.</p>","text":""},{"location":"_build/markdown/generate/#-auth-token","title":"--auth-token( ) <p>Token for SLS authentication</p>","text":""},{"location":"_build/markdown/generate/#-sls-address","title":"--sls-address( ) <ul> <li> <p>Default</p> <p><code>api-gw-service-nmn.local</code></p> </li> </ul>","text":""},{"location":"_build/markdown/generate/#-folder","title":"--folder( ) <p>Required Folder to store config files</p>","text":""},{"location":"_build/markdown/generate/#-custom-config","title":"--custom-config( ) <p>Custom switch configuration</p>","text":""},{"location":"_build/markdown/generate/#-edge","title":"--edge( ) <p>Required Vendor of Edge router</p> <ul> <li> <p>Options</p> <p>Aruba | Arista</p> </li> </ul>","text":""},{"location":"_build/markdown/generate/#-preserve","title":"--preserve( ) <p>Path to current running configs.</p>","text":""},{"location":"_build/markdown/generate/#-reorder","title":"--reorder() <p>reorder config to heir config order</p>","text":""},{"location":"_build/markdown/generate/#-bgp-control-plane","title":"--bgp-control-plane( ) <p>Network used for BGP control plane</p> <ul> <li> <p>Options</p> <p>CMN | CHN</p> </li> </ul>","text":""},{"location":"_build/markdown/generate/#-vrf","title":"--vrf( ) <p>Named VRF used for CSM networks</p>","text":""},{"location":"_build/markdown/generate/#-bond-app-nodes","title":"--bond-app-nodes() <p>Bond application nodes on the NMN network</p>","text":""},{"location":"_build/markdown/generate/#-log","title":"--log( ) <p>Level of logging.</p> <ul> <li> <p>Options</p> <p>DEBUG | INFO | WARNING | ERROR</p> </li> </ul>","text":""},{"location":"_build/markdown/generate/#environment-variables","title":"Environment variables","text":""},{"location":"_build/markdown/generate/#sls_token","title":"SLS_TOKEN()  <p>Provide a default for <code>--auth-token</code></p>","text":""},{"location":"_build/markdown/generate/#switch","title":"switch","text":"<p>Canu generate switch commands.</p> <pre><code>canu generate switch [OPTIONS] COMMAND [ARGS]...\n</code></pre>"},{"location":"_build/markdown/generate/#config_1","title":"config <p>Generate switch config using the SHCD.</p> <p>In order to generate switch config, a valid SHCD must be passed in and system variables must be read in from either an SLS output file or the SLS API.</p>","text":""},{"location":"_build/markdown/generate/#csi-input_1","title":"CSI Input","text":"<ul> <li> <p>In order to parse network data using SLS, pass in the file containing SLS JSON data (normally sls_file.json) using the \u2018\u2013sls-file\u2019 flag</p> </li> <li> <p>If used, CSI-generated sls_input_file.json file is generally stored in one of two places depending on how far the system is in the install process.</p> </li> <li> <p>Early in the install process, when running off of the LiveCD the sls_input_file.json file is normally found in the the directory \u2018/var/www/ephemeral/prep/SYSTEMNAME/\u2019</p> </li> <li> <p>Later in the install process, the sls_file.json file is generally in \u2018/mnt/pitdata/prep/SYSTEMNAME/\u2019</p> </li> </ul>"},{"location":"_build/markdown/generate/#sls-api-input_1","title":"SLS API Input","text":"<ul> <li> <p>To parse the Shasta SLS API for IP addresses, ensure that you have a valid token.</p> </li> <li> <p>The token file can either be passed in with the \u2018\u2013auth-token TOKEN_FILE\u2019 flag, or it can be automatically read if the environmental variable \u2018SLS_TOKEN\u2019 is set.</p> </li> <li> <p>The SLS address is default set to \u2018api-gw-service-nmn.local\u2019.</p> </li> <li> <p>if you are operating on a system with a different address, you can set it with the \u2018\u2013sls-address SLS_ADDRESS\u2019 flag.</p> </li> </ul>"},{"location":"_build/markdown/generate/#shcd-input_1","title":"SHCD Input","text":"<ul> <li> <p>Use the \u2018\u2013tabs\u2019 flag to select which tabs on the spreadsheet will be included.</p> </li> <li> <p>The \u2018\u2013corners\u2019 flag is used to input the upper left and lower right corners of the table on each tab of the worksheet. If the corners are not specified, you will be prompted to enter them for each tab.</p> </li> <li> <p>The table should contain the 11 headers: Source, Rack, Location, Slot, (Blank), Port, Destination, Rack, Location, (Blank), Port.</p> </li> </ul> <p>Use the \u2018\u2013folder FOLDERNAME\u2019 flag to output all the switch configs to a folder.</p>"},{"location":"_build/markdown/generate/#noqa-d301-b950_1","title":"noqa: D301, B950","text":"<p>Args:</p> <pre><code>ctx: CANU context settings\ncsm: CSM version\narchitecture: CSM architecture\nccj: Paddle CCJ file\nshcd: SHCD file\ntabs: The tabs on the SHCD file to check, e.g. 10G_25G_40G_100G,NMN,HMN.\ncorners: The corners on each tab, comma separated e.g. \u2018J37,U227,J15,T47,J20,U167\u2019.\nswitch_name: Switch name\nsls_file: JSON file containing SLS data\nauth_token: Token for SLS authentication\nsls_address: The address of SLS\nout: Name of the output file\npreserve: Folder where switch running configs exist.\ncustom_config: yaml file containing customized switch configurations which is merged with the generated config.\nedge: Vendor of the edge router\nreorder: Filters generated configurations through hier_config generate a more natural running-configuration order.\nbgp_control_plane: Network used for BGP control plane\nvrf: Named VRF used for CSM networks\nbond_app_nodes: Generates bonded configuration for application nodes connected the NMN.\n\n\n```\nlog_\n```\n\n: Level of Logging\n</code></pre> <pre><code>canu generate switch config [OPTIONS]\n</code></pre>"},{"location":"_build/markdown/generate/#options_1","title":"Options","text":""},{"location":"_build/markdown/generate/#-csm_1","title":"--csm( ) <p>Required CSM network version</p> <ul> <li> <p>Options</p> <p>1.0 | 1.2 | 1.3 | 1.4 | 1.5 | 1.6</p> </li> </ul>","text":""},{"location":"_build/markdown/generate/#-a-architecture_1","title":"-a(, --architecture( ) <p>Required CSM architecture</p> <ul> <li> <p>Options</p> <p>Full | TDS | V1</p> </li> </ul>","text":""},{"location":"_build/markdown/generate/#-ccj_1","title":"--ccj( ) <p>Paddle CCJ file</p>","text":""},{"location":"_build/markdown/generate/#-shcd_1","title":"--shcd( ) <p>SHCD file</p>","text":""},{"location":"_build/markdown/generate/#-tabs_1","title":"--tabs( ) <p>The tabs on the SHCD file to check, e.g. 10G_25G_40G_100G,NMN,HMN.</p>","text":""},{"location":"_build/markdown/generate/#-corners_1","title":"--corners( ) <p>The corners on each tab, comma separated e.g. \u2018J37,U227,J15,T47,J20,U167\u2019.</p>","text":""},{"location":"_build/markdown/generate/#-name","title":"--name( ) <p>Required The name of the switch to generate config e.g. \u2018sw-spine-001\u2019</p>","text":""},{"location":"_build/markdown/generate/#-sls-file_1","title":"--sls-file( ) <p>File containing system SLS JSON data.</p>","text":""},{"location":"_build/markdown/generate/#-auth-token_1","title":"--auth-token( ) <p>Token for SLS authentication</p>","text":""},{"location":"_build/markdown/generate/#-sls-address_1","title":"--sls-address( ) <ul> <li> <p>Default</p> <p><code>api-gw-service-nmn.local</code></p> </li> </ul>","text":""},{"location":"_build/markdown/generate/#-out","title":"--out( ) <p>Output results to a file</p>","text":""},{"location":"_build/markdown/generate/#-custom-config_1","title":"--custom-config( ) <p>Create and maintain custom switch configurations beyond generated plan-of-record</p>","text":""},{"location":"_build/markdown/generate/#-edge_1","title":"--edge( ) <p>Required Vendor of Edge router</p> <ul> <li> <p>Options</p> <p>Aruba | Arista</p> </li> </ul>","text":""},{"location":"_build/markdown/generate/#-preserve_1","title":"--preserve( ) <p>Path to current running configs.</p>","text":""},{"location":"_build/markdown/generate/#-reorder_1","title":"--reorder() <p>reorder config to heir config order</p>","text":""},{"location":"_build/markdown/generate/#-bgp-control-plane_1","title":"--bgp-control-plane( ) <p>Network used for BGP control plane</p> <ul> <li> <p>Options</p> <p>CMN | CHN</p> </li> </ul>","text":""},{"location":"_build/markdown/generate/#-vrf_1","title":"--vrf( ) <p>Named VRF used for CSM networks</p>","text":""},{"location":"_build/markdown/generate/#-bond-app-nodes_1","title":"--bond-app-nodes() <p>Bond application nodes on the NMN network</p>","text":""},{"location":"_build/markdown/generate/#-log_1","title":"--log( ) <p>Level of logging.</p> <ul> <li> <p>Options</p> <p>DEBUG | INFO | WARNING | ERROR</p> </li> </ul>","text":""},{"location":"_build/markdown/generate/#environment-variables_1","title":"Environment variables","text":""},{"location":"_build/markdown/generate/#sls_token_1","title":"SLS_TOKEN()  <p>Provide a default for <code>--auth-token</code></p>","text":""},{"location":"_build/markdown/init/","title":"Initialization","text":"<p>To help make switch setup a breeze. CANU can automatically parse SLS JSON data - including CSI sls_input_file.json output or the Shasta SLS API for switch IPv4 addresses.</p>"},{"location":"_build/markdown/init/#canu-init","title":"canu init","text":"<p>Initialize CANU by extracting all the switch IPs from CSI generated json, or by getting IPs from SLS.</p> <p>To access the SLS API, a token must be passed in using the \u2018\u2013auth-token\u2019 flag. - Tokens are typically stored in \u2018~./config/cray/tokens/\u2019 - Instead of passing in a token file, the environmental variable SLS_TOKEN can be used.</p> <p>To initialize using JSON instead of the SLS API, pass in the file containing SLS JSON data (normally sls_input_file.json) using the \u2018\u2013sls-file\u2019 flag</p> <p>If used, CSI-generated sls_input_file.json file is generally stored in one of two places depending on how far the system is in the install process. - Early in the install process, when running off of the LiveCD the CSI sls_input_file.json file is normally found in the the directory \u2018/var/www/ephemeral/prep/SYSTEMNAME/\u2019 - Later in the install process, the CSI sls_input_file.json file is generally in \u2018/mnt/pitdata/prep/SYSTEMNAME/\u2019</p> <p>The output file for the canu init command is set with the \u2013out FILENAME flag.</p>"},{"location":"_build/markdown/init/#noqa-d301-b950","title":"noqa: D301, B950","text":"<p>Args:</p> <pre><code>ctx: CANU context settings\nsls_file: File containing the CSI json data\nauth_token: Token for SLS authentication\nsls_address: The address of SLS\nnetwork: Switch network e.g. (CAN, MTL, NMN).\nout: Name of the output file\n</code></pre> <pre><code>canu init [OPTIONS]\n</code></pre>"},{"location":"_build/markdown/init/#options","title":"Options","text":""},{"location":"_build/markdown/init/#-sls-file","title":"--sls-file( ) <p>File containing system SLS JSON data.</p>","text":""},{"location":"_build/markdown/init/#-auth-token","title":"--auth-token( ) <p>Token for SLS authentication</p>","text":""},{"location":"_build/markdown/init/#-sls-address","title":"--sls-address( ) <ul> <li> <p>Default</p> <p><code>api-gw-service-nmn.local</code></p> </li> </ul>","text":""},{"location":"_build/markdown/init/#-network","title":"--network( ) <p>Switch network e.g. (CAN, MTL, NMN)</p> <ul> <li> <p>Default</p> <p><code>NMN</code></p> </li> </ul>","text":""},{"location":"_build/markdown/init/#-out","title":"--out( ) <p>Required Output file with CSI IP addresses</p>","text":""},{"location":"_build/markdown/init/#environment-variables","title":"Environment variables","text":""},{"location":"_build/markdown/init/#sls_token","title":"SLS_TOKEN()  <p>Provide a default for <code>--auth-token</code></p>","text":""},{"location":"_build/markdown/init/#examples","title":"Examples","text":""},{"location":"_build/markdown/init/#1-csi","title":"1. CSI <p>To get the switch IP addresses from CSI output, run the command:</p> <pre><code>$ canu init --sls-file SLS_FILE --out output.txt\n8 IP addresses saved to output.txt\n</code></pre> <p></p>","text":""},{"location":"_build/markdown/init/#2-sls-shasta-api","title":"2. SLS Shasta API <p>To get the switch IP addresses from the Shasta SLS API, run the command:</p> <pre><code>$ canu init --auth-token ~./config/cray/tokens/ --sls-address 1.2.3.4 --out output.txt\n8 IP addresses saved to output.txt\n</code></pre>","text":""},{"location":"_build/markdown/init/#csi-input","title":"CSI Input","text":"<ul> <li>In order to parse CSI output, use the <code>--sls-file FILE</code> flag to pass in the folder where an SLS JSON file is located.</li> </ul> <p>The CSI <code>sls_input_file.json</code> file is generally stored in one of two places depending on how far the system is in the install process.</p> <ul> <li> <p>Early in the install process, when running off of the LiveCD the CSI <code>sls_input_file.json</code> file is normally found in the the directory <code>/var/www/ephemeral/prep/SYSTEMNAME/</code></p> </li> <li> <p>Later in the install process, the CSI <code>sls_input_file.json</code> file is generally in <code>/mnt/pitdata/prep/SYSTEMNAME/</code></p> </li> <li> <p>The SLS file can also be obtained from an NCN that\u2019s in the k8s cluster by running <code>cray sls dumpstate list  --format json</code></p> </li> <li> <p>The switch IPs will be read from the \u2018NMN\u2019 network, if a different network is desired, use the <code>--network</code> flag to choose a different one e.g. (CAN, MTL, NMN).</p> </li> </ul> <p>To get the switch IP addresses from CSI output, run the command:</p> <pre><code>canu init --sls-file SLS_FILE --out output.txt\n</code></pre> <p>Potential output:</p> <pre><code>8 IP addresses saved to output.txt\n</code></pre>"},{"location":"_build/markdown/init/#sls-api-input","title":"SLS API Input","text":"<ul> <li>To parse the Shasta SLS API for IP addresses, ensure that you have a valid token. The token file can either be passed in with the <code>--auth-token TOKEN_FILE</code> flag, or it can be automatically read if the environmental variable <code>SLS_TOKEN</code> is set. The SLS address is default set to <code>api-gw-service-nmn.local</code>, if you are operating on a system with a different address, you can set it with the <code>--sls-address SLS_ADDRESS</code> flag.</li> </ul> <p>To get the switch IP addresses from the Shasta SLS API, run the command:</p> <pre><code>canu init --auth-token ~./config/cray/tokens/ --sls-address 1.2.3.4 --out output.txt\n</code></pre> <p>Potential output:</p> <pre><code>8 IP addresses saved to output.txt\n</code></pre> <p></p> <p>The output file for the <code>canu init</code> command is set with the <code>--out FILENAME</code> flag.</p>"},{"location":"_build/markdown/lags/","title":"Lags","text":""},{"location":"_build/markdown/lags/#ncn-m","title":"ncn-m","text":"<ul> <li> <p>Lag number is the port of the primary switch connection to ncn-m:port 1.</p> </li> <li> <p>ncn-m:port 2, no lag</p> </li> </ul> <p>| Switch</p> <p>| ncn-m</p> <p>| Lag</p> <p>| | ------ | ----- | --- | | sw-leaf-001:1</p> <p>| ncn-m001:ocp:1</p> <p>| lag 1</p> <p>| | sw-leaf-001:2</p> <p>| ncn-m002:ocp:1</p> <p>| lag 2</p> <p>| | sw-leaf-002:1</p> <p>| ncn-m001:pcie-slot1:1</p> <p>| lag 1</p> <p>| | sw-leaf-002:2</p> <p>| ncn-m002:pcie-slot1:1</p> <p>| lag 2</p> <p>| | sw-leaf-003:1</p> <p>| ncn-m003:ocp:1</p> <pre><code>    | lag 1\n</code></pre> <p>| | sw-leaf-004:1</p> <p>| ncn-m003:pcie-slot1:1</p> <p>| lag 1</p> <p>|</p>"},{"location":"_build/markdown/lags/#ncn-s","title":"ncn-s","text":"<ul> <li> <p>Lag number is the port of the primary switch connection</p> </li> <li> <p>The connections to ocp:port1 and pcie:port1 slots on a ncn-s must be on the same lag across the primary and secondary switch</p> </li> <li> <p>The connections to ocp:port2 and pcie:port2 slots on a ncn-s must be on the same lag across the primary and secondary switch</p> </li> </ul> <p>| Switch</p> <pre><code>    | ncn-m\n\n             | Lag\n</code></pre> <p>| | ------------- | --------------------- | ----- | | sw-leaf-001:6</p> <p>| ncn-s001:ocp:1</p> <pre><code>    | lag 6\n</code></pre> <p>| | sw-leaf-001:7</p> <p>| ncn-s002:ocp:1</p> <pre><code>    | lag 7\n</code></pre> <p>| | sw-leaf-002:6</p> <p>| ncn-s001:pcie-slot1:1</p> <p>| lag 6</p> <p>| | sw-leaf-002:7</p> <p>| ncn-s002:pcie-slot1:1</p> <p>| lag 7</p> <p>| | sw-leaf-003:5</p> <p>| ncn-s001:ocp:2</p> <pre><code>    | lag 5\n</code></pre> <p>| | sw-leaf-003:6</p> <p>| ncn-s002:ocp:2</p> <pre><code>    | lag 6\n</code></pre> <p>| | sw-leaf-003:7</p> <p>| ncn-s003:ocp:1</p> <pre><code>    | lag 7\n</code></pre> <p>| | sw-leaf-003:8</p> <p>| ncn-s003:ocp:2</p> <pre><code>    | lag 8\n</code></pre> <p>| | sw-leaf-004:5</p> <p>| ncn-s001:pcie-slot1:2</p> <p>| lag 5</p> <p>| | sw-leaf-004:6</p> <p>| ncn-s002:pcie-slot1:2</p> <p>| lag 6</p> <p>| | sw-leaf-004:7</p> <p>| ncn-s003:pcie-slot1:1</p> <p>| lag 7</p> <p>| | sw-leaf-004:8</p> <p>| ncn-s003:pcie-slot1:2</p> <p>| lag 8</p> <p>|</p>"},{"location":"_build/markdown/lags/#ncn-w","title":"ncn-w","text":"<ul> <li>Lag number is the port of the primary switch connection to ncn-w</li> </ul> <p>| Switch</p> <pre><code>    | ncn-m\n\n             | Lag\n</code></pre> <p>| | ------------- | --------------------- | ----- | | sw-leaf-001:3</p> <p>| ncn-w001:ocp:1</p> <pre><code>    | lag 3\n</code></pre> <p>| | sw-leaf-001:4</p> <p>| ncn-w002:ocp:1</p> <pre><code>    | lag 4\n</code></pre> <p>| | sw-leaf-002:3</p> <p>| ncn-w001:ocp:2</p> <pre><code>    | lag 3\n</code></pre> <p>| | sw-leaf-002:4</p> <p>| ncn-w002:ocp:2</p> <pre><code>    | lag 4\n</code></pre> <p>| | sw-leaf-003:2</p> <p>| ncn-w004:ocp:1</p> <pre><code>    | lag 2\n</code></pre> <p>| | sw-leaf-004:2</p> <p>| ncn-w004:ocp:2</p> <pre><code>    | lag 2\n</code></pre> <p>|</p>"},{"location":"_build/markdown/lags/#cec","title":"cec","text":"<ul> <li>no lags</li> </ul>"},{"location":"_build/markdown/lags/#cmm","title":"cmm","text":"<ul> <li>Lag number is the port of the primary switch connection to cmm</li> </ul> <p>| Switch</p> <pre><code>    | ncn-m\n\n             | Lag\n</code></pre> <p>| | ------------- | --------------------- | ----- | | sw-cdu-001:1</p> <p>| cmm000:0</p> <pre><code>          | lag 1\n</code></pre> <p>| | sw-cdu-001:2</p> <p>| cmm001:0</p> <pre><code>          | lag 2\n</code></pre> <p>| | sw-cdu-002:1</p> <p>| cmm000:1</p> <pre><code>          | lag 1\n</code></pre> <p>| | sw-cdu-002:2</p> <p>| cmm001:1</p> <pre><code>          | lag 2\n</code></pre> <p>|</p>"},{"location":"_build/markdown/lags/#uan","title":"uan","text":"<ul> <li> <p>Lag number is the port of the primary switch connection on uan:port 2</p> </li> <li> <p>The uan:port 1 connection has no lag</p> </li> </ul> <p>| Switch</p> <pre><code>    | ncn-m\n\n             | Lag\n</code></pre> <p>| | ------------- | --------------------- | ----- | | sw-leaf-001:8</p> <p>| uan001:ocp:1</p> <pre><code>      | None\n</code></pre> <p>| | sw-leaf-001:9</p> <p>| uan002:ocp:1</p> <pre><code>      | None\n</code></pre> <p>| | sw-leaf-001:14</p> <p>| uan001:ocp:2</p> <pre><code>      | lag 8\n</code></pre> <p>| | sw-leaf-001:15</p> <p>| uan002:ocp:2</p> <pre><code>      | lag 9\n</code></pre> <p>| | sw-leaf-002:8</p> <p>| uan001:pcie-slot1:1</p> <p>| None</p> <p>| | sw-leaf-002:9</p> <p>| uan002:pcie-slot1:1</p> <p>| None</p> <p>| | sw-leaf-002:14</p> <p>| uan001:pcie-slot1:2</p> <p>| lag 8</p> <p>| | sw-leaf-002:15</p> <p>| uan002:pcie-slot1:2</p> <p>| lag 9</p> <p>|</p>"},{"location":"_build/markdown/lags/#sw-spine-sw-leaf","title":"sw-spine ==&gt; sw-leaf","text":"<ul> <li>Lag number is the digits of the primary leaf switch + 100</li> </ul> <p>| Switch</p> <pre><code>     | ncn-m\n\n             | Lag\n</code></pre> <p>| | -------------- | --------------------- | ----- | | sw-spine-001:1</p> <p>| sw-leaf-001:53</p> <pre><code>    | lag 101\n</code></pre> <p>| | sw-spine-001:2</p> <p>| sw-leaf-002:53</p> <pre><code>    | lag 101\n</code></pre> <p>| | sw-spine-002:1</p> <p>| sw-leaf-001:54</p> <pre><code>    | lag 101\n</code></pre> <p>| | sw-spine-002:2</p> <p>| sw-leaf-002:54</p> <pre><code>    | lag 101\n</code></pre> <p>|</p>"},{"location":"_build/markdown/lags/#sw-spine-sw-leaf-bmc-tds","title":"sw-spine ==&gt; sw-leaf-bmc (TDS)","text":"<ul> <li>Lag number is the digits of the leaf-bmc switch + 150</li> </ul> <p>| Switch</p> <pre><code>     | ncn-m\n\n             | Lag\n\n |\n</code></pre> <p>| -------------- | --------------------- | ------- | | sw-spine-001:48</p> <p>| sw-leaf-bmc-001:49</p> <pre><code>| lag 151\n</code></pre> <p>| | sw-spine-002:48</p> <p>| sw-leaf-bmc-001:50</p> <pre><code>| lag 151\n</code></pre> <p>|</p>"},{"location":"_build/markdown/lags/#sw-spine-sw-cdu","title":"sw-spine ==&gt; sw-cdu","text":"<ul> <li>Lag number is the digits of the primary cdu switch + 200</li> </ul> <p>| Switch</p> <pre><code>      | ncn-m\n\n             | Lag\n\n |\n</code></pre> <p>| --------------- | --------------------- | ------- | | sw-spine-001:5</p> <p>| sw-cdu-001:49</p> <pre><code>     | lag 201\n</code></pre> <p>| | sw-spine-001:6</p> <p>| sw-cdu-002:49</p> <pre><code>     | lag 201\n</code></pre> <p>| | sw-spine-002:5</p> <p>| sw-cdu-001:50</p> <pre><code>     | lag 201\n</code></pre> <p>| | sw-spine-002:6</p> <p>| sw-cdu-002:50</p> <pre><code>     | lag 201\n</code></pre> <p>|</p>"},{"location":"_build/markdown/lags/#sw-spine-sw-spine","title":"sw-spine ==&gt; sw-spine","text":"<ul> <li>Always lag 256</li> </ul>"},{"location":"_build/markdown/lags/#sw-leaf-sw-spine","title":"sw-leaf ==&gt; sw-spine","text":"<ul> <li>Lag number is the digits of the primary spine switch + 100</li> </ul> <p>| Switch</p> <pre><code>      | ncn-m\n\n             | Lag\n\n |\n</code></pre> <p>| --------------- | --------------------- | ------- | | sw-leaf-001:53</p> <p>| sw-spine-001:1</p> <pre><code>    | lag 101\n</code></pre> <p>| | sw-leaf-001:54</p> <p>| sw-spine-002:1</p> <pre><code>    | lag 101\n</code></pre> <p>| | sw-leaf-002:53</p> <p>| sw-spine-001:2</p> <pre><code>    | lag 101\n</code></pre> <p>| | sw-leaf-002:54</p> <p>| sw-spine-002:2</p> <pre><code>    | lag 101\n</code></pre> <p>|</p>"},{"location":"_build/markdown/lags/#sw-leaf-sw-leaf","title":"sw-leaf ==&gt; sw-leaf","text":"<ul> <li>Always lag 256</li> </ul>"},{"location":"_build/markdown/lags/#sw-leaf-sw-leaf-bmc","title":"sw-leaf ==&gt; sw-leaf-bmc","text":"<ul> <li>Lag number is the digits of the leaf-bmc switch + 150</li> </ul> <p>| Switch</p> <pre><code>      | ncn-m\n\n             | Lag\n\n |\n</code></pre> <p>| --------------- | --------------------- | ------- | | sw-leaf-001:48</p> <p>| sw-leaf-bmc-001:51</p> <pre><code>| lag 151\n</code></pre> <p>| | sw-leaf-002:48</p> <p>| sw-leaf-bmc-001:52</p> <pre><code>| lag 151\n</code></pre> <p>|</p>"},{"location":"_build/markdown/lags/#sw-cdu-sw-spine","title":"sw-cdu ==&gt; sw-spine","text":"<ul> <li>Always lag 255</li> </ul> <p>| Switch</p> <pre><code>      | ncn-m\n\n             | Lag\n\n |\n</code></pre> <p>| --------------- | --------------------- | ------- | | sw-cdu-001:49</p> <p>| sw-spine-001:5</p> <pre><code>    | lag 255\n</code></pre> <p>| | sw-cdu-001:50</p> <p>| sw-spine-002:5</p> <pre><code>    | lag 255\n</code></pre> <p>| | sw-cdu-002:49</p> <p>| sw-spine-001:6</p> <pre><code>    | lag 255\n</code></pre> <p>| | sw-cdu-002:50</p> <p>| sw-spine-002:6</p> <pre><code>    | lag 255\n</code></pre> <p>|</p>"},{"location":"_build/markdown/lags/#sw-cdu-sw-cdu","title":"sw-cdu ==&gt; sw-cdu","text":"<ul> <li>Always lag 256</li> </ul>"},{"location":"_build/markdown/lags/#sw-leaf-bmc-sw-spine-tds","title":"sw-leaf-bmc ==&gt; sw-spine (TDS)","text":"<ul> <li>Always lag 255</li> </ul> <p>| Switch</p> <pre><code>      | ncn-m\n\n             | Lag\n\n |\n</code></pre> <p>| --------------- | --------------------- | ------- | | sw-leaf-bmc-001:49</p> <p>| sw-spine-001:48</p> <pre><code>   | lag 255\n</code></pre> <p>| | sw-leaf-bmc-001:50</p> <p>| sw-spine-002:48</p> <pre><code>   | lag 255\n</code></pre> <p>|</p>"},{"location":"_build/markdown/lags/#sw-leaf-bmc-sw-leaf","title":"sw-leaf-bmc ==&gt; sw-leaf","text":"<ul> <li>Always lag 255</li> </ul> <p>| Switch</p> <pre><code>         | ncn-m\n\n             | Lag\n\n |\n</code></pre> <p>| ------------------ | --------------------- | ------- | | sw-leaf-bmc-001:51</p> <p>| sw-leaf-001:48</p> <pre><code>    | lag 255\n</code></pre> <p>| | sw-leaf-bmc-001:52</p> <p>| sw-leaf-002:48</p> <pre><code>    | lag 255\n</code></pre> <p>|</p>"},{"location":"_build/markdown/nox_testing/","title":"Nox testing","text":"<p>To run full test suite:</p> <pre><code>nox\n</code></pre> <p>To run only sub section of tests:</p> <pre><code>nox -rs tests \n</code></pre> <p>To run only specific test from subsesction:</p> <pre><code>nox -rs tests -- tests/test_generate_switch_config_aruba_csm_1_0.py\n</code></pre> <p>-r re-uses a previous testing virtual environment to save time.  should not be used for testing when you are adding or changing libraries. -s specifies an overall session as defined in nox.py.  for canu currently these can be tests, lint, docs</p> <p>To run the full set of tests, linting, coverage map, and docs building run:</p> <pre><code>python3 -m pip install .[ci]\n</code></pre> <pre><code>nox\n</code></pre> <p>To just run tests:</p> <pre><code>nox -s tests\n</code></pre> <p>To just run linting:</p> <pre><code>nox -s lint\n</code></pre> <p>To run a specific test file:</p> <pre><code>nox -s tests -- tests/test_report_switch_firmware.py\n</code></pre> <p>To reuse a session without reinstalling dependencies use the <code>-rs</code> flag instead of <code>-s</code>.</p>"},{"location":"_build/markdown/paddle/","title":"Paddle / CCJ File","text":"<p>The paddle or CCJ (CSM Cabling JSON) is a JSON representation of the network. There are many benefits of using the CCJ:</p> <ul> <li> <p>The CCJ schema has been validated using <code>paddle-schema.json</code></p> </li> <li> <p>The paddle has been architecturally validated to ensure all connections between devices are approved</p> </li> <li> <p>All port connections between devices have been checked using the CANU model to ensure speed, slot choice, and port availability has been confirmed</p> </li> <li> <p>The CCJ is machine-readable and therefore easy to build additional tooling around</p> </li> <li> <p>Less flags need to be used when reading the CCJ vs the SHCD</p> </li> </ul> <p>The SHCD can easily be converted into CCJ by using</p> <pre><code>canu validate shcd --shcd SHCD.xlsx --json --out paddle.json\n</code></pre>"},{"location":"_build/markdown/quickstart/","title":"Quickstart Guide","text":"<p>After installing the container or the RPM, or in a virtualenv, there are several ways to invoke CANU, including:</p> <ul> <li> <p><code>docker run</code> (or other runtime)</p> </li> <li> <p><code>docker exec</code> (or other runtime)</p> </li> <li> <p><code>canuctl</code></p> </li> <li> <p><code>canu</code> (direct execution of the binary, which will be deprecated in upcoming versions)</p> </li> <li> <p><code>canu</code> (running the Python code)</p> </li> </ul> <p>For consistency and simplification, the invocations of CANU throughout the documentation will simply be show as</p> <pre><code>canu &lt;command&gt; --flags\n</code></pre> <p>even though you may be invoking CANU via a different method.</p>"},{"location":"_build/markdown/quickstart/#checkout-a-fresh-system","title":"Checkout A Fresh System","text":"<p>This procedure requires <code>csi</code></p> <ol> <li>Make a new directory to save switch IP addresses</li> </ol> <pre><code>mkdir ips_folder\ncd ips_folder\n</code></pre> <ol> <li>Parse CSI files and save switch IP addresses</li> </ol> <pre><code>canu init --sls-file sls_input_file.json --out ips.txt`\n</code></pre> <ol> <li>Check network firmware</li> </ol> <pre><code>canu report network firmware --csm 1.2 --ips-file ips.txt\n</code></pre> <ol> <li>Check network cabling</li> </ol> <pre><code>canu report network cabling --ips-file ips.txt\n</code></pre> <ol> <li>Validate BGP status</li> </ol> <pre><code>canu validate network bgp --ips-file ips.txt --verbose\n</code></pre> <ol> <li>Validate cabling</li> </ol> <pre><code>canu validate network cabling --ips-file ips.txt\n</code></pre> <p>If you have the system\u2019s SHCD, there are even more commands that can be run</p> <ol> <li>Validate the SHCD</li> </ol> <pre><code>canu validate shcd --shcd SHCD.xlsx\n</code></pre> <ol> <li>Validate the SHCD against network cabling</li> </ol> <pre><code>canu validate shcd-cabling --shcd SHCD.xlsx --ips-file ips.txt\n</code></pre> <ol> <li>Generate switch config for the network</li> </ol> <pre><code>canu generate network config --shcd SHCD.xlsx --sls-file sls_input_file.json --folder configs\n</code></pre> <ol> <li>Convert the SHCD to CCJ</li> </ol> <pre><code>canu validate shcd --shcd SHCD.xlsx --json --out paddle.json\n</code></pre> <p>If you have the system\u2019s CCJ</p> <ol> <li>Validate the Paddle / CCJ</li> </ol> <pre><code>canu validate paddle --ccj paddle.json\n</code></pre> <ol> <li>Validate the CCJ against network cabling</li> </ol> <pre><code>canu validate paddle-cabling --ccj paddle.json --ips-file ips.txt\n</code></pre> <ol> <li>Generate switch config for the network</li> </ol> <pre><code>canu generate network config --ccj paddle.json --sls-file sls_input_file.json --folder configs\n</code></pre>"},{"location":"_build/markdown/releasing/","title":"CANU Release Process","text":"<ol> <li> <p>Once the PR is merged, checkout and update main locally and take a new git-tag (<code>x.y.z</code>, no leading <code>v</code>)</p> <ul> <li>Prepare your local environment</li> </ul> </li> </ol> <p>If your working directory is not clean, please commit or stash your changes in order to checkout the <code>main</code> branch.</p> <pre><code>git checkout main\ngit pull\ngit fetch origin --tags\ngit log --no-walk --tags --pretty=\"%h %d %s\" --decorate=full\n</code></pre> <pre><code>* Take a final release tag or a pre-release tag, release tags are considered ***stable*** and pre-release tags are previews that are considered ***unstable***.\n</code></pre> <p>Pre-release tags are entirely optional.</p> <pre><code>    * Final release tags follow the [PEP0400 Finale release format](https://peps.python.org/pep-0440/#final-releases) of `X.Y.Z`:\n</code></pre> <p>NOTE Historically this repository does NOT prepend <code>v</code> to the git-tag.</p> <pre><code>git tag X.Y.Z\ngit push orgin --tags\n</code></pre> <pre><code>    * Pre-release tags follow [PEP0440 pre-release format](https://peps.python.org/pep-0440/#pre-releases) format of `X.Y.Z{[a|b|rc]N}` (e.g. 1.8.0a1, 1.8.0b3, 1.8.0rc1).\n</code></pre> <p>NOTE These are entirely OPTIONAL. Examples:</p> <p><code>bash git tag 1.8.0a  - alpha 0 of 1.8.0 git tag 1.8.0b  - beta 0 of 1.8.0 git tag 1.8.0rc - preview/release-candidate 0 of 1.8.0 git tag 1.8.0a1 - alpha 1 of 1.8.0</code></p> <pre><code>git tag X.Y.Z{[a|b|rc]N}\ngit push orgin --tags\n</code></pre> <ol> <li> <p>Navigate to GitHub releases: <code>https://github.com/Cray-HPE/canu/releases</code></p> </li> <li> <p>Select \u201cDraft a new release\u201d</p> </li> <li> <p>\u201cChoose a tag\u201d and choose the tag you pushed.</p> </li> <li> <p>Select \u201cautogenerate release notes\u201d to pre-populate the fields.</p> </li> <li> <p>Write a short, quippy title for the release (replacing the autogenerated one, maybe).</p> </li> <li> <p>In the main text write \u201cOverview\u201d, a few short bullet points pulled from the changelog outlining major changes.</p> </li> <li> <p>In the main text write \u201cDetailed Changelog\u201d and paste in the changelog from readme.md.</p> </li> <li> <p>IMPORTANT If this is a pre-release, then check the \u201cSet as a pre-release\u201d box!</p> <ul> <li>Optionally uncheck the \u201cSet as the latest release\u201d if this release isn\u2019t to be advertised.</li> </ul> </li> <li> <p>Click \u201cPublish release\u201d</p> </li> <li> <p>Make sure the <code>canu</code> binary RPM exists in artifactory.</p> </li> <li> <p>Once new <code>canu</code> RPM is created. Navigate to: <code>https://github.com/Cray-HPE/canu/releases</code> edit release and upload the new RPM can also be downloaded from GitHub.</p> </li> </ol> <p><code>canu</code> exists in the pre-install-toolkit, and needs a manifest updated here:</p> <ul> <li>Metal Provision</li> </ul> <p><code>canu</code> also exists in the CSM tarball, and needs a manfiest update for both its RPM and Docker images here:</p> <ul> <li> <p>RPM</p> </li> <li> <p>Docker Image</p> </li> </ul>"},{"location":"_build/markdown/report/","title":"canu report","text":"<p>Canu report commands.</p> <pre><code>canu report [OPTIONS] COMMAND [ARGS]...\n</code></pre>"},{"location":"_build/markdown/report/#network","title":"network","text":"<p>Commands that report on the entire network.</p> <pre><code>canu report network [OPTIONS] COMMAND [ARGS]...\n</code></pre>"},{"location":"_build/markdown/report/#cabling","title":"cabling","text":"<p>Report the cabling of all switches (Aruba, Dell, or Mellanox) on the network by using LLDP.</p> <p>Pass in either a comma separated list of IP addresses using the \u2013ips option</p> <p>OR</p> <p>Pass in a file of IP addresses with one address per line.</p> <p>There are three different connection types that will be shown in the results.</p> <ol> <li> <p>\u2018===&gt;\u2019 Outbound connections</p> </li> <li> <p>\u2018&lt;===\u2019 Inbound connections</p> </li> <li> <p>\u2018&lt;==&gt;\u2019 Bi-directional connections</p> </li> </ol> <p>There are two different \u2018\u2013view\u2019 options, \u2018switch\u2019 and \u2018equipment\u2019.</p> <ol> <li> <p>The \u2018\u2013view switch\u2019 option displays a table for every switch IP address passed in showing connections.</p> </li> <li> <p>The \u2018\u2013view equipment\u2019 option displays a table for each mac address connection. This means that servers and switches will both display incoming and outgoing connections.</p> </li> </ol> <p>If the neighbor name is not in LLDP, the IP and vlan information are displayed by looking up the MAC address in the ARP table and mac address table.</p> <p>If there is a duplicate port, the duplicates will be highlighted in \u2018bright white\u2019.</p> <p>Ports highlighted in \u2018blue\u2019 contain the string \u201cncn\u201d in the hostname.</p> <p>Ports are highlighted in \u2018green\u2019 when the port name is set with the interface name.</p>"},{"location":"_build/markdown/report/#noqa-d301","title":"noqa: D301","text":"<p>Args:</p> <pre><code>ctx: CANU context settings\nips: Comma separated list of IPv4 addresses of switches\nips_file: File with one IPv4 address per line\nusername: Switch username\npassword: Switch password\nview: View of the cabling results.\nkea_lease_file: Name of the JSON file containing Kea leases\nsls_file: Name of the JSON file containing SLS system data\nsmd_file: Name of the JSON file containing SMD ethernetInterfaces\nheuristic_lookups: Turn off annotations to LLDP data based on common device use\n\n\n```\nlog_\n```\n\n: Level of logging.\nout: Name of the output file\n</code></pre> <pre><code>canu report network cabling [OPTIONS]\n</code></pre>"},{"location":"_build/markdown/report/#options","title":"Options","text":""},{"location":"_build/markdown/report/#-ips","title":"--ips( ) <p>Comma separated list of IPv4 addresses of switches</p>","text":""},{"location":"_build/markdown/report/#-ips-file","title":"--ips-file( ) <p>File with one IPv4 address per line</p>","text":""},{"location":"_build/markdown/report/#-username","title":"--username( ) <p>Switch username</p> <ul> <li> <p>Default</p> <p><code>admin</code></p> </li> </ul>","text":""},{"location":"_build/markdown/report/#-password","title":"--password( ) <p>Switch password</p>","text":""},{"location":"_build/markdown/report/#-view","title":"--view( ) <p>View of the cabling results.</p> <ul> <li> <p>Default</p> <p><code>switch</code></p> </li> <li> <p>Options</p> <p>switch | equipment</p> </li> </ul>","text":""},{"location":"_build/markdown/report/#-kea-lease-file","title":"--kea-lease-file( ) <p>Kea leases in JSON format from API call used for MAC-to-hostname lookups.</p>","text":""},{"location":"_build/markdown/report/#-sls-file","title":"--sls-file( ) <p>SLS file in JSON format from API call used for MAC-to-hostname lookups.</p>","text":""},{"location":"_build/markdown/report/#-smd-file","title":"--smd-file( ) <p>SMD ethernetInterfaces in JSON format from API call used for MAC-to-hostname lookups.</p>","text":""},{"location":"_build/markdown/report/#-heuristic-lookups","title":"--heuristic-lookups() <p>Make educated guesses and hints about what device is based on MAC.</p>","text":""},{"location":"_build/markdown/report/#-log","title":"--log( ) <p>Level of logging.</p> <ul> <li> <p>Options</p> <p>DEBUG | INFO | WARNING | ERROR</p> </li> </ul>","text":""},{"location":"_build/markdown/report/#-out","title":"--out( ) <p>Output results to a file</p>","text":""},{"location":"_build/markdown/report/#firmware","title":"firmware <p>Report the firmware versions of all switches (Aruba, Dell, or Mellanox) on the network.</p> <p>Pass in either a comma separated list of IP addresses using the \u2018\u2013ips\u2019 option</p> <p>OR</p> <p>Pass in a file of IP addresses with one address per line using the \u2018\u2013ips-file\u2019 option</p> <p>There are three different statuses found in the report.</p> <ul> <li> <p>\ud83d\udef6 Pass: Indicates that the switch passed the firmware verification.</p> </li> <li> <p>\u274c Fail: Indicates that the switch failed the firmware verification, in the generated table, a list of expected firmware versions for that switch is displayed.</p> </li> <li> <p>\ud83d\udd3a Error: Indicates that there was an error connecting to the switch, check the Errors table for the specific error.</p> </li> </ul>","text":""},{"location":"_build/markdown/report/#noqa-d301-b950","title":"noqa: D301, B950","text":"<p>Args:</p> <pre><code>ctx: CANU context settings\ncsm: CSM version\nips: Comma separated list of IPv4 addresses of switches\nips_file: File with one IPv4 address per line\nusername: Switch username\npassword: Switch password\n\n\n```\njson_\n```\n\n: Bool indicating json output\nout: Name of the output file\n</code></pre> <p>Returns:</p> <pre><code>json_formatted: If JSON is selected, returns output\n</code></pre> <pre><code>canu report network firmware [OPTIONS]\n</code></pre>"},{"location":"_build/markdown/report/#options_1","title":"Options","text":""},{"location":"_build/markdown/report/#-csm","title":"--csm( ) <p>Required CSM network version</p> <ul> <li> <p>Options</p> <p>1.0 | 1.2 | 1.3 | 1.4 | 1.5 | 1.6</p> </li> </ul>","text":""},{"location":"_build/markdown/report/#-ips_1","title":"--ips( ) <p>Comma separated list of IPv4 addresses of switches</p>","text":""},{"location":"_build/markdown/report/#-ips-file_1","title":"--ips-file( ) <p>File with one IPv4 address per line</p>","text":""},{"location":"_build/markdown/report/#-username_1","title":"--username( ) <p>Switch username</p> <ul> <li> <p>Default</p> <p><code>admin</code></p> </li> </ul>","text":""},{"location":"_build/markdown/report/#-password_1","title":"--password( ) <p>Switch password</p>","text":""},{"location":"_build/markdown/report/#-json","title":"--json() <p>Output JSON</p>","text":""},{"location":"_build/markdown/report/#-out_1","title":"--out( ) <p>Output results to a file</p>","text":""},{"location":"_build/markdown/report/#version","title":"version <p>Report Switch Version.</p> <p>Args:</p> <pre><code>ctx: CANU context settings\nusername: Switch username\npassword: Switch password\nsls_file: JSON file containing SLS data\nsls_address: The address of SLS\nnetwork: The network that is used to connect to the switches.\n\n\n```\nlog_\n```\n\n: enable logging\n</code></pre> <pre><code>canu report network version [OPTIONS]\n</code></pre>","text":""},{"location":"_build/markdown/report/#options_2","title":"Options","text":""},{"location":"_build/markdown/report/#-sls-file_1","title":"--sls-file( ) <p>File containing system SLS JSON data.</p>","text":""},{"location":"_build/markdown/report/#-network","title":"--network( ) <p>The network that is used to connect to the switches.</p> <ul> <li> <p>Default</p> <p><code>HMN</code></p> </li> <li> <p>Options</p> <p>HMN | CMN</p> </li> </ul>","text":""},{"location":"_build/markdown/report/#-log_1","title":"--log() <p>enable logging.</p>","text":""},{"location":"_build/markdown/report/#-username_2","title":"--username( ) <p>Switch username</p> <ul> <li> <p>Default</p> <p><code>admin</code></p> </li> </ul>","text":""},{"location":"_build/markdown/report/#-password_2","title":"--password( ) <p>Switch password</p>","text":""},{"location":"_build/markdown/report/#-sls-address","title":"--sls-address( ) <ul> <li> <p>Default</p> <p><code>api-gw-service-nmn.local</code></p> </li> </ul>","text":""},{"location":"_build/markdown/report/#switch","title":"switch","text":"<p>Report switch commands.</p> <pre><code>canu report switch [OPTIONS] COMMAND [ARGS]...\n</code></pre>"},{"location":"_build/markdown/report/#cabling_1","title":"cabling <p>Report the live cabling of a switch on the network by using LLDP.</p> <p>LLDP data which is missing the neighbor hostname will optionally be filled out with data from Kea, SLS, SMD and heuristic hints - in that order if all data sources are provided. If there is a duplicate port, the duplicates will be highlighted in \u2018bright white\u2019.</p> <p>Ports highlighted in \u2018blue\u2019 contain the string \u201cncn\u201d in the hostname.</p> <p>Ports are highlighted in \u2018green\u2019 when the port name is set with the interface name.</p>","text":""},{"location":"_build/markdown/report/#noqa-d301-b950_1","title":"noqa: D301, B950","text":"<p>Args:</p> <pre><code>ctx: CANU context settings\nip: Switch IPv4 address\nusername: Switch username\npassword: Switch password\nkea_lease_file: Name of the JSON file containing Kea leases\nsls_file: Name of the JSON file containing SLS system data\nsmd_file: Name of the JSON file containing SMD ethernetInterfaces\nheuristic_lookups: Turn off annotations to LLDP data based on common device use\n\n\n```\nlog_\n```\n\n: Level of logging.\nout: Name of the output file\n</code></pre> <pre><code>canu report switch cabling [OPTIONS]\n</code></pre>"},{"location":"_build/markdown/report/#options_3","title":"Options","text":""},{"location":"_build/markdown/report/#-ip","title":"--ip( ) <p>Required The IP address of the switch</p>","text":""},{"location":"_build/markdown/report/#-username_3","title":"--username( ) <p>Switch username</p> <ul> <li> <p>Default</p> <p><code>admin</code></p> </li> </ul>","text":""},{"location":"_build/markdown/report/#-password_3","title":"--password( ) <p>Switch password</p>","text":""},{"location":"_build/markdown/report/#-kea-lease-file_1","title":"--kea-lease-file( ) <p>Kea leases in JSON format from API call used for MAC-to-hostname lookups.</p>","text":""},{"location":"_build/markdown/report/#-sls-file_2","title":"--sls-file( ) <p>SLS file in JSON format from API call used for MAC-to-hostname lookups.</p>","text":""},{"location":"_build/markdown/report/#-smd-file_1","title":"--smd-file( ) <p>SMD ethernetInterfaces in JSON format from API call used for MAC-to-hostname lookups.</p>","text":""},{"location":"_build/markdown/report/#-heuristic-lookups_1","title":"--heuristic-lookups() <p>Make educated guesses and hints about what device is based on MAC.</p>","text":""},{"location":"_build/markdown/report/#-log_2","title":"--log( ) <p>Level of logging.</p> <ul> <li> <p>Options</p> <p>DEBUG | INFO | WARNING | ERROR</p> </li> </ul>","text":""},{"location":"_build/markdown/report/#-out_2","title":"--out( ) <p>Output results to a file</p>","text":""},{"location":"_build/markdown/report/#firmware_1","title":"firmware <p>Report the firmware of a switch (Aruba, Dell, or Mellanox) on the network.</p> <p>There are two different statuses that might be indicated.</p> <ul> <li> <p>\ud83d\udef6 - Pass: Indicates that the switch passed the firmware verification.</p> </li> <li> <p>\u274c - Fail: Indicates that the switch failed the firmware verification. A list of expected firmware versions will be displayed.</p> </li> </ul>","text":""},{"location":"_build/markdown/report/#noqa-d301-b950_2","title":"noqa: D301, B950","text":"<p>Args:</p> <pre><code>ctx: CANU context settings\ncsm: CSM version\nip: Switch IPv4 address\nusername: Switch username\npassword: Switch password\n\n\n```\njson_\n```\n\n: Bool indicating json output\nverbose: Bool indicating verbose output\nout: Name of the output file\n</code></pre> <pre><code>canu report switch firmware [OPTIONS]\n</code></pre>"},{"location":"_build/markdown/report/#options_4","title":"Options","text":""},{"location":"_build/markdown/report/#-csm_1","title":"--csm( ) <p>Required CSM network version</p> <ul> <li> <p>Options</p> <p>1.0 | 1.2 | 1.3 | 1.4 | 1.5 | 1.6</p> </li> </ul>","text":""},{"location":"_build/markdown/report/#-ip_1","title":"--ip( ) <p>Required The IP address of the switch</p>","text":""},{"location":"_build/markdown/report/#-username_4","title":"--username( ) <p>Switch username</p> <ul> <li> <p>Default</p> <p><code>admin</code></p> </li> </ul>","text":""},{"location":"_build/markdown/report/#-password_4","title":"--password( ) <p>Switch password</p>","text":""},{"location":"_build/markdown/report/#-json_1","title":"--json() <p>Output JSON</p>","text":""},{"location":"_build/markdown/report/#-verbose","title":"--verbose() <p>Verbose mode</p>","text":""},{"location":"_build/markdown/report/#-out_3","title":"--out( ) <p>Output results to a file</p>","text":""},{"location":"_build/markdown/rpm_install/","title":"Installing The CANU RPM","text":"<p>Find the unstable and stable RPMs at the following locations.</p> <ul> <li> <p>Unstable RPMs (e.g. main/develop/feature/bugfix branches, anything that is not a git-tag)</p> </li> <li> <p>Stable RPMs (e.g. git-tags)</p> </li> </ul> <p>To install the latest RPM, use <code>zypper</code> or <code>rpm</code>:</p> <pre><code>zypper --plus-repo=https://artifactory.algol60.net/artifactory/csm-rpms/hpe/stable/sle-15sp3 --no-gpg-checks -n in canu -y\nrpm -ivh https://artifactory.algol60.net/ui/native/csm-rpms/hpe/stable/sle-15sp3/canu/x86_64/canu-&lt;version&gt;.rpm\n</code></pre>"},{"location":"_build/markdown/test_network/","title":"canu test","text":"<p>Run tests against the network.</p> <p>Args:</p> <pre><code>ctx: CANU context settings\nusername: Switch username\ncsm: CSM version\npassword: Switch password\nsls_file: JSON file containing SLS data\nsls_address: The address of SLS\nnetwork: The network that is used to connect to the switches.\n\n\n```\nlog_\n```\n\n: enable logging\n\n\n```\njson_\n```\n\n: output test results in JSON format\nping: run the ping test suite\n\n\n```\npre_install_\n```\n\n: Tests to run before CSM installation\n</code></pre> <pre><code>canu test [OPTIONS]\n</code></pre>"},{"location":"_build/markdown/test_network/#options","title":"Options","text":""},{"location":"_build/markdown/test_network/#-sls-file","title":"--sls-file( ) <p>File containing system SLS JSON data.</p>","text":""},{"location":"_build/markdown/test_network/#-network","title":"--network( ) <p>The network that is used to connect to the switches.</p> <ul> <li> <p>Default</p> <p><code>HMN</code></p> </li> <li> <p>Options</p> <p>HMN | CMN</p> </li> </ul>","text":""},{"location":"_build/markdown/test_network/#-log","title":"--log() <p>enable logging.</p>","text":""},{"location":"_build/markdown/test_network/#-json","title":"--json() <p>JSON output.</p>","text":""},{"location":"_build/markdown/test_network/#-ping","title":"--ping() <p>Ping test from all mgmt switches to all NCNs.</p>","text":""},{"location":"_build/markdown/test_network/#-pre-install","title":"--pre-install() <p>Tests to run before installing CSM</p>","text":""},{"location":"_build/markdown/test_network/#-sls-address","title":"--sls-address( ) <ul> <li> <p>Default</p> <p><code>api-gw-service-nmn.local</code></p> </li> </ul>","text":""},{"location":"_build/markdown/test_network/#-password","title":"--password( ) <p>Switch password</p>","text":""},{"location":"_build/markdown/test_network/#-csm","title":"--csm( ) <p>CSM version</p> <ul> <li> <p>Options</p> <p>1.0 | 1.2 | 1.3 | 1.4 | 1.5 | 1.6</p> </li> </ul>","text":""},{"location":"_build/markdown/test_network/#-username","title":"--username( ) <p>Switch username</p> <ul> <li> <p>Default</p> <p><code>admin</code></p> </li> </ul>","text":""},{"location":"_build/markdown/uninstallation/","title":"Uninstallation","text":"<p><code>pip3 uninstall canu</code></p>"},{"location":"_build/markdown/validate/","title":"canu validate","text":"<p>CANU validate commands.</p> <pre><code>canu validate [OPTIONS] COMMAND [ARGS]...\n</code></pre>"},{"location":"_build/markdown/validate/#network","title":"network","text":"<p>Commands that validate the network.</p> <pre><code>canu validate network [OPTIONS] COMMAND [ARGS]...\n</code></pre>"},{"location":"_build/markdown/validate/#bgp","title":"bgp","text":"<p>Validate BGP neighbors.</p> <p>This command will check the BGP neighbors for the switch IP addresses entered. All of the neighbors of a switch must be \u2018Established\u2019, or the verification will fail.</p> <p>If a switch that is not a spine switch is tested, it will show in the results table as \u2018SKIP\u2019.</p> <ul> <li> <p>Enter a comma separated list of IP addresses with the \u2018\u2014ips\u2019 flag.</p> </li> <li> <p>Or read the IP addresses from a file, one IP address per line, using \u2018\u2013ips-file FILENAME\u2019 flag.</p> </li> </ul> <p>If you want to see the individual status of all the neighbors of a switch, use the \u2018\u2013verbose\u2019 flag.</p>"},{"location":"_build/markdown/validate/#noqa-d301","title":"noqa: D301","text":"<p>Args:</p> <pre><code>ctx: CANU context settings\nusername: Switch username\npassword: Switch password\nverbose: Bool indicating verbose output\nnetwork: The network that BGP neighbors are checked\n</code></pre> <pre><code>canu validate network bgp [OPTIONS]\n</code></pre>"},{"location":"_build/markdown/validate/#options","title":"Options","text":""},{"location":"_build/markdown/validate/#-username","title":"--username( ) <p>Switch username</p> <ul> <li> <p>Default</p> <p><code>admin</code></p> </li> </ul>","text":""},{"location":"_build/markdown/validate/#-password","title":"--password( ) <p>Switch password</p>","text":""},{"location":"_build/markdown/validate/#-network","title":"--network( ) <p>The network that BGP neighbors are checked.</p> <ul> <li> <p>Default</p> <p><code>ALL</code></p> </li> <li> <p>Options</p> <p>ALL | NMN | CMN</p> </li> </ul>","text":""},{"location":"_build/markdown/validate/#-verbose","title":"--verbose() <p>Verbose mode</p>","text":""},{"location":"_build/markdown/validate/#cabling","title":"cabling <p>Validate network cabling.</p> <p>CANU can be used to validate that network cabling passes basic validation checks.</p> <p>This command will use LLDP to determine if the network is properly connected architecturally.</p> <p>The validation will ensure that spine switches, leaf switches, edge switches, and nodes all are connected properly.</p>","text":""},{"location":"_build/markdown/validate/#noqa-d301-b950","title":"noqa: D301, B950","text":"<p>Args:</p> <pre><code>ctx: CANU context settings\narchitecture: CSM architecture\nips: Comma separated list of IPv4 addresses of switches\nips_file: File with one IPv4 address per line\nusername: Switch username\npassword: Switch password\n\n\n```\nlog_\n```\n\n: Level of logging.\nout: Name of the output file\n</code></pre> <pre><code>canu validate network cabling [OPTIONS]\n</code></pre>"},{"location":"_build/markdown/validate/#options_1","title":"Options","text":""},{"location":"_build/markdown/validate/#-a-architecture","title":"-a(, --architecture( ) <p>Required CSM architecture</p> <ul> <li> <p>Options</p> <p>Full | TDS | v1</p> </li> </ul>","text":""},{"location":"_build/markdown/validate/#-ips","title":"--ips( ) <p>Comma separated list of IPv4 addresses of switches</p>","text":""},{"location":"_build/markdown/validate/#-ips-file","title":"--ips-file( ) <p>File with one IPv4 address per line</p>","text":""},{"location":"_build/markdown/validate/#-username_1","title":"--username( ) <p>Switch username</p> <ul> <li> <p>Default</p> <p><code>admin</code></p> </li> </ul>","text":""},{"location":"_build/markdown/validate/#-password_1","title":"--password( ) <p>Switch password</p>","text":""},{"location":"_build/markdown/validate/#-log","title":"--log( ) <p>Level of logging.</p> <ul> <li> <p>Options</p> <p>DEBUG | INFO | WARNING | ERROR</p> </li> </ul>","text":""},{"location":"_build/markdown/validate/#-out","title":"--out( ) <p>Output results to a file</p>","text":""},{"location":"_build/markdown/validate/#paddle","title":"paddle","text":"<p>Validate a CCJ file.</p> <p>Pass in a CCJ file to validate that it works architecturally. The validation will ensure that spine switches, leaf switches, edge switches, and nodes all are connected properly.</p>"},{"location":"_build/markdown/validate/#noqa-d301_1","title":"noqa: D301","text":"<p>Args:</p> <pre><code>ctx: CANU context settings\nccj: Paddle CCJ file\nout: Filename for the JSON Topology if requested.\n\n\n```\nlog_\n```\n\n: Level of logging.\n</code></pre> <pre><code>canu validate paddle [OPTIONS]\n</code></pre>"},{"location":"_build/markdown/validate/#options_2","title":"Options","text":""},{"location":"_build/markdown/validate/#-ccj","title":"--ccj( ) <p>CCJ (CSM Cabling JSON) File containing system topology.</p>","text":""},{"location":"_build/markdown/validate/#-out_1","title":"--out( ) <p>Output results to a file</p>","text":""},{"location":"_build/markdown/validate/#-log_1","title":"--log( ) <p>Level of logging.</p> <ul> <li> <p>Options</p> <p>DEBUG | INFO | WARNING | ERROR</p> </li> </ul>","text":""},{"location":"_build/markdown/validate/#paddle-cabling","title":"paddle-cabling","text":"<p>Validate a CCJ file against the current network cabling.</p> <p>Pass in a CCJ file to validate that it works architecturally.</p> <p>This command will also use LLDP to determine the neighbors of the IP addresses passed in to validate that the network is properly connected architecturally.</p> <p>The validation will ensure that spine switches, leaf switches, edge switches, and nodes all are connected properly.</p>"},{"location":"_build/markdown/validate/#noqa-d301_2","title":"noqa: D301","text":"<p>Args:</p> <pre><code>ctx: CANU context settings\ncsm: csm version\nccj: Paddle CCJ file\nips: Comma separated list of IPv4 addresses of switches\nips_file: File with one IPv4 address per line\nusername: Switch username\npassword: Switch password\n\n\n```\nlog_\n```\n\n: Level of logging\nout: Name of the output file\n</code></pre> <pre><code>canu validate paddle-cabling [OPTIONS]\n</code></pre>"},{"location":"_build/markdown/validate/#options_3","title":"Options","text":""},{"location":"_build/markdown/validate/#-csm","title":"--csm( ) <p>Required CSM network version</p> <ul> <li> <p>Options</p> <p>1.0 | 1.2 | 1.3 | 1.4 | 1.5 | 1.6</p> </li> </ul>","text":""},{"location":"_build/markdown/validate/#-ccj_1","title":"--ccj( ) <p>Required CCJ (CSM Cabling JSON) File containing system topology.</p>","text":""},{"location":"_build/markdown/validate/#-ips_1","title":"--ips( ) <p>Comma separated list of IPv4 addresses of switches</p>","text":""},{"location":"_build/markdown/validate/#-ips-file_1","title":"--ips-file( ) <p>File with one IPv4 address per line</p>","text":""},{"location":"_build/markdown/validate/#-username_2","title":"--username( ) <p>Switch username</p> <ul> <li> <p>Default</p> <p><code>admin</code></p> </li> </ul>","text":""},{"location":"_build/markdown/validate/#-password_2","title":"--password( ) <p>Switch password</p>","text":""},{"location":"_build/markdown/validate/#-log_2","title":"--log( ) <p>Level of logging.</p> <ul> <li> <p>Options</p> <p>DEBUG | INFO | WARNING | ERROR</p> </li> </ul>","text":""},{"location":"_build/markdown/validate/#-out_2","title":"--out( ) <p>Output results to a file</p>","text":""},{"location":"_build/markdown/validate/#shcd","title":"shcd","text":"<p>Validate a SHCD file.</p> <p>CANU can be used to validate that an SHCD (SHasta Cabling Diagram) passes basic validation checks.</p> <ul> <li> <p>Use the \u2018\u2013tabs\u2019 flag to select which tabs on the spreadsheet will be included.</p> </li> <li> <p>The \u2018\u2013corners\u2019 flag is used to input the upper left and lower right corners of the table on each tab of the worksheet. If the corners are not specified, you will be prompted to enter them for each tab.</p> </li> <li> <p>The table should contain the 11 headers: Source, Rack, Location, Slot, (Blank), Port, Destination, Rack, Location, (Blank), Port.</p> </li> </ul>"},{"location":"_build/markdown/validate/#noqa-d301-b950_1","title":"noqa: D301, B950","text":"<p>Args:</p> <pre><code>ctx: CANU context settings\narchitecture: CSM architecture\nshcd: SHCD file\ntabs: The tabs on the SHCD file to check, e.g. 10G_25G_40G_100G,NMN,HMN.\ncorners: The corners on each tab, comma separated e.g. \u2018J37,U227,J15,T47,J20,U167\u2019.\nedge: Vendor of the edge router\nout: Filename for the JSON Topology if requested.\n\n\n```\njson_\n```\n\n: Bool indicating json output\n\n\n```\nlog_\n```\n\n: Level of logging.\n</code></pre> <pre><code>canu validate shcd [OPTIONS]\n</code></pre>"},{"location":"_build/markdown/validate/#options_4","title":"Options","text":""},{"location":"_build/markdown/validate/#-a-architecture_1","title":"-a(, --architecture( ) <p>Required CSM architecture</p> <ul> <li> <p>Options</p> <p>Full | TDS | V1</p> </li> </ul>","text":""},{"location":"_build/markdown/validate/#-shcd","title":"--shcd( ) <p>Required SHCD file</p>","text":""},{"location":"_build/markdown/validate/#-tabs","title":"--tabs( ) <p>The tabs on the SHCD file to check, e.g. 10G_25G_40G_100G,NMN,HMN.</p>","text":""},{"location":"_build/markdown/validate/#-corners","title":"--corners( ) <p>The corners on each tab, comma separated e.g. \u2018J37,U227,J15,T47,J20,U167\u2019.</p>","text":""},{"location":"_build/markdown/validate/#-edge","title":"--edge( ) <p>Required Vendor of Edge router</p> <ul> <li> <p>Options</p> <p>Aruba | Arista</p> </li> </ul>","text":""},{"location":"_build/markdown/validate/#-out_3","title":"--out( ) <p>Output results to a file</p>","text":""},{"location":"_build/markdown/validate/#-json","title":"--json() <p>Output JSON model to a file</p>","text":""},{"location":"_build/markdown/validate/#-log_3","title":"--log( ) <p>Level of logging.</p> <ul> <li> <p>Options</p> <p>DEBUG | INFO | WARNING | ERROR</p> </li> </ul>","text":""},{"location":"_build/markdown/validate/#shcd-cabling","title":"shcd-cabling","text":"<p>Validate a SHCD file against the current network cabling.</p> <p>Pass in a SHCD file and a list of IP address to compair the connections.</p> <p>The output of the validate shcd-cabling command will show a port by port comparison between the devices found in the SHCD and devices found on the network. If there is a difference in what is found connected to a devices port in SHCD and Cabling, the line will be highlighted in \u2018red\u2019.</p>"},{"location":"_build/markdown/validate/#noqa-d301-b950_2","title":"noqa: D301, B950","text":"<p>Args:</p> <pre><code>ctx: CANU context settings\ncsm: csm version\narchitecture: CSM architecture\nshcd: SHCD file\ntabs: The tabs on the SHCD file to check, e.g. 10G_25G_40G_100G,NMN,HMN.\ncorners: The corners on each tab, comma separated e.g. \u2018J37,U227,J15,T47,J20,U167\u2019.\nips: Comma separated list of IPv4 addresses of switches\nips_file: File with one IPv4 address per line\nmacs: Print NCN MAC addresses\nusername: Switch username\npassword: Switch password\n\n\n```\nlog_\n```\n\n: Level of logging\nout: Name of the output file\n</code></pre> <pre><code>canu validate shcd-cabling [OPTIONS]\n</code></pre>"},{"location":"_build/markdown/validate/#options_5","title":"Options","text":""},{"location":"_build/markdown/validate/#-csm_1","title":"--csm( ) <p>Required CSM network version</p> <ul> <li> <p>Options</p> <p>1.0 | 1.2 | 1.3 | 1.4 | 1.5 | 1.6</p> </li> </ul>","text":""},{"location":"_build/markdown/validate/#-a-architecture_2","title":"-a(, --architecture( ) <p>Required CSM architecture</p> <ul> <li> <p>Options</p> <p>Full | TDS | V1</p> </li> </ul>","text":""},{"location":"_build/markdown/validate/#-shcd_1","title":"--shcd( ) <p>Required SHCD file</p>","text":""},{"location":"_build/markdown/validate/#-tabs_1","title":"--tabs( ) <p>The tabs on the SHCD file to check, e.g. 10G_25G_40G_100G,NMN,HMN.</p>","text":""},{"location":"_build/markdown/validate/#-corners_1","title":"--corners( ) <p>The corners on each tab, comma separated e.g. \u2018J37,U227,J15,T47,J20,U167\u2019.</p>","text":""},{"location":"_build/markdown/validate/#-ips_2","title":"--ips( ) <p>Comma separated list of IPv4 addresses of switches</p>","text":""},{"location":"_build/markdown/validate/#-ips-file_2","title":"--ips-file( ) <p>File with one IPv4 address per line</p>","text":""},{"location":"_build/markdown/validate/#-username_3","title":"--username( ) <p>Switch username</p> <ul> <li> <p>Default</p> <p><code>admin</code></p> </li> </ul>","text":""},{"location":"_build/markdown/validate/#-password_3","title":"--password( ) <p>Switch password</p>","text":""},{"location":"_build/markdown/validate/#-log_4","title":"--log( ) <p>Level of logging.</p> <ul> <li> <p>Options</p> <p>DEBUG | INFO | WARNING | ERROR</p> </li> </ul>","text":""},{"location":"_build/markdown/validate/#-out_4","title":"--out( ) <p>Output results to a file</p>","text":""},{"location":"_build/markdown/validate/#-macs","title":"--macs() <p>Print NCN MAC addresses</p>","text":""},{"location":"_build/markdown/validate/#switch","title":"switch","text":"<p>Commands that validate a switch.</p> <pre><code>canu validate switch [OPTIONS] COMMAND [ARGS]...\n</code></pre>"},{"location":"_build/markdown/validate/#config","title":"config <p>Validate switch config.</p> <p>After config has been generated, CANU can validate the generated config against running switch config. The running config can be from either an IP address, or a config file.</p> <ul> <li> <p>To get running config from an IP address, use the flags \u2018\u2013ip 192.168.1.1 \u2013username USERNAME \u2013password PASSWORD\u2019.</p> </li> <li> <p>To get running config from a file, use the flag \u2018\u2013running RUNNING_CONFIG.cfg\u2019 instead.</p> </li> </ul> <p>After running the \u2018validate switch config\u2019 command, you will be shown a line by line comparison of the currently running switch config against the config file that was passed in. You will also be given a list of remediation commands that can be typed into the switch to get the running config to match the config file. There will be a summary table at the end highlighting the most important differences between the configs.</p> <ul> <li> <p>Lines that are red and start with a \u2018-\u2019 are in the running config, but not in the config file</p> </li> <li> <p>Lines that are green and start with a \u2018+\u2019 are not in the running config, but are in the config file</p> </li> <li> <p>Lines that are blue and start with a \u2018?\u2019 are attempting to point out specific line differences</p> </li> </ul>","text":""},{"location":"_build/markdown/validate/#noqa-d301-b950_3","title":"noqa: D301, B950","text":"<p>Args:</p> <pre><code>ctx: CANU context settings\nip: The IP address of the switch\nrunning: The running switch config file\nusername: Switch username\npassword: Switch password\ngenerated_config: Generated config file\nout: Name of the output file\nvendor: Switch vendor. Aruba, Dell, or Mellanox\nremediation: output remediation config\n</code></pre> <pre><code>canu validate switch config [OPTIONS]\n</code></pre>"},{"location":"_build/markdown/validate/#options_6","title":"Options","text":""},{"location":"_build/markdown/validate/#-ip","title":"--ip( ) <p>The IP address of the switch with running config</p>","text":""},{"location":"_build/markdown/validate/#-running","title":"--running( ) <p>The running switch config file</p>","text":""},{"location":"_build/markdown/validate/#-vendor","title":"--vendor( ) <p>The vendor is needed if passing in the running config from a file</p> <ul> <li> <p>Options</p> <p>Aruba | Dell | Mellanox</p> </li> </ul>","text":""},{"location":"_build/markdown/validate/#-username_4","title":"--username( ) <p>Switch username</p> <ul> <li> <p>Default</p> <p><code>admin</code></p> </li> </ul>","text":""},{"location":"_build/markdown/validate/#-password_4","title":"--password( ) <p>Switch password</p>","text":""},{"location":"_build/markdown/validate/#-generated","title":"--generated( ) <p>Generated config file</p>","text":""},{"location":"_build/markdown/validate/#-out_5","title":"--out( ) <p>Output results to a file</p>","text":""},{"location":"_build/markdown/validate/#-remediation","title":"--remediation() <p>Outputs commands to get from the running-config to generated config, Mellanox not supported</p>","text":""},{"location":"_build/markdown/venv/","title":"Setup A Virtual Environment","text":"<p>Besides using the CANU container, setting up a Python virtual environment and installing canu from this repo is another option for using and developing CANU.</p> <pre><code>git clone\ncd canu\npython3 -m venv .venv\nsource ./.venv/bin/activate\npython3 -m pip install 'setuptools_scm[toml]'\npython3 -m pip install . \n# or python3 -m pip install --editable . \n</code></pre>"},{"location":"_build/markdown/venv/#development-build","title":"Development Build","text":"<p>You can install CANU in editable mode, which allows for changes you make in the code to show up immediately when running CANU.</p> <pre><code>python3 -m pip install --editable .\n</code></pre>"},{"location":"_build/markdown/venv/#install-extras","title":"Install Extras","text":"<p>You may also want to install some CANU\u2019s extras if you are developing it.  For example, you may want to run some of the unit tests, or generate new documentation.  These extras can be seen in <code>pyproject.toml</code>.</p> <pre><code>python3 -m pip install '.[docs,lint,test]'\n</code></pre>"},{"location":"_build/markdown/venv/#exiting-the-virtual-environment","title":"Exiting The Virtual Environment","text":"<p>When you are done working in the virtual environment, exit out it:</p> <pre><code>deactivate\n</code></pre>"},{"location":"_build/markdown/versioning/","title":"Versioning","text":"<p>The version is derived from Git by the <code>setuptools_scm</code> Python module and follows PEP0440\u2019s version identification and dependency specification for final and pre releases.</p>"},{"location":"_build/markdown/versioning/#classification","title":"Classification","text":"<p>The items below denote how stable, pre-release, and unstable versions are classified through version strings.</p> <ul> <li>(stable) release: A git-tag following the <code>X.Y.Z</code> semver format is considered a stable, release version.</li> </ul> <pre><code># Format:\n# {tag}\n# X.Y.Z\n# X - Major\n# Y - Minor\n# Z - Micro (a.k.a. patch)\n0.1.2\n</code></pre> <ul> <li>(stable) post-release: A git-tag following the <code>X.Y.Z.postN</code> (where <code>N</code> is an integer), indicates a post-release. These are seldom used, and are strictly for handling documentation, packaging, or other meta updates after a release tag was already created where it isn\u2019t warranted to publish an entirely new release.</li> </ul> <pre><code># Format:\n# {tag}\n# X.Y.Z.postN\n# X - Major\n# Y - Minor\n# Z - Micro (a.k.a. patch)\n# Z - Post release [1-9]+\n0.1.2.post1\n</code></pre> <p>NOTE <code>X.Y.Z.post0</code> is equivalent to <code>X.Y.Z</code>, <code>post0</code> indicates the first release.</p> <ul> <li>(unstable) pre-release: A git-tag with an <code>a</code>(lpha), <code>b</code>(eta), or <code>r</code>(elease) <code>c</code>(andidate) annotation and an identification number <code>N</code> denotes a pre-release/preview.</li> </ul> <p>For <code>canu</code>, these are sometimes created before an official release (e.g. 1.7.0a1 might exist before 1.7.0 is released). Additionally the beta and release candidate tags may be skipped. Whether an alpha, beta, or release candidate pre-release is taken is entirely up to the <code>canu</code> release management team.</p> <pre><code># Format:\n# {tag}[{a|b|rc}N]\n0.1.2a1\n0.1.2b1\n0.1.2rc1\n</code></pre> <ul> <li> <p>(unstable) development: Development builds auto-increment the micro version (the <code>Z</code> in <code>X.Y.Z</code>) or pre-release version (the <code>N</code> in <code>X.Y.Z{[a|b|rc]N}</code>), and then append a suffix based on whether the working directory was clean, dirty, or mixed.</p> <ul> <li>clean: When the version shows an appended <code>devN+{scm_letter}{revision_short_hash}</code>, that means there have been commits made since the previous git-tag.</li> </ul> </li> </ul> <pre><code># Format:\n# {next_version}.dev{distance}+{scm_letter}{revision_short_hash}\n\n# If the previous git-tag was 0.1.2:\n           0.1.3.dev4+g818da8a\n\n# If the previous get-tag was a pre-release of 0.1.3a1:\n         0.1.3a2.dev4+g818da8a\n</code></pre> <pre><code>* ***dirty*** When the version shows an appended `.d{YYYYMMDD}` datestamp, that means there were modified/uncommitted changes in the working directory when the application was built.\n</code></pre> <pre><code># Format:\n# {next_version}.d(datestamp}\n\n# If the previous git-tag was 0.1.2:\n           0.1.3.d20230123\n\n# If the previous get-tag was a pre-release of 0.1.3a1:\n         0.1.2a2.d20230123\n</code></pre> <pre><code>* ***mixed*** When the version shows a development tag with an appended datestamp, this means commits have been made but there were uncommitted changes present in the working directory when the application was built.\n</code></pre> <pre><code># Format:\n# {next_Version}.dev{distance}+{scm_letter}{revision_short_hash}.d{datestamp}\n\n# If the previous git-tag was 0.1.2:\n           0.1.3.dev3+g3071655.d20230123\n\n# If the previous get-tag was a pre-release of 0.1.3a1:\n         0.1.3a2.dev3+g3071655.d20230123\n</code></pre>"},{"location":"_build/markdown/versioning/#configuration","title":"Configuration","text":"<p>The <code>setuptools_scm</code> module is configured by <code>pyproject.toml</code>.</p> <p>For more information regarding configuration of <code>setuptools_scm</code>, see version number construction.</p>"},{"location":"network_configuration_and_upgrade/","title":"Canu network configuration and upgrade quick guide","text":""},{"location":"network_configuration_and_upgrade/#introduction","title":"Introduction","text":"<p>The intent for this documentation is to help install and upgrade Aruba, Dell, and Mellanox configurations using Canu.</p> <p>This document is intended for network administrators and support personnel.</p> <p>The display and command line illustrated in this document are examples and might not exactly match your particular environment. The switch and accessory drawings in this document are for illustration only, and may not exactly match your installed products.</p>"},{"location":"network_configuration_and_upgrade/#index","title":"Index","text":"<ul> <li>Collect data</li> <li>Validate SHCD</li> <li>Checks and validations</li> <li>Logging and updates</li> <li>Generate CSM switch config</li> <li>Compare CSM switch configs with running configs</li> <li>Custom config injection</li> <li>Analyze CSM configuration upgrade</li> <li>Typical CANU validation errors and how to fix them</li> </ul>"},{"location":"network_configuration_and_upgrade/analyze_config/","title":"Analyze CSM configuration update","text":"<p>Configuration updates depending on the current version of network configuration may be as easy as adding few lines or be complete rip &amp; replace operation which may lead you to choosing to wipe the existing configuration or just simply adding few lines in the configuration.  </p> <p>Always before making configuration changes, analyze the changes shown in the above configuration diff section. </p> <p>For example:  </p> <pre><code>Config differences between running config and generated config \nSafe Commands \nThese commands should be safe to run while the system is running. \n------------------------------------------------------------------------- \ninterface 1/1/mgmt0 \n  no shutdown \ninterface 1/1/30 \n  mtu 9198 \n  description vsx isl \ninterface vlan 7 \n  ip ospf 1 area 0.0.0.0 \nrouter ospf 1 vrf Customer \n  router-id 10.2.0.2 \n  default-information originate \n  area 0.0.0.0 \n\n------------------------------------------------------------------------- \nManual Commands \n\nThese commands may cause disruption to the system and should be done only during a maintenance period. \n\nIt is recommended to have an out of band connection while running these commands. \n------------------------------------------------------------------------- \ninterface 1/1/mgmt0 \n  vrf attach keepalive \n  ip address 192.168.255.0/31 \ninterface 1/1/30 \n  no vrf attach keepalive \n  lag 256 \n------------------------------------------------------------------------- \nCommands NOT classified as Safe or Manual \nThese commands include authentication as well as unique commands for the system. \nThese should be looked over carefully before keeping/applying. \n------------------------------------------------------------------------- \nno profile Leaf \nno debug ospfv2 all \nno snmp-server vrf default  \nno route-map CMN permit seq 10 \nno router ospf 2 vrf Customer \nrouter bgp 65533 \n  vrf Customer \n    no exit-address-family \n------------------------------------------------------------------------- \nSwitch: sw-spine-001 \nDifferences \n------------------------------------------------------------------------- \nIn Generated Not In Running (+)     |  In Running Not In Generated (-)    \n------------------------------------------------------------------------- \nTotal Additions:                 6  |  Total Deletions:                33 \nInterface:                       1  |  Interface:                       3 \nRouter:                          1  |  Router:                          2 \n</code></pre> <p>Back to index</p>"},{"location":"network_configuration_and_upgrade/checks_and_validations/","title":"Checks and validations","text":"<p>A worksheet that runs \"cleanly\u201d will have checked that: </p> <ul> <li>Nodes are \u201carchitecturally allowed\u201d to connect to each other. </li> <li>No overlapping ports specified. </li> <li>Node connections can be made at the appropriate speeds. </li> </ul> <p>A clean run will have the following sections: </p> <ul> <li>SHCD Node Connections \u2013 A high level list of all node connections on the system. </li> <li>SHCD Port Usage \u2013 A Port-by-port detailed listing of all node connections on the system. </li> </ul> <p>Warnings </p> <ul> <li>A list of nodes found that are not categorized on the system. NOTE this list is important as it could include misspellings of nodes that should be included! </li> <li>A list of cell-by-cell warnings of misspellings and other nit-picking items that CANU has autocorrected on the system. </li> </ul> <p>Critically, the Warnings output will contain a section headed \u201cNode type could not be determined for the following\u201d.  This needs to be carefully reviewed because it may contain site uplinks that are not tracked by CANU but may also contain mis-spelled or mis-categorized nodes. As an example: </p> <pre><code>Node type or port number could not be determined for the following. \nThese nodes are not currently included in the model. \n(This may be a missing architectural definition/lookup or a spelling error) \n---------------------------------------------------------------------------\n\nSheet: 10G_25G_40G_100G \nCell: I96      Name: CAN switch \nCell: I97      Name: CAN switch \nCell: O87      Name: CAN switch \nCell: O90      Name: CAN switch \nCell: O93      Name: CAN switch \nCell: O100     Name: CAN switch \nCell: O103     Name: CAN switch \nCell: I38      Name: sw-spinx-002 \nSheet: HMN \nCell: R36      Name: SITE \nSheet: NMN \nCell: P16      Name: SITE \n</code></pre> <p>From the above example two important observations can be made: </p> <ul> <li>CAN and SITE uplinks are not in the \u201cclean run\u201d model. This means that these ports will not be configured. </li> <li>Critically, in the example cell I38 has a name of \u201csw-spinx-002\". This should be noted as a misspelling of \u201csw-spine-002\" and corrected. </li> </ul> <p>Today CANU validates many things, but a future feature is full cable specification checking of nodes (e.g. what NCN ports go to which switches to properly form bonds).  There are several CANU roadmap items, but today a manual review of the \u201cSHCD Port Usage\u201d connections list is vital.  </p> <p>Specifically, check: </p> <ul> <li>K8S NCN cabling (manager, worker, storage) follows PoR cabling Link to cable management </li> <li>UAN NCN cabling (UAN, viz, and other Application Nodes) follow PoR cabling Link to cable management</li> <li>Switch pair cabling is appropriate for VSX, MAGP etc. </li> <li>Switch-to-switch cabling is appropriate for LAG formation. </li> <li>\u201cOther\u201d nodes on the network seem correct. </li> </ul> <p>Back to index</p>"},{"location":"network_configuration_and_upgrade/collect_data/","title":"Collect Data","text":"<ul> <li> <p>Retrieve the most up-to-date SHCD spreadsheet. Accuracy in this spreadsheet is critical.</p> </li> <li> <p>Retrieve SLS file from a Shasta system (log in to ncn-m001) on a NCN, this will output the sls file to a file called sls_file.json in your current working directory.</p> </li> </ul> <pre><code>cray sls dumpstate list  --format json &gt;&gt; sls_file.json\n</code></pre> <ul> <li>Retrieve switch running configs (log in to ncn-m001)</li> </ul> <p>Log into the management network switches, you can get the ips/hostnames by running this command on a NCN:</p> <pre><code>cat /etc/hosts | grep sw-\n</code></pre> <p>If /etc/hosts is not available because the system is being installed you will be on the pit and will need to run:</p> <pre><code>cat /var/www/ephemeral/prep/redbull/sls_input_file.json | jq \u2018.Networks | .HMN | .ExtraProperties.Subnets | .[] | select(.Name==\u201cnetwork_hardware\u201d)'\n</code></pre> <p>Run the script below to automatically collect all switch configs.  If the command fails then log in to each individual switch and run 'show run'.</p> <pre><code>canu backup network --sls-file sls_input_file.json --network HMN --folder running\n</code></pre> <p>NOTE: --network CMN / HMN     * CMN = connecting from external network     * HMN = connecting from internal network</p> <ul> <li>(optional): Retrieve customizations file. (log in from ncn-m001)</li> </ul> <pre><code>kubectl -n loftsman get secret site-init -o json | jq -r '.data.\"customizations.yaml\"' | base64 -d &gt; customizations.yaml\n</code></pre> <p>This will output the customizations file to a file called customizations.yaml in your current working directory.</p> <p>Back to index</p>"},{"location":"network_configuration_and_upgrade/compare_config/","title":"Compare CSM switch configs with running configs","text":"<p>Next you would want to compare the current running configuration with the generated configuration.  </p> <p>For the comparison, since we\u2019ve pulled the configuration to our working directory we can compare the files locally. </p> <p>You can also have Canu pull the configuration from the switch by defining ip list and username &amp;  password field.  </p> <p>Example: </p> <pre><code>canu validate switch config --ip 192.168.1.1 --username USERNAME --password PASSWORD --generated ./generated/sw-spine-001.cfg \n</code></pre> <p>Doing file comparisons on your local machine:  </p> <ul> <li>Comparing configuration file for single switch:  </li> </ul> <pre><code>canu validate switch config --running ./running/sw-spine-001.cfg --generated sw-spine-001.cfg  \n</code></pre> <p>Comparing configuration files for full system:  </p> <pre><code>canu validate network config --csm 1.2 --running ./running/ --generated ./generated/ \n</code></pre> <p>CANU generated switch configurations will not include any ports or devices not defined in the model. These were previously discussed in the Validate the SHCD section but include edge uplinks (CAN/CMN) and custom configurations applied by the customer.  When looking at the generated configurations being applied against existing running configurations CANU will recommend removal of some critical configurations. It is vital that these devices and configurations be identified and protected. This can be accomplished in three ways: </p> <ul> <li>Provide CANU validation of generated configurations against running configurations with an override or \u201cblackout\u201d configuration \u2013 a yaml file which tells CANU to ignore customer-specific configurations. The process of creating this file was previously described in the This file will be custom to every site and must be distributed with the analysis and configuration file bundle to be used in the future. See the section \u201cConfiguration Blackout\u201d. </li> <li>Based on experience and knowledge the network, manually reorder the proposed upgrade configurations. This may require manual exclusion of required configurations which the CANU analysis says to remove. </li> <li>Some devices may be used by multiple sites and may not currently be in the CANU architecture and configuration. If a device type is more universally used on several sites, then it should be added to the architectural and configuration definitions via the CANU code and Pull Request (PR) process.</li> </ul> <p>NOTE: site defined uplinks/custom configuration can be added to the configurations using canu config injection.</p> <p>Back to index</p>"},{"location":"network_configuration_and_upgrade/custom_config/","title":"Generate Switch Configs Including Custom Configurations","text":"<p>Pass in a switch config file that CANU will inject into the generated config. A use case would be to add custom site connections. This config file will overwrite previously generate config.</p> <p>The custom-config file type is YAML and a single file can be used for multiple switches. You will need to specify the switch name and what config inject. The custom-config feature is using the hierarchical configuration library, documentation can be found here https://netdevops.io/hier_config/.</p> <p>Custom config file examples:</p> <p>Aruba</p> <pre><code>sw-spine-001:  |\n    ip route 0.0.0.0/0 10.103.15.185\n    interface 1/1/36\n        no shutdown\n        ip address 10.103.15.186/30\n        exit\n    system interface-group 3 speed 10g\n    interface 1/1/2\n        no shutdown\n        mtu 9198\n        description sw-spine-001:16==&gt;ion-node\n        no routing\n        vlan access 7\n        spanning-tree bpdu-guard\n        spanning-tree port-type admin-edge\nsw-spine-002:  |\n    ip route 0.0.0.0/0 10.103.15.189\n    interface 1/1/36\n        no shutdown\n        ip address 10.103.15.190/30\n        exit\n    system interface-group 3 speed 10g\nsw-leaf-bmc-001:  |\n    interface 1/1/20\n        no routing\n        vlan access 4\n        spanning-tree bpdu-guard\n        spanning-tree port-type admin-edge\n</code></pre> <p>Mellanox/Dell</p> <pre><code>sw-spine-001:  |\n    interface ethernet 1/1 speed 10G force\n    interface ethernet 1/1 description \"sw-spine02-1/16\"\n    interface ethernet 1/1 no switchport force\n    interface ethernet 1/1 ip address 10.102.255.14/30 primary\n    interface ethernet 1/1 dcb priority-flow-control mode on force\n    ip route vrf default 0.0.0.0/0 10.102.255.13\nsw-spine-002:  |\n    interface ethernet 1/16 speed 10G force\n    interface ethernet 1/16 description \"sw-spine01-1/16\"\n    interface ethernet 1/16 no switchport force\n    interface ethernet 1/16 ip address 10.102.255.34/30 primary\n    interface ethernet 1/16 dcb priority-flow-control mode on force\n    ip route vrf default 0.0.0.0/0 10.102.255.33\nsw-leaf-bmc-001:  |\n    interface ethernet1/1/12\n      description sw-leaf-bmc-001:12==&gt;cn003:2\n      no shutdown\n      switchport access vlan 4\n      mtu 9216\n      flowcontrol receive off\n      flowcontrol transmit off\n      spanning-tree bpduguard enable\n      spanning-tree port type edge\n    interface vlan7\n        description CMN\n        no shutdown\n        ip vrf forwarding Customer\n        mtu 9216\n        ip address 10.102.4.100/25\n        ip access-group cmn-can in\n        ip access-group cmn-can out\n        ip ospf 2 area 0.0.0.0\n</code></pre> <p>To generate switch configuration with custom config injection.</p> <pre><code>$ canu generate switch config --csm 1.2 -a full --shcd FILENAME.xlsx --tabs INTER_SWITCH_LINKS,NON_COMPUTE_NODES,HARDWARE_MANAGEMENT,COMPUTE_NODES --corners J14,T44,J14,T48,J14,T24,J14,T23 --sls-file SLS_FILE --name sw-spine-001 --custom-config CUSTOM_CONFIG_FILE.yaml\n</code></pre>"},{"location":"network_configuration_and_upgrade/custom_config/#generate-network-config","title":"Generate Network Config","text":"<p>CANU can also generate switch config for all the switches on a network.</p> <p>In order to generate network config, a valid SHCD or CCJ must be passed in and system variables must be read in from either CSI output or the SLS API. The instructions are exactly the same as the above <code>generate Switch Config](#generate-switch-config)</code> except there will not be a hostname and a folder must be specified for config output using the <code>--folder FOLDERNAME</code> flag.</p> <p>To generate switch config from a CCJ paddle run: </p> <pre><code>canu generate network config --csm 1.2 --ccj paddle.json --sls-file SLS_FILE --folder FOLDERNAME\n</code></pre> <p>To generate switch config from SHCD run: </p> <pre><code>$ canu generate network config --csm 1.2 -a full --shcd FILENAME.xlsx --tabs INTER_SWITCH_LINKS,NON_COMPUTE_NODES,HARDWARE_MANAGEMENT,COMPUTE_NODES --corners J14,T44,J14,T48,J14,T24,J14,T23 --sls-file SLS_FILE --folder switch_config\n\nsw-spine-001 Config Generated\nsw-spine-002 Config Generated\nsw-leaf-001 Config Generated\nsw-leaf-002 Config Generated\nsw-leaf-003 Config Generated\nsw-leaf-004 Config Generated\nsw-cdu-001 Config Generated\nsw-cdu-002 Config Generated\nsw-leaf-bmc-001 Config Generated\n</code></pre>"},{"location":"network_configuration_and_upgrade/custom_config/#generate-network-config-with-custom-config-injection","title":"Generate Network Config With Custom Config Injection","text":"<p>This option allows extension and maintenance of switch configurations beyond plan-of-record. A YAML file expresses custom configurations across the network and these configurations are merged with the plan-of-record configurations.</p> <p>WARNING: Extreme diligence should be used applying custom configurations which override plan-of-record generated configurations. Custom configurations will overwrite generated configurations! Override/overwrite is by design to support and document cases where site-interconnects demand \"nonstandard\" configurations or a bug must be worked around.</p> <p>The instructions are exactly the same as Generate Switch Config with Custom Config Injection</p> <p>To generate network configuration with custom config injection run</p> <pre><code>canu generate network config --csm 1.2 -a full --shcd FILENAME.xlsx --tabs INTER_SWITCH_LINKS,NON_COMPUTE_NODES,HARDWARE_MANAGEMENT,COMPUTE_NODES --corners J14,T44,J14,T48,J14,T24,J14,T23 --sls-file SLS_FILE --folder switch_config --custom-config CUSTOM_CONFIG_FILE.yaml\n</code></pre>"},{"location":"network_configuration_and_upgrade/generate_config/","title":"Generate CSM switch configs","text":"<p>Generating configuration files can be done for singular switch or for the full system. For example; in a case where you suspect a configuration issue on single switch you can generate just that one file for easier debugging purposes.</p> <ul> <li>Generating configuration file for single switch:</li> </ul> <pre><code>canu generate switch config --csm 1.2 -a full --ccj hela-ccj.json  --sls-file sls_file.json --name sw-spine-001 --folder generated\n</code></pre> <ul> <li>Generating configuration files for the entire system:</li> </ul> <pre><code>canu generate network config --csm 1.2 -a full --ccj hela-ccj.json  --sls-file sls_file.json  --folder generated\n</code></pre> <p>The following are the different architectures that can be specified:</p> <p>Again, make sure that you select the correct (-a) architecture specific to your setup:</p> <ul> <li>Tds \u2013 Aruba-based Test and Development System. These are small systems characterized by Kubernetes NCNs cabling directly to the spine.</li> <li>Full \u2013 Aruba-based Leaf-Spine systems, usually customer production systems.</li> <li>V1 \u2013 Dell and Mellanox based systems of either a TDS or Full layout.</li> </ul> <p>Generating a configuration file can be done for a single switch, or for the full system. Below are example commands for both scenarios:</p> <p>Important</p> <p>Modify the following items in your command:</p> <ul> <li><code>--csm</code> : Which CSM version configuration do you want to use? For example, 1.2 or 1.0</li> <li><code>--a</code>   : What is the system architecture? (See above)</li> <li><code>--ccj</code> : Match the <code>ccj.json</code> file to the one you created for your system.</li> <li> <p><code>--sls</code> : Match the <code>sls_file.json</code> to the one you created for your system.</p> </li> <li> <p>Generate a configuration file for single switch:</p> </li> </ul> <p><code>bash   ncn# canu generate switch config --csm 1.2 -a full --ccj system-ccj.json  --sls-file sls_file.json --name sw-spine-001</code></p> <ul> <li>Generate a configuration files for full system:</li> </ul> <p><code>bash   ncn# canu generate network config --csm 1.2 -a full --ccj system-ccj.json  --sls-file sls_file.json --folder generated</code></p> <p>Back to index</p>"},{"location":"network_configuration_and_upgrade/logging_and_updates/","title":"Logging and updates","text":"<p>Once the SHCD has run cleanly through CANU and CANU output has been manually validated, changes to the SHCD should be \u201ccommitted\u201d so that work is not lost, and other users can take advantage of the CANU changes.  </p> <p>Add an entry to the changelog Config. Summary first worksheet.  The changelog should include: </p> <ul> <li>The CANU command line used to validate the spreadsheet. </li> <li>The CANU version being used to validate the spreadsheet. </li> <li>An overview of changes made to the spreadsheet. </li> </ul> <p>After an SHCD has been validated it should be uploaded to an official storage location \u2013 customer communication (CAST ticket for customers) or SharePoint (internal systems and sometimes customer systems). </p> <p>After validation a Paddle or CCJ JSON file must be generated.  This file will be used instead of the SHCD for all subsequent operations.  To generate the Paddle/CCJ file use the previous <code>canu validate shcd</code> command and add the following to the end <code>--json \u2013out &lt;system name&gt;-ccj.json</code>.  Using the above example the command would become: </p> <pre><code>canu validate shcd -a full --shcd ./HPE\\ System\\ Hela\\ CCD.revA27.xlsx --tabs 10G_25G_40G_100G,NMN --corners I37,T107,J15,T16 --json --out hela-ccj.json  \n</code></pre> <p>Back to index</p>"},{"location":"network_configuration_and_upgrade/upgrade_plan/","title":"Planning for CSM upgrade/install","text":"<p>Creating an upgrade plan is always going to be unique and dependent on the requirements of the upgrade path.  </p> <p>Some release versions of the network configuration require coupled upgrade of software to enable new software functionality or bug fixes that may add time required to do the full upgrade.  </p> <p>For example: in CSM 1.0 to CSM 1.2 we will upgrade Aruba switches to newer code.  </p> <p>In another words: n cases where configuration changes are extensive you may want to consider the extent of the generated configurations after review that maybe best option is to fully wipe the existing switch configuration and build from scratch</p> <p>This will prevent human error, especially from the extensive changes like say modifying 10\u2019s or 100\u2019s of ports away and have you installed the generated configuration via the system without having to do the individual changes by hand.  </p> <p>In addition to firmware upgrade paths, the application of CANU-generated switch configurations should be carefully considered and detailed. The following are important considerations: </p> <ul> <li>Critically analyze proposed changes to ensure the customer does not have an unexpected outage. </li> <li>Provide a holistic upgrade plan which includes switch-by-switch ordered changes and minimizes system outages. Typically, this should begin on the periphery of the network (leaf-bmc's) and move centrally towards spines and site uplinks. </li> <li>Where system outages or interruptions are expected to occur, provide details on the change order of operations, expected timing of interruptions and guidance should the interruption be beyond expected timing. </li> </ul> <p>The resulting \u201cplan\u201d should provide a procedure which can be followed by the customer/installer to upgrade the system from current state.   </p> <p>Back to index</p>"},{"location":"network_configuration_and_upgrade/validate_shcd/","title":"Validate SHCD","text":"<p>Use CANU (CSM Automated Network Utility) to validate the SHCD. SHCD validation is required to ensure Plan-of-Record network configurations are generated. This is an iterative process to create a model of the entire network topology connection-by-connection.</p> <ul> <li> <p>Open existing SHCD in Excel.</p> </li> <li> <p>Save a new copy with an incremented revision number \u2013 make sure you are editing the updated version.</p> </li> </ul> <p>Several worksheets (tabs) are used to store the topology of the management network.</p> <p>Begin validation in the following order:</p> <ul> <li> <p>10G_25G_40G_100G tab (or some variation thereof) contains switch-to-switch connections as well as NCN server connections to the switch.</p> </li> <li> <p>NMN contains network management nodes</p> </li> <li> <p>HMN contains device BMC\u2019s and other 1G management ports.</p> <ul> <li>SHCD HMN Tab/HMN Connections Rules</li> </ul> </li> <li> <p>MTN_TDS, Mountain-TDS-Management (or some variation thereof for Mountain cabinets).</p> </li> </ul> <p>Start with the 10G_25G_40G_100G tab and select the upper left corner and lower right corner of the spreadsheet with the information that looks like the line below:</p> <p>Source | Rack | Location | Slot | Port Destination | Rack | Location Port</p> <p>This is a block of data on the right hand of the worksheet and is not the calculated values used for cable labels on the left-hand side.</p> <p></p> <p>In this example above the 10G_25G_40G_100G worksheet has the upper left and lower right corners of I37 and T107 respectively.</p> <p>Use CANU to validate this worksheet.</p> <pre><code>canu validate shcd -a full --shcd ./HPE\\ System\\ Hela\\ CCD.revA27.xlsx --tabs 10G_25G_40G_100G --corners I37,T107\n</code></pre> <p>-a or \u2013architecture can be tds, full or v1 (case insensitive) for:</p> <ul> <li> <p>tds \u2013 Aruba-based Test and Development System. These are small systems characterized by Kubernetes NCNs cabling directly to the spine.</p> </li> <li> <p>full    \u2013 Aruba-based Leaf-Spine systems, usually customer production systems.</p> </li> <li> <p>v1  \u2013 Dell and Mellanox based systems of either a TDS or Full layout.</p> </li> </ul> <p>CANU will ensure that each cell has valid data and that the connections between devices are allowed. Errors will stop processing and must be fixed in the spreadsheet before moving on.</p> <p>A \u201cclean run\u201d through a worksheet will include the model, a port-map of each node and may include warnings. See a list of typical errors at the end of this document to help in fixing the worksheet data.</p> <p>Once the worksheet is validated you can check for any errors:</p> <pre><code>canu validate shcd -a full --shcd ./HPE\\ System\\ Hela\\ CCD.revA27.xlsx --tabs 10G_25G_40G_100G,NMN --corners I37,T107,J15,T16 --log DEBUG\n</code></pre> <p>Back to index</p>"},{"location":"network_configuration_and_upgrade/validation_errors/","title":"Typical CANU validation errors and how to fix them","text":"<p>Issue:  Port number not specified</p> <pre><code>validate_shcd - CRITICAL: A port number must be specified. Please correct the SHCD for HMN:V36 with an empty value\n</code></pre> <p>Solution: </p> <p>Blank cell.  Minimally the Source or Destination and Port needs to be specified. </p> <p>Issue:  PDU tab not found from SHCD</p> <pre><code>Tab PDU not found in ./HPE System Hela CCD.revA27.xlsx\n\nAvailable tabs: ['Config. Summary', 'HPE Cables', 'RiverRackLayout ', \n'Arista', 'River Device Diagrams', 'HPE Devices', 'SCT pt_pt'\n'yaml', 'Mountain-TDS-Management', 'MTN Rack Layout', \n'10G_25G_40G_100G', 'NMN', 'HMN', 'PDU ']\n</code></pre> <p>SOLUTION: </p> <p>PDU has an extra space in the tab name. </p> <p>Issue:  Incorrectly formatted header in SHCD</p> <pre><code>validate_shcd - CRITICAL:\n\nOn tab PDU, the header is formatted incorrectly.\n\nColumns must exist in the following order, but may have other columns in between:\n\n[0, 1, 2, 'Slot', 'Port', 'Destination', 'Rack', 'Location', 'Port']\n</code></pre> <p>SOLUTION: </p> <p>Fix the header naming to match the expected output. </p> <p>Back to index</p>"}]}