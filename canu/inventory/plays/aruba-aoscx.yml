---
- hosts: aruba
  collections:
    - arubanetworks.aoscx
  gather_facts: true
  vars:
    # This should be a template but for now, pass is an extra var path to whatever config is needed
    # pass in the folder containing the switch configs or be in the same directory
    config_folder: ""
    switch_config: "{{ config_folder }}/{{ inventory_hostname }}.cfg"
    login_url: "https://{{ ansible_host }}/rest/v10.09/login"
    dryrun_url: "https://{{ ansible_host }}/rest/v10.09/configs/running-config?dryrun"
    checkpoint_name: "ac_{{ ansible_date_time.year }}_{{ ansible_date_time.month }}_{{ ansible_date_time.day }}_{{ansible_date_time.hour }}_{{ ansible_date_time.minute }}_{{ ansible_date_time.second }}"
    configs_url: "https://{{ ansible_host }}/rest/v10.09/fullconfigs"
    validated_config_json: "{{ playbook_dir }}/{{ inventory_hostname }}_{{ checkpoint_name }}.json"
    logout_url: "https://{{ ansible_host }}/rest/v10.09/logout"
    running_config_url: "https://{{ ansible_host }}/rest/v10.09/configs/running-config"
  tasks:
    - name: get running config as json
      aoscx_backup_config:
        config_name: "running-config"
        output_file: "{{ inventory_hostname }}.json"

    # put the dryun tasks in a block to handle failures
    - name: dryrun config
      block:
        # log in and register the cookie
        - name: login to api
          ansible.builtin.uri:
            url: "{{ login_url }}"
            validate_certs: false
            force_basic_auth: true
            use_proxy: false
            method: POST
            body_format: raw
            body: username={{ ansible_user }}&password={{ ansible_password }}
            return_content: true
          register: login

        # upload the new config in dryrun mode
        - name: upload new config in dryrun mode
          ansible.builtin.uri:
            url: "{{ dryrun_url }}"
            validate_certs: false
            use_proxy: false
            method: POST
            return_content: true
            # config to validate with dryun
            src: "{{ switch_config }}"
            # per Ansible: should be used with force_basic_auth to ensure
            # success when the remote end sends a 401
            force_basic_auth: true
            follow_redirects: all
            headers:
              Content-Type: "text/plain"
              Cookie: "{{ login.set_cookie }}"
            # success returns Accepted
            status_code: 202
          register: this

        # loop on the status until no longer pending
        - name: check dry run status
          ansible.builtin.uri:
            url: "{{ dryrun_url }}"
            validate_certs: false
            use_proxy: false
            method: GET
            return_content: true
            headers:
              Cookie: "{{ login.set_cookie }}"
          register: _result
          until: _result.json.state != "pending"
          retries: 125
          delay: 5 # Every 5 seconds

        # fail if the config is bad
        - name: show errors and fail if needed
          debug:
            msg: "{{ item }}"
          loop: "{{ _result.json.errors }}"
          when: _result.json.state == "error"
          failed_when: _result.json.state == "error"

        - name: get generated config in json format
          ansible.builtin.set_fact:
            original_config: "{{ _result.json.configs.json }}"

        # Get the mgmt interface config from the running-config and apply it to the generated config.
        # This should prevent users from accidentally locking themselves out.
        # We can't get query the API direclty for the mgmt interface config because
        # there are additional fields added that won't work when we upload the running-config json payload.
        - name: get mgmt int config from running config
          ansible.builtin.uri:
            url: "{{ running_config_url }}"
            validate_certs: false
            use_proxy: false
            method: GET
            return_content: true
            headers:
              Cookie: "{{ login.set_cookie }}"
          register: running_config_data

        - name: get mgmt int json
          ansible.builtin.set_fact:
            mgmt_int: "{{ running_config_data.json.System.mgmt_intf }}"

        - name: add mgmt int config to generated config
          ansible.utils.update_fact:
            updates:
              - path: original_config.System.mgmt_intf
                value: "{{ mgmt_int }}"
          register: updated_config

        - name: write jsonified config to a local file
          ansible.builtin.copy:
            content: "{{ updated_config.original_config | to_json(indent=4) }}"
            dest: "{{ validated_config_json }}"

        # set checkpoint for 1 minute.
        # This play uses ssh instead of the default api.
        - name: set checkpoint for one minute "checkpoint auto 1"
          vars:
            ansible_connection: network_cli
          aoscx_command:
            commands:
              - checkpoint auto confirm # accept lingering checkpoints, ran into issues after uploadding full json conifg
              - checkpoint auto 1

        # Finally, upload the new config as the running-config
        - name: upload local json config to the startup-config
          aoscx_upload_config:
            config_name: "startup-config"
            config_json: "{{ validated_config_json }}"
            vrf: "mgmt"
          timeout: 15

        - name: get diff between running-config and startup-config
          register: diff
          vars:
            ansible_connection: network_cli
          aoscx_command:
            commands:
              - checkpoint diff startup-config running-config

        # print cli diff output
        - name: diff output
          debug:
            msg: "{{ item }}"
          with_items: "{{ diff['stdout'] }}"

        # copy startup-config to running-config if there are changes needed.
        - name: Copy startup-config to running-config
          aoscx_checkpoint:
            destination_config: running-config
            source_config: startup-config
          timeout: 15
          when: diff.stdout[0] != "No difference in configs."

        # Accept the checkpoint
        - name: confirm checkpoint "checkpoint auto confirm"
          vars:
            ansible_connection: network_cli
          aoscx_command:
            commands:
              - checkpoint auto confirm
          retries: 5
          delay: 5 # Every 5 seconds

        # Save the config.  Shouldn't need this but just incase.
        - name: Save the configuration "write memory"
          vars:
            ansible_connection: network_cli
          aoscx_command:
            commands:
              - write memory
          when: diff.stdout[0] != "No difference in configs."

      # always log out so no session is left open
      always:
        - name: always logout of api
          ansible.builtin.uri:
            url: "{{ logout_url }}"
            validate_certs: false
            force_basic_auth: true
            use_proxy: true
            method: POST
            headers:
              Cookie: "{{ login.set_cookie }}"
            return_content: true
          register: logout
