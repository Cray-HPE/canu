#!/usr/bin/env bash
# MIT License
#
# (C) Copyright 2022-2023 Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
set -e
set -u
set -o pipefail
set -o functrace

# trap on error and print the line number and command
trap 'die ${LINENO} "$BASH_COMMAND"' ERR


CANU_IMAGE="artifactory.algol60.net/csm-docker/stable/canu"
CANU_TAG="latest"
# Use the publicly available alpine image so users do not need to log in
ALPINE_IMAGE="alpine"
ALPINE_VERSION="3.17"
PYTHON_VERSION="3.10"

# die prints the line number and command that failed
die() {
  local lineno="${1}"
  local msg="${2}"
  >&2 echo "**         **"
  >&2 echo "** FAILURE ** $(basename "${BASH_SOURCE[0]}"):${FUNCNAME[*]:0:${#FUNCNAME[@]}-1}:$lineno:$msg"
  >&2 echo "**         **"
}

usage() {
  echo
  echo "${BASH_SOURCE[0]} -d(ev) | -p(rod) [-r(ebuild)] [-i(mage) <image>] [args] [-h(elp)]"
  echo
  echo "  -d: run the dev container (editable environment for triage, debugging, and development)"
  echo "  -p: run the prod container (lightweight, rootless canu for everyday use)"
  echo "  -r: rebuild the container (default \${ALPINE_IMAGE}: ${ALPINE_IMAGE})"
  echo "  -i: specify the image to use (default \${CANU_IMAGE}: ${CANU_IMAGE})"
  echo "  -h: print this help message"
  echo
}

detect_platforms() {
  PLATFORM=""
  platforms=("podman" "docker")
  # Find a container platform (podman, docker, etc...)
  for platform in "${platforms[@]}";do
    if which "${platform}" >/dev/null 2>&1;then
      # set the filepath
      PLATFORM=$(which "${platform}")
      break
    fi
  done

  if [[ -z "${PLATFORM}" ]];then
    >&2 echo "No container platform (podman, docker etc...) found.  Exiting..."
    exit 1
  fi
}

set_mount_options() {
  # Set mount options depending on container platform
  if [[ $(basename "${PLATFORM}") == "podman" ]];then
      MOUNTOPTS="Z,U"
      MOUNTOPTS_SSH="ro"
      MOUNTOPTS_KUBE="Z,U"
  else
      MOUNTOPTS="rw"
      MOUNTOPTS_SSH="ro"
      MOUNTOPTS_KUBE="ro"
  fi
}

run_container() {
  # if the ssh socket is not set, then   do not mount it into the container
  if [[ -z "${SSH_AUTH_SOCK:-}" ]]; then
    if [[ -d "${K8S_DIR}" ]]; then
      cmd="${PLATFORM} run -it --rm --net=host -v ${PWD}:${MOUNTED}:${MOUNTOPTS} -v ${K8S_DIR}:${K8S_MOUNT_DIR}:${MOUNTOPTS_KUBE} --name ${CONTAINER_NAME} ${IMAGE_AND_TAG}"
    else
      cmd="${PLATFORM} run -it --rm --net=host -v ${PWD}:${MOUNTED}:${MOUNTOPTS} --name ${CONTAINER_NAME} ${IMAGE_AND_TAG}"
    fi
  else
    if [[ -d "${K8S_DIR}" ]]; then
      cmd="${PLATFORM} run -it --rm --net=host -v ${PWD}:${MOUNTED}:${MOUNTOPTS} -v ${K8S_DIR}:${K8S_MOUNT_DIR}:${MOUNTOPTS_KUBE} -v ${SSH_AUTH_SOCK}:/ssh-agent:${MOUNTOPTS_SSH} --name ${CONTAINER_NAME} ${IMAGE_AND_TAG}"
    else
      cmd="${PLATFORM} run -it --rm --net=host -v ${PWD}:${MOUNTED}:${MOUNTOPTS} -v ${SSH_AUTH_SOCK}:/ssh-agent:${MOUNTOPTS_SSH} --name ${CONTAINER_NAME} ${IMAGE_AND_TAG}"
    fi
  fi

  $cmd
}

main() {
  if [[ $# -eq 0 ]];then
    usage
    exit 1
  fi

  if [[ "${DEBUG:-false}" == "true" ]]; then
    set -x
  fi

  # check if a container runtime is installed
  detect_platforms

  K8S_DIR=/etc/kubernetes
  K8S_MOUNT_DIR=/etc/kubernetes

  # Parse short options
  OPTIND=1
  while getopts "hi:rdp" opt
  do
    case "$opt" in
      'h') usage; exit 0 ;;
      'i') CANU_IMAGE=$OPTARG ;;
      'r') REBUILD=true ;;
      'd') DEV=true ;;
      'p') PROD=true ;;
        *) usage >&2; exit 1 ;;
    esac
  done
  shift $((OPTIND - 1))

  set_mount_options

  # Set mounted directory depending on dev or prod
  if [[ "${DEV:-false}" == "true" ]];then
    # if dev is set, then prod is false explicitly
    PROD=false
    # the mount path in the dev container is /root/mounted
    MOUNTED="/root/mounted"
    # dev image is the same as prod, but with the suffix 'dev'
    IMAGE_AND_TAG="${CANU_IMAGE}-dev:${CANU_TAG}"
    CONTAINER_NAME="${CANU_IMAGE##*/}dev"
    TARGET="dev"
  fi

  if [[ "${PROD:-false}" == "true" ]];then
    # if prod is set, then dev is false explicitly
    DEV=false
    # the mount path in the prod container is /home/canu/mounted
    MOUNTED="/home/canu/mounted"
    # prod image is just "canu"...
    IMAGE_AND_TAG="${CANU_IMAGE}:${CANU_TAG}"
    # ...as is the container name
    CONTAINER_NAME="${CANU_IMAGE##*/}"
    TARGET="prod"
  fi

  # if the image does not exist
  if [[ -z $(${PLATFORM} image ls -q "${IMAGE_AND_TAG}") ]]; then
    # try to pull it
    if ! "${PLATFORM}" pull "${IMAGE_AND_TAG}"; then
      >&2 echo "ERROR Image pull failed.  Attempting to build ${CANU_IMAGE}."
      REBUILD=true
    fi
  fi

  # if that fails, try to build it and tag the image
  if [[ "${REBUILD:-}" == "true" ]]; then
    if BUILDKIT=1 "${PLATFORM}" build \
      --build-arg ALPINE_IMAGE="${ALPINE_IMAGE}" \
      --build-arg PYTHON_VERSION="${PYTHON_VERSION}" \
      --build-arg ALPINE_VERSION="${ALPINE_VERSION}" \
      --tag "${CONTAINER_NAME}:${CANU_TAG}" \
      -f Dockerfile \
      --target "${TARGET}" .; then
      "${PLATFORM}" tag "${CONTAINER_NAME}:${CANU_TAG}" "${IMAGE_AND_TAG}"
    else
      >&2 echo "ERROR Image build failed.  Exiting..."
      exit 1
    fi
  fi

  run_container
}

# ${BASH_SOURCE[0]} is the name of the current file that the shell is reading regardless of whether it is being sourced or executed
# ${0} is the name of the current file being executed
# thus, if ${BASH_SOURCE[0]} is the same as ${0}, run the script as normal
if [[ "${BASH_SOURCE[0]}" -ef "${0}" ]]; then
  main "$@"
else
  # this script is being sourced so do not run the functions
  # this helps with unit tests and/or other scripts needing to utilize the functions defined here
  :
fi
