/*
 *
 *  MIT License
 *
 *  (C) Copyright 2021-2023 Hewlett Packard Enterprise Development LP
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a
 *  copy of this software and associated documentation files (the "Software"),
 *  to deal in the Software without restriction, including without limitation
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense,
 *  and/or sell copies of the Software, and to permit persons to whom the
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included
 *  in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 *  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 *  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 *  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 *  OTHER DEALINGS IN THE SOFTWARE.
 *
 */
@Library('csm-shared-library') _

def mainPythonVersion = '3.10'
def pythonImage = 'artifactory.algol60.net/csm-docker/stable/csm-docker-sle-python'

// Disable pr-merge builds; not used.
if (env.BRANCH_NAME ==~ ~"^PR-\\d+") {
    currentBuild.result = 'SUCCESS'
    echo "Pull-Request builds are skipped."
    return
}

// Only consider X.Y.Z tags as stable, do not consider X.Y.Z{[a|b|rc]N} or X.Y.Z.* tags as stable.
// The ==~ operator performs an exact match.
def stableToken = ~/v?\d+\.\d+\.\d+/
def isStable = (env.TAG_NAME != null & env.TAG_NAME ==~ stableToken) ? true : false
pipeline {
    agent {
        label "metal-gcp-builder"
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: "10"))
        timeout(time: 20, unit: 'MINUTES')
        disableConcurrentBuilds()
        timestamps()
    }

    environment {
        NAME = getRepoName()
    }

    stages {

 stage('Image: Build & Publish') {

      environment {
          IMAGE_VERSION = "${image_version}"
      }

      steps {
          script {
              // Use setuptools_scm to resolve the version(s) to use for the build.
              sh "python3 -m pip install setuptools_scm[toml]"
              image_version = sh(returnStdout: true, script: "python3 -m setuptools_scm | tr -s '+' '_' | sed 's/^v//'").trim()
              version = sh(returnStdout: true, script: "python3 -m setuptools_scm | tr -s '-' '~' | sed 's/^v//'").trim()
              sh "make image"
              publishCsmDockerImage(image: "${env.NAME}", tag: "${image_version}-p${PYTHON_VERSION}", isStable: isStable)

              // Only publish the simple version images on the latest/newest base image.
              if ("${PYTHON_VERSION}" == "${mainPythonVersion}") {
                  publishCsmDockerImage(image: "${env.NAME}", tag: "${image_version}", isStable: isStable)
              }
          }
      }
  }
        }
    }
    post {
        always {
            postChownFiles()
        }
    }
}
