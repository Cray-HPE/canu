/*
 *
 *  MIT License
 *
 *  (C) Copyright 2021-2023 Hewlett Packard Enterprise Development LP
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a
 *  copy of this software and associated documentation files (the "Software"),
 *  to deal in the Software without restriction, including without limitation
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense,
 *  and/or sell copies of the Software, and to permit persons to whom the
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included
 *  in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 *  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 *  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 *  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 *  OTHER DEALINGS IN THE SOFTWARE.
 *
 */
@Library('csm-shared-library') _

def pythonImage = 'artifactory.algol60.net/csm-docker/stable/csm-docker-sle-python'

// Disable pr-merge builds; not used.
if (env.BRANCH_NAME ==~ ~"^PR-\\d+") {
    currentBuild.result = 'SUCCESS'
    echo "Pull-Request builds are skipped."
    return
} else if (env.BRANCH_NAME ==~ ~"^dependabot/github_actions") {
    currentBuild.result = 'SUCCESS'
    echo "Dependabot GitHub action builds are skipped."
    return
}

// Only consider X.Y.Z tags as stable, do not consider X.Y.Z{[a|b|rc]N} or X.Y.Z.* tags as stable.
// The ==~ operator performs an exact match.
def stableToken = ~/v?\d+\.\d+\.\d+/
def isStable = (env.TAG_NAME != null & env.TAG_NAME ==~ stableToken) ? true : false
def version
pipeline {
    agent {
        label "metal-gcp-builder"
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: "10"))
        timeout(time: 50, unit: 'MINUTES')
        disableConcurrentBuilds()
        timestamps()
    }

    environment {
        NAME = getRepoName()
    }

    stages {

        stage('Prepare') {
            steps {
                script {
                    sh "python3 -m pip install setuptools_scm[toml]"
                    version = sh(returnStdout: true, script: "python3 -m setuptools_scm | tr -s '-' '~' | tr -s '+' '_' | sed 's/^v//'").trim()
                }
            }
        }

        stage('Container Image') {

            environment {
                VERSION = "${version}"
            }

            stages {
                stage('Build') {
                    parallel {
                        stage('Develop image') {
                            steps {
                                sh "make dev_image"
                            }
                        }
                        stage('Production image') {
                            steps {
                                sh "make prod_image"
                            }
                        }
                    }
                }
                stage('Publish') {
                    steps {
                        script {
                            // Use setuptools_scm to resolve the version(s) to use for the build.
                            publishCsmDockerImage(image: "${env.NAME}", tag: "${version}-dev", isStable: isStable)
                            publishCsmDockerImage(image: "${env.NAME}", tag: "${version}", isStable: isStable)
                        }
                    }
                }
            }
        }
        stage('RPM') {

            matrix {

                agent {
                    node {
                        customWorkspace "${env.WORKSPACE}/${ARCH}/${PYTHON_VERSION}"
                    }
                }

                axes {

                    axis {
                        name 'ARCH'
                        values 'x86_64'
                    }

                    axis {
                        name 'PYTHON_VERSION'
                        values '3.10'
                    }

                }

                stages {

                    stage('Prepare') {

                        agent {
                            docker {
                                reuseNode true
                                image "${pythonImage}:${PYTHON_VERSION}"
                            }
                        }
                        steps {
                            script {
                                // Inject distro-specific metadata (e.g. which distro and service pack).
                                runLibraryScript("addRpmMetaData.sh", "${env.NAME}.spec")
                                sh "make prepare"
                                sh "git update-index --assume-unchanged ${env.NAME}.spec"
                            }
                        }
                    }

                    stage('Build') {

                        environment {
                            VERSION = "${version}"
                        }

                        agent {
                            docker {
                                args '-u root'
                                // Build Python RPMs as root for Python rpm macros to build with the right sitelib.
                                reuseNode true
                                image "${pythonImage}:${PYTHON_VERSION}"
                            }
                        }

                        steps {
                            script {
                                // Use setuptools_scm to resolve the version(s) to use for the build.
                                sh "make rpm"
                            }
                        }
                    }

                    stage('Publish') {

                        agent {
                            docker {
                                args '-u root -v /var/run/docker.sock:/var/run/docker.sock -v /usr/bin/docker:/usr/bin/docker -v /home/jenkins/.ssh:/root/.ssh -v /home/jenkins/.ssh:/home/jenkins/.ssh --group-add 999'
                                reuseNode true
                                image "${pythonImage}:${PYTHON_VERSION}"
                            }
                        }

                        steps {
                            script {
                                def sleVersion = sh(returnStdout: true, script: 'awk -F= \'/VERSION_ID/{gsub(/["]/,""); print \$NF}\' /etc/os-release').trim()
                                def sles_version_parts = "${sleVersion}".tokenize('.')
                                def sles_major = "${sles_version_parts[0]}"
                                def sles_minor = "${sles_version_parts[1]}"
                                publishCsmRpms(
                                        arch: "${ARCH}",
                                        component: env.NAME,
                                        isStable: isStable,
                                        os: "sle-${sles_major}sp${sles_minor}",
                                        pattern: "dist/rpmbuild/RPMS/${ARCH}/*.rpm",
                                )
                                publishCsmRpms(
                                        arch: "src",
                                        component: env.NAME,
                                        isStable: isStable,
                                        os: "sle-${sles_major}sp${sles_minor}",
                                        pattern: "dist/rpmbuild/SRPMS/*.rpm",
                                )
                            }
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            postChownFiles()
        }
    }
}
