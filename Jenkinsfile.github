/*
 *
 *  MIT License
 *
 *  (C) Copyright 2021-2022 Hewlett Packard Enterprise Development LP
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a
 *  copy of this software and associated documentation files (the "Software"),
 *  to deal in the Software without restriction, including without limitation
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense,
 *  and/or sell copies of the Software, and to permit persons to whom the
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included
 *  in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 *  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 *  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 *  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 *  OTHER DEALINGS IN THE SOFTWARE.
 *
 */
@Library('csm-shared-library') _

def mainSleVersion = '15.4'
def pythonVersion = '3.10.8'
def crayCanu = 'cray-canu'
def crayCanuInventory = 'cray-canu-inventory'
def isStable = env.TAG_NAME != null ? true : false
pipeline {
    agent {
        label "metal-gcp-builder"
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: "10"))
        timeout(time: 20, unit: 'MINUTES')
        disableConcurrentBuilds()
        timestamps()
    }

    environment {
        CANU = getRepoName()
        CANU_INVENTORY = "${env.CANU}" + "-inventory"
        VERSION = sh(returnStdout: true, script: "git describe --tags | tr -s '-' '_' | tr -d '^v'").trim()
    }

    stages {

        stage('Build & Publish') {

            matrix {

                agent {
                    node {
                        label "metal-gcp-builder"
                        customWorkspace "${env.WORKSPACE}/${sleVersion}/${pythonVersion}"
                    }
                }

                axes {
                    axis {
                        name 'sleVersion'
                        values 15.3, 15.4
                    }
                }

                stages {
                    stage('Build: Image') {
                        when {
                            expression { "${sleVersion}" == "${mainSleVersion}" }
                        }
                        steps {
                            script {
                                sh "make image"
                            }
                        }
                    }
                    stage('Publish: Image') {
                        when {
                            expression { "${sleVersion}" == "${mainSleVersion}" }
                        }
                        steps {
                            script {
                                publishCsmDockerImage(
                                  snykTargetFile: "Dockerfile." + "${env.CANU}", 
                                  image: "${crayCanu}", 
                                  tag: "${env.VERSION}",
                                  isStable: isStable
                                )
                                publishCsmDockerImage(
                                  snykTargetFile: "Dockerfile." + "${env.CANU_INVENTORY}", 
                                  image: "${crayCanuInventory}", 
                                  tag: "${env.VERSION}", 
                                  isStable: isStable
                                )
                            }
                        }
                    }
                }
            }
        }
    }
}
